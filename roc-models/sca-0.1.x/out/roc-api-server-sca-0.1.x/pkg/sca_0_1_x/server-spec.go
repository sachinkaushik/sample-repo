// Package sca_0_1_x provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-app.roc.rocaas-tools/rocaas-cli version (devel) DO NOT EDIT.
package sca_0_1_x

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"qwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
