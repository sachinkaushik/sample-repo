// Package sca_0_1_x provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-app.roc.rocaas-tools/rocaas-cli version (devel) DO NOT EDIT.
package sca_0_1_x

import (
	"github.com/labstack/echo/v4"
	"github.com/onosproject/aether-roc-api/pkg/middleware/openapi3mw"
)

// SPDX-FileCopyrightText: 2022-present Intel Corporation
//
// SPDX-License-Identifier: LicenseRef-Intel

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// (PATCH /roc-api)
	PatchRocAPI(ctx echo.Context) error
	// GET /spec The OpenAPI specification for this service
	GetSpec(ctx echo.Context) error
	// GET /targets A list of just target names
	GetTargets(ctx echo.Context, typeId string) error
	// DELETE /collision-detection
	// (DELETE /sca/v0.1.x/{city-id}/collision-detection)
	DeleteCollisionDetection(ctx echo.Context, cityId CityId) error
	// GET /collision-detection Container
	// (GET /sca/v0.1.x/{city-id}/collision-detection)
	GetCollisionDetection(ctx echo.Context, cityId CityId) error
	// POST /collision-detection
	// (POST /sca/v0.1.x/{city-id}/collision-detection)
	PostCollisionDetection(ctx echo.Context, cityId CityId) error
	// GET /collision-detection/default/values Leafref
	// (GET /sca/v0.1.x/{city-id}/collision-detection/default/values)
	GetCollisionDetectionDefaultValuesLeafref(ctx echo.Context, cityId CityId) error
	// DELETE /collision-detection/detection-application
	// (DELETE /sca/v0.1.x/{city-id}/collision-detection/detection-application)
	DeleteCollisionDetectionDetectionApplication(ctx echo.Context, cityId CityId) error
	// GET /collision-detection/detection-application Container
	// (GET /sca/v0.1.x/{city-id}/collision-detection/detection-application)
	GetCollisionDetectionDetectionApplication(ctx echo.Context, cityId CityId) error
	// POST /collision-detection/detection-application
	// (POST /sca/v0.1.x/{city-id}/collision-detection/detection-application)
	PostCollisionDetectionDetectionApplication(ctx echo.Context, cityId CityId) error
	// GET /collision-detection/detection-application/model-state Container
	// (GET /sca/v0.1.x/{city-id}/collision-detection/detection-application/model-state)
	GetCollisionDetectionDetectionApplicationModelState(ctx echo.Context, cityId CityId) error
	// GET /collision-detection/district List
	// (GET /sca/v0.1.x/{city-id}/collision-detection/district)
	GetCollisionDetectionDistrictList(ctx echo.Context, cityId CityId) error
	// DELETE /collision-detection/district
	// (DELETE /sca/v0.1.x/{city-id}/collision-detection/district/{district-ref})
	DeleteCollisionDetectionDistrict(ctx echo.Context, cityId CityId, districtRef string) error
	// GET /collision-detection/district Container
	// (GET /sca/v0.1.x/{city-id}/collision-detection/district/{district-ref})
	GetCollisionDetectionDistrict(ctx echo.Context, cityId CityId, districtRef string) error
	// POST /collision-detection/district
	// (POST /sca/v0.1.x/{city-id}/collision-detection/district/{district-ref})
	PostCollisionDetectionDistrict(ctx echo.Context, cityId CityId, districtRef string) error
	// GET /collision-detection/district/{district-ref}/district-ref/values Leafref
	// (GET /sca/v0.1.x/{city-id}/collision-detection/district/{district-ref}/district-ref/values)
	GetCollisionDetectionDistrictDistrictRefValuesLeafref(ctx echo.Context, cityId CityId, districtRef string) error
	// GET /district List
	// (GET /sca/v0.1.x/{city-id}/district)
	GetDistrictList(ctx echo.Context, cityId CityId) error
	// DELETE /district
	// (DELETE /sca/v0.1.x/{city-id}/district/{district-id})
	DeleteDistrict(ctx echo.Context, cityId CityId, districtId string) error
	// GET /district Container
	// (GET /sca/v0.1.x/{city-id}/district/{district-id})
	GetDistrict(ctx echo.Context, cityId CityId, districtId string) error
	// POST /district
	// (POST /sca/v0.1.x/{city-id}/district/{district-id})
	PostDistrict(ctx echo.Context, cityId CityId, districtId string) error
	// DELETE /district/{district-id}/location
	// (DELETE /sca/v0.1.x/{city-id}/district/{district-id}/location)
	DeleteDistrictLocation(ctx echo.Context, cityId CityId, districtId string) error
	// GET /district/{district-id}/location Container
	// (GET /sca/v0.1.x/{city-id}/district/{district-id}/location)
	GetDistrictLocation(ctx echo.Context, cityId CityId, districtId string) error
	// POST /district/{district-id}/location
	// (POST /sca/v0.1.x/{city-id}/district/{district-id}/location)
	PostDistrictLocation(ctx echo.Context, cityId CityId, districtId string) error
	// GET /district/{district-id}/source List
	// (GET /sca/v0.1.x/{city-id}/district/{district-id}/source)
	GetDistrictSourceList(ctx echo.Context, cityId CityId, districtId string) error
	// DELETE /district/{district-id}/source
	// (DELETE /sca/v0.1.x/{city-id}/district/{district-id}/source/{source-id})
	DeleteDistrictSource(ctx echo.Context, cityId CityId, districtId string, sourceId string) error
	// GET /district/{district-id}/source Container
	// (GET /sca/v0.1.x/{city-id}/district/{district-id}/source/{source-id})
	GetDistrictSource(ctx echo.Context, cityId CityId, districtId string, sourceId string) error
	// POST /district/{district-id}/source
	// (POST /sca/v0.1.x/{city-id}/district/{district-id}/source/{source-id})
	PostDistrictSource(ctx echo.Context, cityId CityId, districtId string, sourceId string) error
	// DELETE /district/{district-id}/source/{source-id}/location
	// (DELETE /sca/v0.1.x/{city-id}/district/{district-id}/source/{source-id}/location)
	DeleteDistrictSourceLocation(ctx echo.Context, cityId CityId, districtId string, sourceId string) error
	// GET /district/{district-id}/source/{source-id}/location Container
	// (GET /sca/v0.1.x/{city-id}/district/{district-id}/source/{source-id}/location)
	GetDistrictSourceLocation(ctx echo.Context, cityId CityId, districtId string, sourceId string) error
	// POST /district/{district-id}/source/{source-id}/location
	// (POST /sca/v0.1.x/{city-id}/district/{district-id}/source/{source-id}/location)
	PostDistrictSourceLocation(ctx echo.Context, cityId CityId, districtId string, sourceId string) error
	// GET /district/{district-id}/source/{source-id}/state Container
	// (GET /sca/v0.1.x/{city-id}/district/{district-id}/source/{source-id}/state)
	GetDistrictSourceState(ctx echo.Context, cityId CityId, districtId string, sourceId string) error
	// DELETE /district/{district-id}/source/{source-id}/video
	// (DELETE /sca/v0.1.x/{city-id}/district/{district-id}/source/{source-id}/video)
	DeleteDistrictSourceVideo(ctx echo.Context, cityId CityId, districtId string, sourceId string) error
	// GET /district/{district-id}/source/{source-id}/video Container
	// (GET /sca/v0.1.x/{city-id}/district/{district-id}/source/{source-id}/video)
	GetDistrictSourceVideo(ctx echo.Context, cityId CityId, districtId string, sourceId string) error
	// POST /district/{district-id}/source/{source-id}/video
	// (POST /sca/v0.1.x/{city-id}/district/{district-id}/source/{source-id}/video)
	PostDistrictSourceVideo(ctx echo.Context, cityId CityId, districtId string, sourceId string) error
	// DELETE /traffic-classification
	// (DELETE /sca/v0.1.x/{city-id}/traffic-classification)
	DeleteTrafficClassification(ctx echo.Context, cityId CityId) error
	// GET /traffic-classification Container
	// (GET /sca/v0.1.x/{city-id}/traffic-classification)
	GetTrafficClassification(ctx echo.Context, cityId CityId) error
	// POST /traffic-classification
	// (POST /sca/v0.1.x/{city-id}/traffic-classification)
	PostTrafficClassification(ctx echo.Context, cityId CityId) error
	// DELETE /traffic-classification/classification-application
	// (DELETE /sca/v0.1.x/{city-id}/traffic-classification/classification-application)
	DeleteTrafficClassificationClassificationApplication(ctx echo.Context, cityId CityId) error
	// GET /traffic-classification/classification-application Container
	// (GET /sca/v0.1.x/{city-id}/traffic-classification/classification-application)
	GetTrafficClassificationClassificationApplication(ctx echo.Context, cityId CityId) error
	// POST /traffic-classification/classification-application
	// (POST /sca/v0.1.x/{city-id}/traffic-classification/classification-application)
	PostTrafficClassificationClassificationApplication(ctx echo.Context, cityId CityId) error
	// GET /traffic-classification/classification-application/model-state Container
	// (GET /sca/v0.1.x/{city-id}/traffic-classification/classification-application/model-state)
	GetTrafficClassificationClassificationApplicationModelState(ctx echo.Context, cityId CityId) error
	// GET /traffic-classification/default/values Leafref
	// (GET /sca/v0.1.x/{city-id}/traffic-classification/default/values)
	GetTrafficClassificationDefaultValuesLeafref(ctx echo.Context, cityId CityId) error
	// DELETE /traffic-classification/detection-application
	// (DELETE /sca/v0.1.x/{city-id}/traffic-classification/detection-application)
	DeleteTrafficClassificationDetectionApplication(ctx echo.Context, cityId CityId) error
	// GET /traffic-classification/detection-application Container
	// (GET /sca/v0.1.x/{city-id}/traffic-classification/detection-application)
	GetTrafficClassificationDetectionApplication(ctx echo.Context, cityId CityId) error
	// POST /traffic-classification/detection-application
	// (POST /sca/v0.1.x/{city-id}/traffic-classification/detection-application)
	PostTrafficClassificationDetectionApplication(ctx echo.Context, cityId CityId) error
	// GET /traffic-classification/detection-application/model-state Container
	// (GET /sca/v0.1.x/{city-id}/traffic-classification/detection-application/model-state)
	GetTrafficClassificationDetectionApplicationModelState(ctx echo.Context, cityId CityId) error
	// GET /traffic-classification/district List
	// (GET /sca/v0.1.x/{city-id}/traffic-classification/district)
	GetTrafficClassificationDistrictList(ctx echo.Context, cityId CityId) error
	// DELETE /traffic-classification/district
	// (DELETE /sca/v0.1.x/{city-id}/traffic-classification/district/{district-ref})
	DeleteTrafficClassificationDistrict(ctx echo.Context, cityId CityId, districtRef string) error
	// GET /traffic-classification/district Container
	// (GET /sca/v0.1.x/{city-id}/traffic-classification/district/{district-ref})
	GetTrafficClassificationDistrict(ctx echo.Context, cityId CityId, districtRef string) error
	// POST /traffic-classification/district
	// (POST /sca/v0.1.x/{city-id}/traffic-classification/district/{district-ref})
	PostTrafficClassificationDistrict(ctx echo.Context, cityId CityId, districtRef string) error
	// GET /traffic-classification/district/{district-ref}/district-ref/values Leafref
	// (GET /sca/v0.1.x/{city-id}/traffic-classification/district/{district-ref}/district-ref/values)
	GetTrafficClassificationDistrictDistrictRefValuesLeafref(ctx echo.Context, cityId CityId, districtRef string) error
	// DELETE /traffic-monitoring
	// (DELETE /sca/v0.1.x/{city-id}/traffic-monitoring)
	DeleteTrafficMonitoring(ctx echo.Context, cityId CityId) error
	// GET /traffic-monitoring Container
	// (GET /sca/v0.1.x/{city-id}/traffic-monitoring)
	GetTrafficMonitoring(ctx echo.Context, cityId CityId) error
	// POST /traffic-monitoring
	// (POST /sca/v0.1.x/{city-id}/traffic-monitoring)
	PostTrafficMonitoring(ctx echo.Context, cityId CityId) error
	// GET /traffic-monitoring/default/values Leafref
	// (GET /sca/v0.1.x/{city-id}/traffic-monitoring/default/values)
	GetTrafficMonitoringDefaultValuesLeafref(ctx echo.Context, cityId CityId) error
	// GET /traffic-monitoring/district List
	// (GET /sca/v0.1.x/{city-id}/traffic-monitoring/district)
	GetTrafficMonitoringDistrictList(ctx echo.Context, cityId CityId) error
	// DELETE /traffic-monitoring/district
	// (DELETE /sca/v0.1.x/{city-id}/traffic-monitoring/district/{district-ref})
	DeleteTrafficMonitoringDistrict(ctx echo.Context, cityId CityId, districtRef string) error
	// GET /traffic-monitoring/district Container
	// (GET /sca/v0.1.x/{city-id}/traffic-monitoring/district/{district-ref})
	GetTrafficMonitoringDistrict(ctx echo.Context, cityId CityId, districtRef string) error
	// POST /traffic-monitoring/district
	// (POST /sca/v0.1.x/{city-id}/traffic-monitoring/district/{district-ref})
	PostTrafficMonitoringDistrict(ctx echo.Context, cityId CityId, districtRef string) error
	// GET /traffic-monitoring/district/{district-ref}/district-ref/values Leafref
	// (GET /sca/v0.1.x/{city-id}/traffic-monitoring/district/{district-ref}/district-ref/values)
	GetTrafficMonitoringDistrictDistrictRefValuesLeafref(ctx echo.Context, cityId CityId, districtRef string) error
	// DELETE /traffic-monitoring/person-vehicle-bike-detection-application
	// (DELETE /sca/v0.1.x/{city-id}/traffic-monitoring/person-vehicle-bike-detection-application)
	DeleteTrafficMonitoringPersonVehicleBikeDetectionApplication(ctx echo.Context, cityId CityId) error
	// GET /traffic-monitoring/person-vehicle-bike-detection-application Container
	// (GET /sca/v0.1.x/{city-id}/traffic-monitoring/person-vehicle-bike-detection-application)
	GetTrafficMonitoringPersonVehicleBikeDetectionApplication(ctx echo.Context, cityId CityId) error
	// POST /traffic-monitoring/person-vehicle-bike-detection-application
	// (POST /sca/v0.1.x/{city-id}/traffic-monitoring/person-vehicle-bike-detection-application)
	PostTrafficMonitoringPersonVehicleBikeDetectionApplication(ctx echo.Context, cityId CityId) error
	// GET /traffic-monitoring/person-vehicle-bike-detection-application/model-state Container
	// (GET /sca/v0.1.x/{city-id}/traffic-monitoring/person-vehicle-bike-detection-application/model-state)
	GetTrafficMonitoringPersonVehicleBikeDetectionApplicationModelState(ctx echo.Context, cityId CityId) error
}

// SPDX-FileCopyrightText: 2022-present Intel Corporation
//
// SPDX-License-Identifier: LicenseRef-Intel

// serverInterfaceWrapper converts echo contexts to parameters.
type serverInterfaceWrapper struct {
	handler ServerInterface
}

// PatchRocAPI converts echo context to params.
func (w *serverInterfaceWrapper) PatchRocAPI(ctx echo.Context) error {

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PatchRocAPI(ctx)
}

// GetSpec - Get the OpenAPI3 specification in YAML format
func (w *serverInterfaceWrapper) GetSpec(ctx echo.Context) error {

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetSpec(ctx)
}

// GetTargets - get the full list of targets (devices)
func (w *serverInterfaceWrapper) GetTargets(ctx echo.Context) error {

	var typeId string
	typeId = string(ctx.QueryParam("type"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetTargets(ctx, typeId)
}

// DeleteCollisionDetection converts echo context to params.
func (w *serverInterfaceWrapper) DeleteCollisionDetection(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteCollisionDetection(ctx, cityId)
}

// GetCollisionDetection converts echo context to params.
func (w *serverInterfaceWrapper) GetCollisionDetection(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetCollisionDetection(ctx, cityId)
}

// PostCollisionDetection converts echo context to params.
func (w *serverInterfaceWrapper) PostCollisionDetection(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostCollisionDetection(ctx, cityId)
}

// GetCollisionDetectionDefaultValuesLeafref converts echo context to params.
func (w *serverInterfaceWrapper) GetCollisionDetectionDefaultValuesLeafref(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetCollisionDetectionDefaultValuesLeafref(ctx, cityId)
}

// DeleteCollisionDetectionDetectionApplication converts echo context to params.
func (w *serverInterfaceWrapper) DeleteCollisionDetectionDetectionApplication(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteCollisionDetectionDetectionApplication(ctx, cityId)
}

// GetCollisionDetectionDetectionApplication converts echo context to params.
func (w *serverInterfaceWrapper) GetCollisionDetectionDetectionApplication(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetCollisionDetectionDetectionApplication(ctx, cityId)
}

// PostCollisionDetectionDetectionApplication converts echo context to params.
func (w *serverInterfaceWrapper) PostCollisionDetectionDetectionApplication(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostCollisionDetectionDetectionApplication(ctx, cityId)
}

// GetCollisionDetectionDetectionApplicationModelState converts echo context to params.
func (w *serverInterfaceWrapper) GetCollisionDetectionDetectionApplicationModelState(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetCollisionDetectionDetectionApplicationModelState(ctx, cityId)
}

// GetCollisionDetectionDistrictList converts echo context to params.
func (w *serverInterfaceWrapper) GetCollisionDetectionDistrictList(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetCollisionDetectionDistrictList(ctx, cityId)
}

// DeleteCollisionDetectionDistrict converts echo context to params.
func (w *serverInterfaceWrapper) DeleteCollisionDetectionDistrict(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// ------------- Path parameter "district-ref" -------------

	var districtRef string
	districtRef = ctx.Param("district-ref")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteCollisionDetectionDistrict(ctx, cityId, districtRef)
}

// GetCollisionDetectionDistrict converts echo context to params.
func (w *serverInterfaceWrapper) GetCollisionDetectionDistrict(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// ------------- Path parameter "district-ref" -------------

	var districtRef string
	districtRef = ctx.Param("district-ref")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetCollisionDetectionDistrict(ctx, cityId, districtRef)
}

// PostCollisionDetectionDistrict converts echo context to params.
func (w *serverInterfaceWrapper) PostCollisionDetectionDistrict(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// ------------- Path parameter "district-ref" -------------

	var districtRef string
	districtRef = ctx.Param("district-ref")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostCollisionDetectionDistrict(ctx, cityId, districtRef)
}

// GetCollisionDetectionDistrictDistrictRefValuesLeafref converts echo context to params.
func (w *serverInterfaceWrapper) GetCollisionDetectionDistrictDistrictRefValuesLeafref(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// ------------- Path parameter "district-ref" -------------

	var districtRef string
	districtRef = ctx.Param("district-ref")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetCollisionDetectionDistrictDistrictRefValuesLeafref(ctx, cityId, districtRef)
}

// GetDistrictList converts echo context to params.
func (w *serverInterfaceWrapper) GetDistrictList(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetDistrictList(ctx, cityId)
}

// DeleteDistrict converts echo context to params.
func (w *serverInterfaceWrapper) DeleteDistrict(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// ------------- Path parameter "district-id" -------------

	var districtId string
	districtId = ctx.Param("district-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteDistrict(ctx, cityId, districtId)
}

// GetDistrict converts echo context to params.
func (w *serverInterfaceWrapper) GetDistrict(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// ------------- Path parameter "district-id" -------------

	var districtId string
	districtId = ctx.Param("district-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetDistrict(ctx, cityId, districtId)
}

// PostDistrict converts echo context to params.
func (w *serverInterfaceWrapper) PostDistrict(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// ------------- Path parameter "district-id" -------------

	var districtId string
	districtId = ctx.Param("district-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostDistrict(ctx, cityId, districtId)
}

// DeleteDistrictLocation converts echo context to params.
func (w *serverInterfaceWrapper) DeleteDistrictLocation(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// ------------- Path parameter "district-id" -------------

	var districtId string
	districtId = ctx.Param("district-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteDistrictLocation(ctx, cityId, districtId)
}

// GetDistrictLocation converts echo context to params.
func (w *serverInterfaceWrapper) GetDistrictLocation(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// ------------- Path parameter "district-id" -------------

	var districtId string
	districtId = ctx.Param("district-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetDistrictLocation(ctx, cityId, districtId)
}

// PostDistrictLocation converts echo context to params.
func (w *serverInterfaceWrapper) PostDistrictLocation(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// ------------- Path parameter "district-id" -------------

	var districtId string
	districtId = ctx.Param("district-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostDistrictLocation(ctx, cityId, districtId)
}

// GetDistrictSourceList converts echo context to params.
func (w *serverInterfaceWrapper) GetDistrictSourceList(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// ------------- Path parameter "district-id" -------------

	var districtId string
	districtId = ctx.Param("district-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetDistrictSourceList(ctx, cityId, districtId)
}

// DeleteDistrictSource converts echo context to params.
func (w *serverInterfaceWrapper) DeleteDistrictSource(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// ------------- Path parameter "district-id" -------------

	var districtId string
	districtId = ctx.Param("district-id")

	// ------------- Path parameter "source-id" -------------

	var sourceId string
	sourceId = ctx.Param("source-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteDistrictSource(ctx, cityId, districtId, sourceId)
}

// GetDistrictSource converts echo context to params.
func (w *serverInterfaceWrapper) GetDistrictSource(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// ------------- Path parameter "district-id" -------------

	var districtId string
	districtId = ctx.Param("district-id")

	// ------------- Path parameter "source-id" -------------

	var sourceId string
	sourceId = ctx.Param("source-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetDistrictSource(ctx, cityId, districtId, sourceId)
}

// PostDistrictSource converts echo context to params.
func (w *serverInterfaceWrapper) PostDistrictSource(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// ------------- Path parameter "district-id" -------------

	var districtId string
	districtId = ctx.Param("district-id")

	// ------------- Path parameter "source-id" -------------

	var sourceId string
	sourceId = ctx.Param("source-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostDistrictSource(ctx, cityId, districtId, sourceId)
}

// DeleteDistrictSourceLocation converts echo context to params.
func (w *serverInterfaceWrapper) DeleteDistrictSourceLocation(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// ------------- Path parameter "district-id" -------------

	var districtId string
	districtId = ctx.Param("district-id")

	// ------------- Path parameter "source-id" -------------

	var sourceId string
	sourceId = ctx.Param("source-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteDistrictSourceLocation(ctx, cityId, districtId, sourceId)
}

// GetDistrictSourceLocation converts echo context to params.
func (w *serverInterfaceWrapper) GetDistrictSourceLocation(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// ------------- Path parameter "district-id" -------------

	var districtId string
	districtId = ctx.Param("district-id")

	// ------------- Path parameter "source-id" -------------

	var sourceId string
	sourceId = ctx.Param("source-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetDistrictSourceLocation(ctx, cityId, districtId, sourceId)
}

// PostDistrictSourceLocation converts echo context to params.
func (w *serverInterfaceWrapper) PostDistrictSourceLocation(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// ------------- Path parameter "district-id" -------------

	var districtId string
	districtId = ctx.Param("district-id")

	// ------------- Path parameter "source-id" -------------

	var sourceId string
	sourceId = ctx.Param("source-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostDistrictSourceLocation(ctx, cityId, districtId, sourceId)
}

// GetDistrictSourceState converts echo context to params.
func (w *serverInterfaceWrapper) GetDistrictSourceState(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// ------------- Path parameter "district-id" -------------

	var districtId string
	districtId = ctx.Param("district-id")

	// ------------- Path parameter "source-id" -------------

	var sourceId string
	sourceId = ctx.Param("source-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetDistrictSourceState(ctx, cityId, districtId, sourceId)
}

// DeleteDistrictSourceVideo converts echo context to params.
func (w *serverInterfaceWrapper) DeleteDistrictSourceVideo(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// ------------- Path parameter "district-id" -------------

	var districtId string
	districtId = ctx.Param("district-id")

	// ------------- Path parameter "source-id" -------------

	var sourceId string
	sourceId = ctx.Param("source-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteDistrictSourceVideo(ctx, cityId, districtId, sourceId)
}

// GetDistrictSourceVideo converts echo context to params.
func (w *serverInterfaceWrapper) GetDistrictSourceVideo(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// ------------- Path parameter "district-id" -------------

	var districtId string
	districtId = ctx.Param("district-id")

	// ------------- Path parameter "source-id" -------------

	var sourceId string
	sourceId = ctx.Param("source-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetDistrictSourceVideo(ctx, cityId, districtId, sourceId)
}

// PostDistrictSourceVideo converts echo context to params.
func (w *serverInterfaceWrapper) PostDistrictSourceVideo(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// ------------- Path parameter "district-id" -------------

	var districtId string
	districtId = ctx.Param("district-id")

	// ------------- Path parameter "source-id" -------------

	var sourceId string
	sourceId = ctx.Param("source-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostDistrictSourceVideo(ctx, cityId, districtId, sourceId)
}

// DeleteTrafficClassification converts echo context to params.
func (w *serverInterfaceWrapper) DeleteTrafficClassification(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteTrafficClassification(ctx, cityId)
}

// GetTrafficClassification converts echo context to params.
func (w *serverInterfaceWrapper) GetTrafficClassification(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetTrafficClassification(ctx, cityId)
}

// PostTrafficClassification converts echo context to params.
func (w *serverInterfaceWrapper) PostTrafficClassification(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostTrafficClassification(ctx, cityId)
}

// DeleteTrafficClassificationClassificationApplication converts echo context to params.
func (w *serverInterfaceWrapper) DeleteTrafficClassificationClassificationApplication(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteTrafficClassificationClassificationApplication(ctx, cityId)
}

// GetTrafficClassificationClassificationApplication converts echo context to params.
func (w *serverInterfaceWrapper) GetTrafficClassificationClassificationApplication(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetTrafficClassificationClassificationApplication(ctx, cityId)
}

// PostTrafficClassificationClassificationApplication converts echo context to params.
func (w *serverInterfaceWrapper) PostTrafficClassificationClassificationApplication(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostTrafficClassificationClassificationApplication(ctx, cityId)
}

// GetTrafficClassificationClassificationApplicationModelState converts echo context to params.
func (w *serverInterfaceWrapper) GetTrafficClassificationClassificationApplicationModelState(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetTrafficClassificationClassificationApplicationModelState(ctx, cityId)
}

// GetTrafficClassificationDefaultValuesLeafref converts echo context to params.
func (w *serverInterfaceWrapper) GetTrafficClassificationDefaultValuesLeafref(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetTrafficClassificationDefaultValuesLeafref(ctx, cityId)
}

// DeleteTrafficClassificationDetectionApplication converts echo context to params.
func (w *serverInterfaceWrapper) DeleteTrafficClassificationDetectionApplication(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteTrafficClassificationDetectionApplication(ctx, cityId)
}

// GetTrafficClassificationDetectionApplication converts echo context to params.
func (w *serverInterfaceWrapper) GetTrafficClassificationDetectionApplication(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetTrafficClassificationDetectionApplication(ctx, cityId)
}

// PostTrafficClassificationDetectionApplication converts echo context to params.
func (w *serverInterfaceWrapper) PostTrafficClassificationDetectionApplication(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostTrafficClassificationDetectionApplication(ctx, cityId)
}

// GetTrafficClassificationDetectionApplicationModelState converts echo context to params.
func (w *serverInterfaceWrapper) GetTrafficClassificationDetectionApplicationModelState(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetTrafficClassificationDetectionApplicationModelState(ctx, cityId)
}

// GetTrafficClassificationDistrictList converts echo context to params.
func (w *serverInterfaceWrapper) GetTrafficClassificationDistrictList(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetTrafficClassificationDistrictList(ctx, cityId)
}

// DeleteTrafficClassificationDistrict converts echo context to params.
func (w *serverInterfaceWrapper) DeleteTrafficClassificationDistrict(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// ------------- Path parameter "district-ref" -------------

	var districtRef string
	districtRef = ctx.Param("district-ref")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteTrafficClassificationDistrict(ctx, cityId, districtRef)
}

// GetTrafficClassificationDistrict converts echo context to params.
func (w *serverInterfaceWrapper) GetTrafficClassificationDistrict(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// ------------- Path parameter "district-ref" -------------

	var districtRef string
	districtRef = ctx.Param("district-ref")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetTrafficClassificationDistrict(ctx, cityId, districtRef)
}

// PostTrafficClassificationDistrict converts echo context to params.
func (w *serverInterfaceWrapper) PostTrafficClassificationDistrict(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// ------------- Path parameter "district-ref" -------------

	var districtRef string
	districtRef = ctx.Param("district-ref")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostTrafficClassificationDistrict(ctx, cityId, districtRef)
}

// GetTrafficClassificationDistrictDistrictRefValuesLeafref converts echo context to params.
func (w *serverInterfaceWrapper) GetTrafficClassificationDistrictDistrictRefValuesLeafref(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// ------------- Path parameter "district-ref" -------------

	var districtRef string
	districtRef = ctx.Param("district-ref")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetTrafficClassificationDistrictDistrictRefValuesLeafref(ctx, cityId, districtRef)
}

// DeleteTrafficMonitoring converts echo context to params.
func (w *serverInterfaceWrapper) DeleteTrafficMonitoring(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteTrafficMonitoring(ctx, cityId)
}

// GetTrafficMonitoring converts echo context to params.
func (w *serverInterfaceWrapper) GetTrafficMonitoring(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetTrafficMonitoring(ctx, cityId)
}

// PostTrafficMonitoring converts echo context to params.
func (w *serverInterfaceWrapper) PostTrafficMonitoring(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostTrafficMonitoring(ctx, cityId)
}

// GetTrafficMonitoringDefaultValuesLeafref converts echo context to params.
func (w *serverInterfaceWrapper) GetTrafficMonitoringDefaultValuesLeafref(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetTrafficMonitoringDefaultValuesLeafref(ctx, cityId)
}

// GetTrafficMonitoringDistrictList converts echo context to params.
func (w *serverInterfaceWrapper) GetTrafficMonitoringDistrictList(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetTrafficMonitoringDistrictList(ctx, cityId)
}

// DeleteTrafficMonitoringDistrict converts echo context to params.
func (w *serverInterfaceWrapper) DeleteTrafficMonitoringDistrict(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// ------------- Path parameter "district-ref" -------------

	var districtRef string
	districtRef = ctx.Param("district-ref")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteTrafficMonitoringDistrict(ctx, cityId, districtRef)
}

// GetTrafficMonitoringDistrict converts echo context to params.
func (w *serverInterfaceWrapper) GetTrafficMonitoringDistrict(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// ------------- Path parameter "district-ref" -------------

	var districtRef string
	districtRef = ctx.Param("district-ref")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetTrafficMonitoringDistrict(ctx, cityId, districtRef)
}

// PostTrafficMonitoringDistrict converts echo context to params.
func (w *serverInterfaceWrapper) PostTrafficMonitoringDistrict(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// ------------- Path parameter "district-ref" -------------

	var districtRef string
	districtRef = ctx.Param("district-ref")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostTrafficMonitoringDistrict(ctx, cityId, districtRef)
}

// GetTrafficMonitoringDistrictDistrictRefValuesLeafref converts echo context to params.
func (w *serverInterfaceWrapper) GetTrafficMonitoringDistrictDistrictRefValuesLeafref(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// ------------- Path parameter "district-ref" -------------

	var districtRef string
	districtRef = ctx.Param("district-ref")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetTrafficMonitoringDistrictDistrictRefValuesLeafref(ctx, cityId, districtRef)
}

// DeleteTrafficMonitoringPersonVehicleBikeDetectionApplication converts echo context to params.
func (w *serverInterfaceWrapper) DeleteTrafficMonitoringPersonVehicleBikeDetectionApplication(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteTrafficMonitoringPersonVehicleBikeDetectionApplication(ctx, cityId)
}

// GetTrafficMonitoringPersonVehicleBikeDetectionApplication converts echo context to params.
func (w *serverInterfaceWrapper) GetTrafficMonitoringPersonVehicleBikeDetectionApplication(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetTrafficMonitoringPersonVehicleBikeDetectionApplication(ctx, cityId)
}

// PostTrafficMonitoringPersonVehicleBikeDetectionApplication converts echo context to params.
func (w *serverInterfaceWrapper) PostTrafficMonitoringPersonVehicleBikeDetectionApplication(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostTrafficMonitoringPersonVehicleBikeDetectionApplication(ctx, cityId)
}

// GetTrafficMonitoringPersonVehicleBikeDetectionApplicationModelState converts echo context to params.
func (w *serverInterfaceWrapper) GetTrafficMonitoringPersonVehicleBikeDetectionApplicationModelState(ctx echo.Context) error {

	// ------------- Path parameter "city-id" -------------

	var cityId CityId
	cityId = CityId(ctx.Param("city-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetTrafficMonitoringPersonVehicleBikeDetectionApplicationModelState(ctx, cityId)
}

// SPDX-FileCopyrightText: 2022-present Intel Corporation
//
// SPDX-License-Identifier: LicenseRef-Intel

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, validateResponse bool) error {

	openApiDefinition, err := GetSwagger()
	if err != nil {
		return err
	}
	wrapper := serverInterfaceWrapper{
		handler: si,
	}

	router.DELETE("/sca/v0.1.x/:city-id/collision-detection", wrapper.DeleteCollisionDetection, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sca/v0.1.x/:city-id/collision-detection", wrapper.GetCollisionDetection, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/sca/v0.1.x/:city-id/collision-detection", wrapper.PostCollisionDetection, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sca/v0.1.x/:city-id/collision-detection/default/values", wrapper.GetCollisionDetectionDefaultValuesLeafref, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/sca/v0.1.x/:city-id/collision-detection/detection-application", wrapper.DeleteCollisionDetectionDetectionApplication, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sca/v0.1.x/:city-id/collision-detection/detection-application", wrapper.GetCollisionDetectionDetectionApplication, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/sca/v0.1.x/:city-id/collision-detection/detection-application", wrapper.PostCollisionDetectionDetectionApplication, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sca/v0.1.x/:city-id/collision-detection/detection-application/model-state", wrapper.GetCollisionDetectionDetectionApplicationModelState, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sca/v0.1.x/:city-id/collision-detection/district", wrapper.GetCollisionDetectionDistrictList, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/sca/v0.1.x/:city-id/collision-detection/district/:district-ref", wrapper.DeleteCollisionDetectionDistrict, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sca/v0.1.x/:city-id/collision-detection/district/:district-ref", wrapper.GetCollisionDetectionDistrict, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/sca/v0.1.x/:city-id/collision-detection/district/:district-ref", wrapper.PostCollisionDetectionDistrict, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sca/v0.1.x/:city-id/collision-detection/district/:district-ref/district-ref/values", wrapper.GetCollisionDetectionDistrictDistrictRefValuesLeafref, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sca/v0.1.x/:city-id/district", wrapper.GetDistrictList, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/sca/v0.1.x/:city-id/district/:district-id", wrapper.DeleteDistrict, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sca/v0.1.x/:city-id/district/:district-id", wrapper.GetDistrict, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/sca/v0.1.x/:city-id/district/:district-id", wrapper.PostDistrict, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/sca/v0.1.x/:city-id/district/:district-id/location", wrapper.DeleteDistrictLocation, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sca/v0.1.x/:city-id/district/:district-id/location", wrapper.GetDistrictLocation, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/sca/v0.1.x/:city-id/district/:district-id/location", wrapper.PostDistrictLocation, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sca/v0.1.x/:city-id/district/:district-id/source", wrapper.GetDistrictSourceList, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/sca/v0.1.x/:city-id/district/:district-id/source/:source-id", wrapper.DeleteDistrictSource, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sca/v0.1.x/:city-id/district/:district-id/source/:source-id", wrapper.GetDistrictSource, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/sca/v0.1.x/:city-id/district/:district-id/source/:source-id", wrapper.PostDistrictSource, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/sca/v0.1.x/:city-id/district/:district-id/source/:source-id/location", wrapper.DeleteDistrictSourceLocation, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sca/v0.1.x/:city-id/district/:district-id/source/:source-id/location", wrapper.GetDistrictSourceLocation, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/sca/v0.1.x/:city-id/district/:district-id/source/:source-id/location", wrapper.PostDistrictSourceLocation, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sca/v0.1.x/:city-id/district/:district-id/source/:source-id/state", wrapper.GetDistrictSourceState, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/sca/v0.1.x/:city-id/district/:district-id/source/:source-id/video", wrapper.DeleteDistrictSourceVideo, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sca/v0.1.x/:city-id/district/:district-id/source/:source-id/video", wrapper.GetDistrictSourceVideo, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/sca/v0.1.x/:city-id/district/:district-id/source/:source-id/video", wrapper.PostDistrictSourceVideo, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/sca/v0.1.x/:city-id/traffic-classification", wrapper.DeleteTrafficClassification, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sca/v0.1.x/:city-id/traffic-classification", wrapper.GetTrafficClassification, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/sca/v0.1.x/:city-id/traffic-classification", wrapper.PostTrafficClassification, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/sca/v0.1.x/:city-id/traffic-classification/classification-application", wrapper.DeleteTrafficClassificationClassificationApplication, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sca/v0.1.x/:city-id/traffic-classification/classification-application", wrapper.GetTrafficClassificationClassificationApplication, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/sca/v0.1.x/:city-id/traffic-classification/classification-application", wrapper.PostTrafficClassificationClassificationApplication, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sca/v0.1.x/:city-id/traffic-classification/classification-application/model-state", wrapper.GetTrafficClassificationClassificationApplicationModelState, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sca/v0.1.x/:city-id/traffic-classification/default/values", wrapper.GetTrafficClassificationDefaultValuesLeafref, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/sca/v0.1.x/:city-id/traffic-classification/detection-application", wrapper.DeleteTrafficClassificationDetectionApplication, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sca/v0.1.x/:city-id/traffic-classification/detection-application", wrapper.GetTrafficClassificationDetectionApplication, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/sca/v0.1.x/:city-id/traffic-classification/detection-application", wrapper.PostTrafficClassificationDetectionApplication, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sca/v0.1.x/:city-id/traffic-classification/detection-application/model-state", wrapper.GetTrafficClassificationDetectionApplicationModelState, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sca/v0.1.x/:city-id/traffic-classification/district", wrapper.GetTrafficClassificationDistrictList, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/sca/v0.1.x/:city-id/traffic-classification/district/:district-ref", wrapper.DeleteTrafficClassificationDistrict, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sca/v0.1.x/:city-id/traffic-classification/district/:district-ref", wrapper.GetTrafficClassificationDistrict, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/sca/v0.1.x/:city-id/traffic-classification/district/:district-ref", wrapper.PostTrafficClassificationDistrict, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sca/v0.1.x/:city-id/traffic-classification/district/:district-ref/district-ref/values", wrapper.GetTrafficClassificationDistrictDistrictRefValuesLeafref, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/sca/v0.1.x/:city-id/traffic-monitoring", wrapper.DeleteTrafficMonitoring, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sca/v0.1.x/:city-id/traffic-monitoring", wrapper.GetTrafficMonitoring, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/sca/v0.1.x/:city-id/traffic-monitoring", wrapper.PostTrafficMonitoring, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sca/v0.1.x/:city-id/traffic-monitoring/default/values", wrapper.GetTrafficMonitoringDefaultValuesLeafref, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sca/v0.1.x/:city-id/traffic-monitoring/district", wrapper.GetTrafficMonitoringDistrictList, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/sca/v0.1.x/:city-id/traffic-monitoring/district/:district-ref", wrapper.DeleteTrafficMonitoringDistrict, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sca/v0.1.x/:city-id/traffic-monitoring/district/:district-ref", wrapper.GetTrafficMonitoringDistrict, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/sca/v0.1.x/:city-id/traffic-monitoring/district/:district-ref", wrapper.PostTrafficMonitoringDistrict, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sca/v0.1.x/:city-id/traffic-monitoring/district/:district-ref/district-ref/values", wrapper.GetTrafficMonitoringDistrictDistrictRefValuesLeafref, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/sca/v0.1.x/:city-id/traffic-monitoring/person-vehicle-bike-detection-application", wrapper.DeleteTrafficMonitoringPersonVehicleBikeDetectionApplication, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sca/v0.1.x/:city-id/traffic-monitoring/person-vehicle-bike-detection-application", wrapper.GetTrafficMonitoringPersonVehicleBikeDetectionApplication, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/sca/v0.1.x/:city-id/traffic-monitoring/person-vehicle-bike-detection-application", wrapper.PostTrafficMonitoringPersonVehicleBikeDetectionApplication, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sca/v0.1.x/:city-id/traffic-monitoring/person-vehicle-bike-detection-application/model-state", wrapper.GetTrafficMonitoringPersonVehicleBikeDetectionApplicationModelState, openapi3mw.ValidateOpenapi3(openApiDefinition))

	router.GET("/openapi.yaml", wrapper.GetSpec)
	router.GET("/targets", wrapper.GetTargets)
	router.PATCH("/roc-api", wrapper.PatchRocAPI)
	return nil
}
