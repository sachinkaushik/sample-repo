// Package sca_0_1_x provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-app.roc.rocaas-tools/rocaas-cli version (devel) DO NOT EDIT.
package sca_0_1_x

import (
	"fmt"
	"reflect"

	externalRef0 "github.com/intel-innersource/frameworks.edge.one-intel-edge.springboard.reference-implementation.roc-models/models/sca-0.1.x/api"
	"github.com/onosproject/aether-roc-api/pkg/utils"
)

// SPDX-FileCopyrightText: 2022-present Intel Corporation
//
// SPDX-License-Identifier: LicenseRef-Intel

// Not generating constants
// SPDX-FileCopyrightText: 2022-present Intel Corporation
//
// SPDX-License-Identifier: LicenseRef-Intel

// Not generating constants
// SPDX-FileCopyrightText: 2022-present Intel Corporation
//
// SPDX-License-Identifier: LicenseRef-Intel

// ModelPluginDevice - a wrapper for the model plugin
type ModelPluginDevice struct {
	device externalRef0.Device
}

// ToAdditionalPropertiesUnchTarget converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToAdditionalPropertiesUnchTarget(params ...string) (*AdditionalPropertiesUnchTarget, error) {
	resource := new(AdditionalPropertiesUnchTarget)

	reflectAdditionalPropertiesUnchTarget, err := utils.FindModelPluginObject(d.device, "AdditionalPropertiesUnchTarget", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToAdditionalPropertiesUnchTarget(reflectAdditionalPropertiesUnchTarget, params...)
	return resource, err

}

// ToAdditionalPropertiesUnchTarget converts gNMI to OAPI relative to a node in the tree.
func ToAdditionalPropertiesUnchTarget(ygotObjValue *reflect.Value, params ...string) (*AdditionalPropertiesUnchTarget, error) {
	resource := new(AdditionalPropertiesUnchTarget)

	// Property: city-id string
	//encoding gNMI attribute to OAPI
	reflectCityId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "CityId")
	if err != nil {
		return nil, err
	}
	if reflectCityId != nil && isNotNil(reflectCityId.Interface()) {
		attrCityId := fmt.Sprintf("%v", reflectCityId.Interface())
		resource.CityId = &attrCityId
	}

	// Property: unchanged string
	//encoding gNMI attribute to OAPI
	reflectUnchanged, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Unchanged")
	if err != nil {
		return nil, err
	}
	if reflectUnchanged != nil && isNotNil(reflectUnchanged.Interface()) {
		attrUnchanged := fmt.Sprintf("%v", reflectUnchanged.Interface())
		resource.Unchanged = &attrUnchanged
	}

	return resource, nil
}

// ToAdditionalPropertyCityId converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToAdditionalPropertyCityId(params ...string) (*AdditionalPropertyCityId, error) {
	resource := new(AdditionalPropertyCityId)

	reflectAdditionalPropertyCityId, err := utils.FindModelPluginObject(d.device, "AdditionalPropertyCityId", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToAdditionalPropertyCityId(reflectAdditionalPropertyCityId, params...)
	return resource, err

}

// ToAdditionalPropertyCityId converts gNMI to OAPI relative to a node in the tree.
func ToAdditionalPropertyCityId(ygotObjValue *reflect.Value, params ...string) (*AdditionalPropertyCityId, error) {
	resource := new(AdditionalPropertyCityId)

	// Property: city-id string
	//encoding gNMI attribute to OAPI
	reflectCityId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "CityId")
	if err != nil {
		return nil, err
	}
	if reflectCityId != nil && isNotNil(reflectCityId.Interface()) {
		attrCityId := fmt.Sprintf("%v", reflectCityId.Interface())
		resource.CityId = &attrCityId
	}

	return resource, nil
}

// ToAdditionalPropertyUnchanged converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToAdditionalPropertyUnchanged(params ...string) (*AdditionalPropertyUnchanged, error) {
	resource := new(AdditionalPropertyUnchanged)

	reflectAdditionalPropertyUnchanged, err := utils.FindModelPluginObject(d.device, "AdditionalPropertyUnchanged", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToAdditionalPropertyUnchanged(reflectAdditionalPropertyUnchanged, params...)
	return resource, err

}

// ToAdditionalPropertyUnchanged converts gNMI to OAPI relative to a node in the tree.
func ToAdditionalPropertyUnchanged(ygotObjValue *reflect.Value, params ...string) (*AdditionalPropertyUnchanged, error) {
	resource := new(AdditionalPropertyUnchanged)

	// Property: unchanged string
	//encoding gNMI attribute to OAPI
	reflectUnchanged, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Unchanged")
	if err != nil {
		return nil, err
	}
	if reflectUnchanged != nil && isNotNil(reflectUnchanged.Interface()) {
		attrUnchanged := fmt.Sprintf("%v", reflectUnchanged.Interface())
		resource.Unchanged = &attrUnchanged
	}

	return resource, nil
}

// ToCollisionDetection converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToCollisionDetection(params ...string) (*CollisionDetection, error) {
	resource := new(CollisionDetection)

	reflectCollisionDetection, err := utils.FindModelPluginObject(d.device, "CollisionDetection", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToCollisionDetection(reflectCollisionDetection, params...)
	return resource, err

}

// ToCollisionDetection converts gNMI to OAPI relative to a node in the tree.
func ToCollisionDetection(ygotObjValue *reflect.Value, params ...string) (*CollisionDetection, error) {
	resource := new(CollisionDetection)

	// Property: default string
	//encoding gNMI attribute to OAPI
	reflectDefault, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Default")
	if err != nil {
		return nil, err
	}
	if reflectDefault != nil && isNotNil(reflectDefault.Interface()) {
		attrDefault := fmt.Sprintf("%v", reflectDefault.Interface())
		resource.Default = &attrDefault
	}

	// Property: detection-application CollisionDetectionDetectionApplication
	// Handle object
	reflectDetectionApplication, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DetectionApplication")
	if err != nil {
		return nil, err
	}
	if reflectDetectionApplication != nil && isNotNil(reflectDetectionApplication.Interface()) {
		attrDetectionApplication, err := ToCollisionDetectionDetectionApplication(reflectDetectionApplication, params...)
		if err != nil {
			return nil, err
		}
		resource.DetectionApplication = attrDetectionApplication
	}

	// Property: district CollisionDetectionDistrictList
	// Handle object
	reflectDistrict, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "District")
	if err != nil {
		return nil, err
	}
	if reflectDistrict != nil && isNotNil(reflectDistrict.Interface()) {
		attrDistrict, err := ToCollisionDetectionDistrictList(reflectDistrict, params...)
		if err != nil {
			return nil, err
		}
		resource.District = attrDistrict
	}

	// Property: enable bool
	//encoding gNMI attribute to OAPI
	reflectEnable, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Enable")
	if err != nil {
		return nil, err
	}
	if reflectEnable != nil && isNotNil(reflectEnable.Interface()) {
		boolEnable := reflectEnable.Interface().(bool)
		resource.Enable = boolEnable
	} else {
		resource.Enable = false
	}

	return resource, nil
}

// ToCollisionDetectionDetectionApplication converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToCollisionDetectionDetectionApplication(params ...string) (*CollisionDetectionDetectionApplication, error) {
	resource := new(CollisionDetectionDetectionApplication)

	reflectCollisionDetectionDetectionApplication, err := utils.FindModelPluginObject(d.device, "CollisionDetectionDetectionApplication", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToCollisionDetectionDetectionApplication(reflectCollisionDetectionDetectionApplication, params...)
	return resource, err

}

// ToCollisionDetectionDetectionApplication converts gNMI to OAPI relative to a node in the tree.
func ToCollisionDetectionDetectionApplication(ygotObjValue *reflect.Value, params ...string) (*CollisionDetectionDetectionApplication, error) {
	resource := new(CollisionDetectionDetectionApplication)

	// Property: device string
	// Enums handling
	reflectDevice, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Device")
	if err != nil {
		return nil, err
	}
	attrDevice := reflectDevice.Interface()
	_, yangDefDevice, err := utils.ExtractGnmiEnumMap(ygotObjValue, "CollisionDetectionDetectionApplicationDevice", attrDevice)
	if err != nil {
		return nil, err
	}
	if yangDefDevice != nil {
		resource.Device = (CollisionDetectionDetectionApplicationDevice)(yangDefDevice.Name)
	}

	// Property: model string
	//encoding gNMI attribute to OAPI
	reflectModel, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Model")
	if err != nil {
		return nil, err
	}
	if reflectModel != nil && isNotNil(reflectModel.Interface()) {
		attrModel := fmt.Sprintf("%v", reflectModel.Interface())
		resource.Model = &attrModel
	}

	// Property: model-state CollisionDetectionDetectionApplicationModelState
	// Handle object
	reflectModelState, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "ModelState")
	if err != nil {
		return nil, err
	}
	if reflectModelState != nil && isNotNil(reflectModelState.Interface()) {
		attrModelState, err := ToCollisionDetectionDetectionApplicationModelState(reflectModelState, params...)
		if err != nil {
			return nil, err
		}
		resource.ModelState = attrModelState
	}

	// Property: precision string
	// Enums handling
	reflectPrecision, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Precision")
	if err != nil {
		return nil, err
	}
	attrPrecision := reflectPrecision.Interface()
	_, yangDefPrecision, err := utils.ExtractGnmiEnumMap(ygotObjValue, "CollisionDetectionDetectionApplicationPrecision", attrPrecision)
	if err != nil {
		return nil, err
	}
	if yangDefPrecision != nil {
		resource.Precision = (CollisionDetectionDetectionApplicationPrecision)(yangDefPrecision.Name)
	}

	return resource, nil
}

// ToCollisionDetectionDetectionApplicationDevice converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToCollisionDetectionDetectionApplicationDevice(params ...string) (*CollisionDetectionDetectionApplicationDevice, error) {
	resource := new(CollisionDetectionDetectionApplicationDevice)

	reflectCollisionDetectionDetectionApplicationDevice, err := utils.FindModelPluginObject(d.device, "CollisionDetectionDetectionApplicationDevice", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToCollisionDetectionDetectionApplicationDevice(reflectCollisionDetectionDetectionApplicationDevice, params...)
	return resource, err

}

// ToCollisionDetectionDetectionApplicationDevice converts gNMI to OAPI relative to a node in the tree.
func ToCollisionDetectionDetectionApplicationDevice(ygotObjValue *reflect.Value, params ...string) (*CollisionDetectionDetectionApplicationDevice, error) {
	resource := new(CollisionDetectionDetectionApplicationDevice)

	return resource, nil
}

// ToCollisionDetectionDetectionApplicationPrecision converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToCollisionDetectionDetectionApplicationPrecision(params ...string) (*CollisionDetectionDetectionApplicationPrecision, error) {
	resource := new(CollisionDetectionDetectionApplicationPrecision)

	reflectCollisionDetectionDetectionApplicationPrecision, err := utils.FindModelPluginObject(d.device, "CollisionDetectionDetectionApplicationPrecision", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToCollisionDetectionDetectionApplicationPrecision(reflectCollisionDetectionDetectionApplicationPrecision, params...)
	return resource, err

}

// ToCollisionDetectionDetectionApplicationPrecision converts gNMI to OAPI relative to a node in the tree.
func ToCollisionDetectionDetectionApplicationPrecision(ygotObjValue *reflect.Value, params ...string) (*CollisionDetectionDetectionApplicationPrecision, error) {
	resource := new(CollisionDetectionDetectionApplicationPrecision)

	return resource, nil
}

// ToCollisionDetectionDetectionApplicationModelState converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToCollisionDetectionDetectionApplicationModelState(params ...string) (*CollisionDetectionDetectionApplicationModelState, error) {
	resource := new(CollisionDetectionDetectionApplicationModelState)

	reflectCollisionDetectionDetectionApplicationModelState, err := utils.FindModelPluginObject(d.device, "CollisionDetectionDetectionApplicationModelState", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToCollisionDetectionDetectionApplicationModelState(reflectCollisionDetectionDetectionApplicationModelState, params...)
	return resource, err

}

// ToCollisionDetectionDetectionApplicationModelState converts gNMI to OAPI relative to a node in the tree.
func ToCollisionDetectionDetectionApplicationModelState(ygotObjValue *reflect.Value, params ...string) (*CollisionDetectionDetectionApplicationModelState, error) {
	resource := new(CollisionDetectionDetectionApplicationModelState)

	// Property: active-model-file string
	//encoding gNMI attribute to OAPI
	reflectActiveModelFile, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "ActiveModelFile")
	if err != nil {
		return nil, err
	}
	if reflectActiveModelFile != nil && isNotNil(reflectActiveModelFile.Interface()) {
		attrActiveModelFile := fmt.Sprintf("%v", reflectActiveModelFile.Interface())
		resource.ActiveModelFile = &attrActiveModelFile
	}

	// Property: active-model-name string
	//encoding gNMI attribute to OAPI
	reflectActiveModelName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "ActiveModelName")
	if err != nil {
		return nil, err
	}
	if reflectActiveModelName != nil && isNotNil(reflectActiveModelName.Interface()) {
		attrActiveModelName := fmt.Sprintf("%v", reflectActiveModelName.Interface())
		resource.ActiveModelName = &attrActiveModelName
	}

	return resource, nil
}

// ToCollisionDetectionDistrict converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToCollisionDetectionDistrict(params ...string) (*CollisionDetectionDistrict, error) {
	resource := new(CollisionDetectionDistrict)

	reflectCollisionDetectionDistrict, err := utils.FindModelPluginObject(d.device, "CollisionDetectionDistrict", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToCollisionDetectionDistrict(reflectCollisionDetectionDistrict, params...)
	return resource, err

}

// ToCollisionDetectionDistrict converts gNMI to OAPI relative to a node in the tree.
func ToCollisionDetectionDistrict(ygotObjValue *reflect.Value, params ...string) (*CollisionDetectionDistrict, error) {
	resource := new(CollisionDetectionDistrict)

	// Property: district-ref ListKey
	//encoding gNMI attribute to OAPI
	reflectDistrictRef, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DistrictRef")
	if err != nil {
		return nil, err
	}
	if reflectDistrictRef != nil && isNotNil(reflectDistrictRef.Interface()) {
		attrDistrictRef := ListKey(reflectDistrictRef.Interface().(string))
		resource.DistrictRef = attrDistrictRef
	} else {
		resource.DistrictRef = ListKey("")
	}

	// Property: enabled bool
	//encoding gNMI attribute to OAPI
	reflectEnabled, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Enabled")
	if err != nil {
		return nil, err
	}
	if reflectEnabled != nil && isNotNil(reflectEnabled.Interface()) {
		boolEnabled := reflectEnabled.Interface().(bool)
		resource.Enabled = boolEnabled
	} else {
		resource.Enabled = false
	}

	// Property: stream-count int
	//encoding gNMI attribute to OAPI
	reflectStreamCount, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "StreamCount")
	if err != nil {
		return nil, err
	}
	if reflectStreamCount != nil && isNotNil(reflectStreamCount.Interface()) {
		//OpenAPI does not have unsigned numbers.
		if resource.StreamCount, err = utils.ToIntPtr(reflectStreamCount); err != nil {
			return nil, err
		}
	}

	return resource, nil
}

// ToCollisionDetectionDistrictList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToCollisionDetectionDistrictList(params ...string) (*CollisionDetectionDistrictList, error) {
	resource := new(CollisionDetectionDistrictList)

	// Array list - Go type CollisionDetectionDistrict
	mpObject, err := utils.FindModelPluginObject(d.device, "CollisionDetectionDistrict", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToCollisionDetectionDistrict(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// ToCollisionDetectionDistrictList converts gNMI to OAPI relative to a node in the tree.
func ToCollisionDetectionDistrictList(ygotObjValue *reflect.Value, params ...string) (*CollisionDetectionDistrictList, error) {
	resource := new(CollisionDetectionDistrictList)

	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToCollisionDetectionDistrict(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil
}

// ToDistrict converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToDistrict(params ...string) (*District, error) {
	resource := new(District)

	reflectDistrict, err := utils.FindModelPluginObject(d.device, "District", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToDistrict(reflectDistrict, params...)
	return resource, err

}

// ToDistrict converts gNMI to OAPI relative to a node in the tree.
func ToDistrict(ygotObjValue *reflect.Value, params ...string) (*District, error) {
	resource := new(District)

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil && isNotNil(reflectDescription.Interface()) {
		attrDescription := fmt.Sprintf("%v", reflectDescription.Interface())
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil && isNotNil(reflectDisplayName.Interface()) {
		attrDisplayName := fmt.Sprintf("%v", reflectDisplayName.Interface())
		resource.DisplayName = &attrDisplayName
	}

	// Property: district-id ListKey
	//encoding gNMI attribute to OAPI
	reflectDistrictId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DistrictId")
	if err != nil {
		return nil, err
	}
	if reflectDistrictId != nil && isNotNil(reflectDistrictId.Interface()) {
		attrDistrictId := ListKey(reflectDistrictId.Interface().(string))
		resource.DistrictId = attrDistrictId
	} else {
		resource.DistrictId = ListKey("")
	}

	// Property: image string
	//encoding gNMI attribute to OAPI
	reflectImage, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Image")
	if err != nil {
		return nil, err
	}
	if reflectImage != nil && isNotNil(reflectImage.Interface()) {
		attrImage := fmt.Sprintf("%v", reflectImage.Interface())
		resource.Image = &attrImage
	}

	// Property: location DistrictLocation
	// Handle object
	reflectLocation, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Location")
	if err != nil {
		return nil, err
	}
	if reflectLocation != nil && isNotNil(reflectLocation.Interface()) {
		attrLocation, err := ToDistrictLocation(reflectLocation, params...)
		if err != nil {
			return nil, err
		}
		resource.Location = attrLocation
	}

	// Property: source DistrictSourceList
	// Handle object
	reflectSource, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Source")
	if err != nil {
		return nil, err
	}
	if reflectSource != nil && isNotNil(reflectSource.Interface()) {
		attrSource, err := ToDistrictSourceList(reflectSource, params...)
		if err != nil {
			return nil, err
		}
		resource.Source = attrSource
	}

	return resource, nil
}

// ToDistrictList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToDistrictList(params ...string) (*DistrictList, error) {
	resource := new(DistrictList)

	// Array list - Go type District
	mpObject, err := utils.FindModelPluginObject(d.device, "District", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToDistrict(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// ToDistrictList converts gNMI to OAPI relative to a node in the tree.
func ToDistrictList(ygotObjValue *reflect.Value, params ...string) (*DistrictList, error) {
	resource := new(DistrictList)

	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToDistrict(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil
}

// ToDistrictLocation converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToDistrictLocation(params ...string) (*DistrictLocation, error) {
	resource := new(DistrictLocation)

	reflectDistrictLocation, err := utils.FindModelPluginObject(d.device, "DistrictLocation", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToDistrictLocation(reflectDistrictLocation, params...)
	return resource, err

}

// ToDistrictLocation converts gNMI to OAPI relative to a node in the tree.
func ToDistrictLocation(ygotObjValue *reflect.Value, params ...string) (*DistrictLocation, error) {
	resource := new(DistrictLocation)

	// Property: coordinate-system string
	// Enums handling
	reflectCoordinateSystem, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "CoordinateSystem")
	if err != nil {
		return nil, err
	}
	attrCoordinateSystem := reflectCoordinateSystem.Interface()
	_, yangDefCoordinateSystem, err := utils.ExtractGnmiEnumMap(ygotObjValue, "DistrictLocationCoordinateSystem", attrCoordinateSystem)
	if err != nil {
		return nil, err
	}
	if yangDefCoordinateSystem != nil {
		resource.CoordinateSystem = (DistrictLocationCoordinateSystem)(yangDefCoordinateSystem.Name)
	}

	// Property: orientation-x int64
	//encoding gNMI attribute to OAPI
	reflectOrientationX, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "OrientationX")
	if err != nil {
		return nil, err
	}
	if reflectOrientationX != nil && isNotNil(reflectOrientationX.Interface()) {
		//OpenAPI does not have unsigned numbers.
		if resource.OrientationX, err = utils.ToInt64Ptr(reflectOrientationX); err != nil {
			return nil, err
		}
	}

	// Property: x int64
	//encoding gNMI attribute to OAPI
	reflectX, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "X")
	if err != nil {
		return nil, err
	}
	if reflectX != nil && isNotNil(reflectX.Interface()) {
		//OpenAPI does not have unsigned numbers.
		if resource.X, err = utils.ToInt64(reflectX); err != nil {
			return nil, err
		}
	}

	// Property: y int64
	//encoding gNMI attribute to OAPI
	reflectY, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Y")
	if err != nil {
		return nil, err
	}
	if reflectY != nil && isNotNil(reflectY.Interface()) {
		//OpenAPI does not have unsigned numbers.
		if resource.Y, err = utils.ToInt64(reflectY); err != nil {
			return nil, err
		}
	}

	// Property: z int64
	//encoding gNMI attribute to OAPI
	reflectZ, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Z")
	if err != nil {
		return nil, err
	}
	if reflectZ != nil && isNotNil(reflectZ.Interface()) {
		//OpenAPI does not have unsigned numbers.
		if resource.Z, err = utils.ToInt64Ptr(reflectZ); err != nil {
			return nil, err
		}
	}

	return resource, nil
}

// ToDistrictLocationCoordinateSystem converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToDistrictLocationCoordinateSystem(params ...string) (*DistrictLocationCoordinateSystem, error) {
	resource := new(DistrictLocationCoordinateSystem)

	reflectDistrictLocationCoordinateSystem, err := utils.FindModelPluginObject(d.device, "DistrictLocationCoordinateSystem", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToDistrictLocationCoordinateSystem(reflectDistrictLocationCoordinateSystem, params...)
	return resource, err

}

// ToDistrictLocationCoordinateSystem converts gNMI to OAPI relative to a node in the tree.
func ToDistrictLocationCoordinateSystem(ygotObjValue *reflect.Value, params ...string) (*DistrictLocationCoordinateSystem, error) {
	resource := new(DistrictLocationCoordinateSystem)

	return resource, nil
}

// ToDistrictSource converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToDistrictSource(params ...string) (*DistrictSource, error) {
	resource := new(DistrictSource)

	reflectDistrictSource, err := utils.FindModelPluginObject(d.device, "DistrictSource", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToDistrictSource(reflectDistrictSource, params...)
	return resource, err

}

// ToDistrictSource converts gNMI to OAPI relative to a node in the tree.
func ToDistrictSource(ygotObjValue *reflect.Value, params ...string) (*DistrictSource, error) {
	resource := new(DistrictSource)

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil && isNotNil(reflectDescription.Interface()) {
		attrDescription := fmt.Sprintf("%v", reflectDescription.Interface())
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil && isNotNil(reflectDisplayName.Interface()) {
		attrDisplayName := fmt.Sprintf("%v", reflectDisplayName.Interface())
		resource.DisplayName = &attrDisplayName
	}

	// Property: image string
	//encoding gNMI attribute to OAPI
	reflectImage, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Image")
	if err != nil {
		return nil, err
	}
	if reflectImage != nil && isNotNil(reflectImage.Interface()) {
		attrImage := fmt.Sprintf("%v", reflectImage.Interface())
		resource.Image = &attrImage
	}

	// Property: location DistrictSourceLocation
	// Handle object
	reflectLocation, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Location")
	if err != nil {
		return nil, err
	}
	if reflectLocation != nil && isNotNil(reflectLocation.Interface()) {
		attrLocation, err := ToDistrictSourceLocation(reflectLocation, params...)
		if err != nil {
			return nil, err
		}
		resource.Location = attrLocation
	}

	// Property: source-id ListKey
	//encoding gNMI attribute to OAPI
	reflectSourceId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "SourceId")
	if err != nil {
		return nil, err
	}
	if reflectSourceId != nil && isNotNil(reflectSourceId.Interface()) {
		attrSourceId := ListKey(reflectSourceId.Interface().(string))
		resource.SourceId = attrSourceId
	} else {
		resource.SourceId = ListKey("")
	}

	// Property: state DistrictSourceState
	// Handle object
	reflectState, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "State")
	if err != nil {
		return nil, err
	}
	if reflectState != nil && isNotNil(reflectState.Interface()) {
		attrState, err := ToDistrictSourceState(reflectState, params...)
		if err != nil {
			return nil, err
		}
		resource.State = attrState
	}

	// Property: video DistrictSourceVideo
	// Handle object
	reflectVideo, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Video")
	if err != nil {
		return nil, err
	}
	if reflectVideo != nil && isNotNil(reflectVideo.Interface()) {
		attrVideo, err := ToDistrictSourceVideo(reflectVideo, params...)
		if err != nil {
			return nil, err
		}
		resource.Video = attrVideo
	}

	return resource, nil
}

// ToDistrictSourceList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToDistrictSourceList(params ...string) (*DistrictSourceList, error) {
	resource := new(DistrictSourceList)

	// Array list - Go type DistrictSource
	mpObject, err := utils.FindModelPluginObject(d.device, "DistrictSource", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToDistrictSource(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// ToDistrictSourceList converts gNMI to OAPI relative to a node in the tree.
func ToDistrictSourceList(ygotObjValue *reflect.Value, params ...string) (*DistrictSourceList, error) {
	resource := new(DistrictSourceList)

	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToDistrictSource(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil
}

// ToDistrictSourceLocation converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToDistrictSourceLocation(params ...string) (*DistrictSourceLocation, error) {
	resource := new(DistrictSourceLocation)

	reflectDistrictSourceLocation, err := utils.FindModelPluginObject(d.device, "DistrictSourceLocation", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToDistrictSourceLocation(reflectDistrictSourceLocation, params...)
	return resource, err

}

// ToDistrictSourceLocation converts gNMI to OAPI relative to a node in the tree.
func ToDistrictSourceLocation(ygotObjValue *reflect.Value, params ...string) (*DistrictSourceLocation, error) {
	resource := new(DistrictSourceLocation)

	// Property: coordinate-system string
	// Enums handling
	reflectCoordinateSystem, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "CoordinateSystem")
	if err != nil {
		return nil, err
	}
	attrCoordinateSystem := reflectCoordinateSystem.Interface()
	_, yangDefCoordinateSystem, err := utils.ExtractGnmiEnumMap(ygotObjValue, "DistrictSourceLocationCoordinateSystem", attrCoordinateSystem)
	if err != nil {
		return nil, err
	}
	if yangDefCoordinateSystem != nil {
		resource.CoordinateSystem = (DistrictSourceLocationCoordinateSystem)(yangDefCoordinateSystem.Name)
	}

	// Property: orientation-x int64
	//encoding gNMI attribute to OAPI
	reflectOrientationX, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "OrientationX")
	if err != nil {
		return nil, err
	}
	if reflectOrientationX != nil && isNotNil(reflectOrientationX.Interface()) {
		//OpenAPI does not have unsigned numbers.
		if resource.OrientationX, err = utils.ToInt64Ptr(reflectOrientationX); err != nil {
			return nil, err
		}
	}

	// Property: x int64
	//encoding gNMI attribute to OAPI
	reflectX, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "X")
	if err != nil {
		return nil, err
	}
	if reflectX != nil && isNotNil(reflectX.Interface()) {
		//OpenAPI does not have unsigned numbers.
		if resource.X, err = utils.ToInt64(reflectX); err != nil {
			return nil, err
		}
	}

	// Property: y int64
	//encoding gNMI attribute to OAPI
	reflectY, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Y")
	if err != nil {
		return nil, err
	}
	if reflectY != nil && isNotNil(reflectY.Interface()) {
		//OpenAPI does not have unsigned numbers.
		if resource.Y, err = utils.ToInt64(reflectY); err != nil {
			return nil, err
		}
	}

	// Property: z int64
	//encoding gNMI attribute to OAPI
	reflectZ, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Z")
	if err != nil {
		return nil, err
	}
	if reflectZ != nil && isNotNil(reflectZ.Interface()) {
		//OpenAPI does not have unsigned numbers.
		if resource.Z, err = utils.ToInt64Ptr(reflectZ); err != nil {
			return nil, err
		}
	}

	return resource, nil
}

// ToDistrictSourceLocationCoordinateSystem converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToDistrictSourceLocationCoordinateSystem(params ...string) (*DistrictSourceLocationCoordinateSystem, error) {
	resource := new(DistrictSourceLocationCoordinateSystem)

	reflectDistrictSourceLocationCoordinateSystem, err := utils.FindModelPluginObject(d.device, "DistrictSourceLocationCoordinateSystem", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToDistrictSourceLocationCoordinateSystem(reflectDistrictSourceLocationCoordinateSystem, params...)
	return resource, err

}

// ToDistrictSourceLocationCoordinateSystem converts gNMI to OAPI relative to a node in the tree.
func ToDistrictSourceLocationCoordinateSystem(ygotObjValue *reflect.Value, params ...string) (*DistrictSourceLocationCoordinateSystem, error) {
	resource := new(DistrictSourceLocationCoordinateSystem)

	return resource, nil
}

// ToDistrictSourceState converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToDistrictSourceState(params ...string) (*DistrictSourceState, error) {
	resource := new(DistrictSourceState)

	reflectDistrictSourceState, err := utils.FindModelPluginObject(d.device, "DistrictSourceState", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToDistrictSourceState(reflectDistrictSourceState, params...)
	return resource, err

}

// ToDistrictSourceState converts gNMI to OAPI relative to a node in the tree.
func ToDistrictSourceState(ygotObjValue *reflect.Value, params ...string) (*DistrictSourceState, error) {
	resource := new(DistrictSourceState)

	// Property: error string
	//encoding gNMI attribute to OAPI
	reflectError, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Error")
	if err != nil {
		return nil, err
	}
	if reflectError != nil && isNotNil(reflectError.Interface()) {
		attrError := fmt.Sprintf("%v", reflectError.Interface())
		resource.Error = &attrError
	}

	// Property: error-since string
	//encoding gNMI attribute to OAPI
	reflectErrorSince, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "ErrorSince")
	if err != nil {
		return nil, err
	}
	if reflectErrorSince != nil && isNotNil(reflectErrorSince.Interface()) {
		attrErrorSince := fmt.Sprintf("%v", reflectErrorSince.Interface())
		resource.ErrorSince = &attrErrorSince
	}

	// Property: status string
	//encoding gNMI attribute to OAPI
	reflectStatus, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Status")
	if err != nil {
		return nil, err
	}
	if reflectStatus != nil && isNotNil(reflectStatus.Interface()) {
		attrStatus := fmt.Sprintf("%v", reflectStatus.Interface())
		resource.Status = &attrStatus
	}

	return resource, nil
}

// ToDistrictSourceVideo converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToDistrictSourceVideo(params ...string) (*DistrictSourceVideo, error) {
	resource := new(DistrictSourceVideo)

	reflectDistrictSourceVideo, err := utils.FindModelPluginObject(d.device, "DistrictSourceVideo", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToDistrictSourceVideo(reflectDistrictSourceVideo, params...)
	return resource, err

}

// ToDistrictSourceVideo converts gNMI to OAPI relative to a node in the tree.
func ToDistrictSourceVideo(ygotObjValue *reflect.Value, params ...string) (*DistrictSourceVideo, error) {
	resource := new(DistrictSourceVideo)

	// Property: path string
	//encoding gNMI attribute to OAPI
	reflectPath, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Path")
	if err != nil {
		return nil, err
	}
	if reflectPath != nil && isNotNil(reflectPath.Interface()) {
		attrPath := fmt.Sprintf("%v", reflectPath.Interface())
		resource.Path = attrPath
	} else {
		resource.Path = ""
	}

	// Property: source-type string
	// Enums handling
	reflectSourceType, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "SourceType")
	if err != nil {
		return nil, err
	}
	attrSourceType := reflectSourceType.Interface()
	_, yangDefSourceType, err := utils.ExtractGnmiEnumMap(ygotObjValue, "DistrictSourceVideoSourceType", attrSourceType)
	if err != nil {
		return nil, err
	}
	if yangDefSourceType != nil {
		resource.SourceType = (DistrictSourceVideoSourceType)(yangDefSourceType.Name)
	}

	return resource, nil
}

// ToDistrictSourceVideoSourceType converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToDistrictSourceVideoSourceType(params ...string) (*DistrictSourceVideoSourceType, error) {
	resource := new(DistrictSourceVideoSourceType)

	reflectDistrictSourceVideoSourceType, err := utils.FindModelPluginObject(d.device, "DistrictSourceVideoSourceType", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToDistrictSourceVideoSourceType(reflectDistrictSourceVideoSourceType, params...)
	return resource, err

}

// ToDistrictSourceVideoSourceType converts gNMI to OAPI relative to a node in the tree.
func ToDistrictSourceVideoSourceType(ygotObjValue *reflect.Value, params ...string) (*DistrictSourceVideoSourceType, error) {
	resource := new(DistrictSourceVideoSourceType)

	return resource, nil
}

//Ignoring LeafRefOption

//Ignoring LeafRefOptions

// ToTrafficClassification converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToTrafficClassification(params ...string) (*TrafficClassification, error) {
	resource := new(TrafficClassification)

	reflectTrafficClassification, err := utils.FindModelPluginObject(d.device, "TrafficClassification", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToTrafficClassification(reflectTrafficClassification, params...)
	return resource, err

}

// ToTrafficClassification converts gNMI to OAPI relative to a node in the tree.
func ToTrafficClassification(ygotObjValue *reflect.Value, params ...string) (*TrafficClassification, error) {
	resource := new(TrafficClassification)

	// Property: classification-application TrafficClassificationClassificationApplication
	// Handle object
	reflectClassificationApplication, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "ClassificationApplication")
	if err != nil {
		return nil, err
	}
	if reflectClassificationApplication != nil && isNotNil(reflectClassificationApplication.Interface()) {
		attrClassificationApplication, err := ToTrafficClassificationClassificationApplication(reflectClassificationApplication, params...)
		if err != nil {
			return nil, err
		}
		resource.ClassificationApplication = attrClassificationApplication
	}

	// Property: default string
	//encoding gNMI attribute to OAPI
	reflectDefault, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Default")
	if err != nil {
		return nil, err
	}
	if reflectDefault != nil && isNotNil(reflectDefault.Interface()) {
		attrDefault := fmt.Sprintf("%v", reflectDefault.Interface())
		resource.Default = &attrDefault
	}

	// Property: detection-application TrafficClassificationDetectionApplication
	// Handle object
	reflectDetectionApplication, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DetectionApplication")
	if err != nil {
		return nil, err
	}
	if reflectDetectionApplication != nil && isNotNil(reflectDetectionApplication.Interface()) {
		attrDetectionApplication, err := ToTrafficClassificationDetectionApplication(reflectDetectionApplication, params...)
		if err != nil {
			return nil, err
		}
		resource.DetectionApplication = attrDetectionApplication
	}

	// Property: district TrafficClassificationDistrictList
	// Handle object
	reflectDistrict, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "District")
	if err != nil {
		return nil, err
	}
	if reflectDistrict != nil && isNotNil(reflectDistrict.Interface()) {
		attrDistrict, err := ToTrafficClassificationDistrictList(reflectDistrict, params...)
		if err != nil {
			return nil, err
		}
		resource.District = attrDistrict
	}

	// Property: enable bool
	//encoding gNMI attribute to OAPI
	reflectEnable, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Enable")
	if err != nil {
		return nil, err
	}
	if reflectEnable != nil && isNotNil(reflectEnable.Interface()) {
		boolEnable := reflectEnable.Interface().(bool)
		resource.Enable = boolEnable
	} else {
		resource.Enable = false
	}

	return resource, nil
}

// ToTrafficClassificationClassificationApplication converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToTrafficClassificationClassificationApplication(params ...string) (*TrafficClassificationClassificationApplication, error) {
	resource := new(TrafficClassificationClassificationApplication)

	reflectTrafficClassificationClassificationApplication, err := utils.FindModelPluginObject(d.device, "TrafficClassificationClassificationApplication", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToTrafficClassificationClassificationApplication(reflectTrafficClassificationClassificationApplication, params...)
	return resource, err

}

// ToTrafficClassificationClassificationApplication converts gNMI to OAPI relative to a node in the tree.
func ToTrafficClassificationClassificationApplication(ygotObjValue *reflect.Value, params ...string) (*TrafficClassificationClassificationApplication, error) {
	resource := new(TrafficClassificationClassificationApplication)

	// Property: device string
	// Enums handling
	reflectDevice, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Device")
	if err != nil {
		return nil, err
	}
	attrDevice := reflectDevice.Interface()
	_, yangDefDevice, err := utils.ExtractGnmiEnumMap(ygotObjValue, "TrafficClassificationClassificationApplicationDevice", attrDevice)
	if err != nil {
		return nil, err
	}
	if yangDefDevice != nil {
		resource.Device = (TrafficClassificationClassificationApplicationDevice)(yangDefDevice.Name)
	}

	// Property: model string
	//encoding gNMI attribute to OAPI
	reflectModel, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Model")
	if err != nil {
		return nil, err
	}
	if reflectModel != nil && isNotNil(reflectModel.Interface()) {
		attrModel := fmt.Sprintf("%v", reflectModel.Interface())
		resource.Model = &attrModel
	}

	// Property: model-state TrafficClassificationClassificationApplicationModelState
	// Handle object
	reflectModelState, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "ModelState")
	if err != nil {
		return nil, err
	}
	if reflectModelState != nil && isNotNil(reflectModelState.Interface()) {
		attrModelState, err := ToTrafficClassificationClassificationApplicationModelState(reflectModelState, params...)
		if err != nil {
			return nil, err
		}
		resource.ModelState = attrModelState
	}

	// Property: precision string
	// Enums handling
	reflectPrecision, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Precision")
	if err != nil {
		return nil, err
	}
	attrPrecision := reflectPrecision.Interface()
	_, yangDefPrecision, err := utils.ExtractGnmiEnumMap(ygotObjValue, "TrafficClassificationClassificationApplicationPrecision", attrPrecision)
	if err != nil {
		return nil, err
	}
	if yangDefPrecision != nil {
		resource.Precision = (TrafficClassificationClassificationApplicationPrecision)(yangDefPrecision.Name)
	}

	return resource, nil
}

// ToTrafficClassificationClassificationApplicationDevice converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToTrafficClassificationClassificationApplicationDevice(params ...string) (*TrafficClassificationClassificationApplicationDevice, error) {
	resource := new(TrafficClassificationClassificationApplicationDevice)

	reflectTrafficClassificationClassificationApplicationDevice, err := utils.FindModelPluginObject(d.device, "TrafficClassificationClassificationApplicationDevice", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToTrafficClassificationClassificationApplicationDevice(reflectTrafficClassificationClassificationApplicationDevice, params...)
	return resource, err

}

// ToTrafficClassificationClassificationApplicationDevice converts gNMI to OAPI relative to a node in the tree.
func ToTrafficClassificationClassificationApplicationDevice(ygotObjValue *reflect.Value, params ...string) (*TrafficClassificationClassificationApplicationDevice, error) {
	resource := new(TrafficClassificationClassificationApplicationDevice)

	return resource, nil
}

// ToTrafficClassificationClassificationApplicationPrecision converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToTrafficClassificationClassificationApplicationPrecision(params ...string) (*TrafficClassificationClassificationApplicationPrecision, error) {
	resource := new(TrafficClassificationClassificationApplicationPrecision)

	reflectTrafficClassificationClassificationApplicationPrecision, err := utils.FindModelPluginObject(d.device, "TrafficClassificationClassificationApplicationPrecision", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToTrafficClassificationClassificationApplicationPrecision(reflectTrafficClassificationClassificationApplicationPrecision, params...)
	return resource, err

}

// ToTrafficClassificationClassificationApplicationPrecision converts gNMI to OAPI relative to a node in the tree.
func ToTrafficClassificationClassificationApplicationPrecision(ygotObjValue *reflect.Value, params ...string) (*TrafficClassificationClassificationApplicationPrecision, error) {
	resource := new(TrafficClassificationClassificationApplicationPrecision)

	return resource, nil
}

// ToTrafficClassificationClassificationApplicationModelState converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToTrafficClassificationClassificationApplicationModelState(params ...string) (*TrafficClassificationClassificationApplicationModelState, error) {
	resource := new(TrafficClassificationClassificationApplicationModelState)

	reflectTrafficClassificationClassificationApplicationModelState, err := utils.FindModelPluginObject(d.device, "TrafficClassificationClassificationApplicationModelState", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToTrafficClassificationClassificationApplicationModelState(reflectTrafficClassificationClassificationApplicationModelState, params...)
	return resource, err

}

// ToTrafficClassificationClassificationApplicationModelState converts gNMI to OAPI relative to a node in the tree.
func ToTrafficClassificationClassificationApplicationModelState(ygotObjValue *reflect.Value, params ...string) (*TrafficClassificationClassificationApplicationModelState, error) {
	resource := new(TrafficClassificationClassificationApplicationModelState)

	// Property: active-model-file string
	//encoding gNMI attribute to OAPI
	reflectActiveModelFile, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "ActiveModelFile")
	if err != nil {
		return nil, err
	}
	if reflectActiveModelFile != nil && isNotNil(reflectActiveModelFile.Interface()) {
		attrActiveModelFile := fmt.Sprintf("%v", reflectActiveModelFile.Interface())
		resource.ActiveModelFile = &attrActiveModelFile
	}

	// Property: active-model-name string
	//encoding gNMI attribute to OAPI
	reflectActiveModelName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "ActiveModelName")
	if err != nil {
		return nil, err
	}
	if reflectActiveModelName != nil && isNotNil(reflectActiveModelName.Interface()) {
		attrActiveModelName := fmt.Sprintf("%v", reflectActiveModelName.Interface())
		resource.ActiveModelName = &attrActiveModelName
	}

	return resource, nil
}

// ToTrafficClassificationDetectionApplication converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToTrafficClassificationDetectionApplication(params ...string) (*TrafficClassificationDetectionApplication, error) {
	resource := new(TrafficClassificationDetectionApplication)

	reflectTrafficClassificationDetectionApplication, err := utils.FindModelPluginObject(d.device, "TrafficClassificationDetectionApplication", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToTrafficClassificationDetectionApplication(reflectTrafficClassificationDetectionApplication, params...)
	return resource, err

}

// ToTrafficClassificationDetectionApplication converts gNMI to OAPI relative to a node in the tree.
func ToTrafficClassificationDetectionApplication(ygotObjValue *reflect.Value, params ...string) (*TrafficClassificationDetectionApplication, error) {
	resource := new(TrafficClassificationDetectionApplication)

	// Property: device string
	// Enums handling
	reflectDevice, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Device")
	if err != nil {
		return nil, err
	}
	attrDevice := reflectDevice.Interface()
	_, yangDefDevice, err := utils.ExtractGnmiEnumMap(ygotObjValue, "TrafficClassificationDetectionApplicationDevice", attrDevice)
	if err != nil {
		return nil, err
	}
	if yangDefDevice != nil {
		resource.Device = (TrafficClassificationDetectionApplicationDevice)(yangDefDevice.Name)
	}

	// Property: model string
	//encoding gNMI attribute to OAPI
	reflectModel, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Model")
	if err != nil {
		return nil, err
	}
	if reflectModel != nil && isNotNil(reflectModel.Interface()) {
		attrModel := fmt.Sprintf("%v", reflectModel.Interface())
		resource.Model = &attrModel
	}

	// Property: model-state TrafficClassificationDetectionApplicationModelState
	// Handle object
	reflectModelState, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "ModelState")
	if err != nil {
		return nil, err
	}
	if reflectModelState != nil && isNotNil(reflectModelState.Interface()) {
		attrModelState, err := ToTrafficClassificationDetectionApplicationModelState(reflectModelState, params...)
		if err != nil {
			return nil, err
		}
		resource.ModelState = attrModelState
	}

	// Property: precision string
	// Enums handling
	reflectPrecision, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Precision")
	if err != nil {
		return nil, err
	}
	attrPrecision := reflectPrecision.Interface()
	_, yangDefPrecision, err := utils.ExtractGnmiEnumMap(ygotObjValue, "TrafficClassificationDetectionApplicationPrecision", attrPrecision)
	if err != nil {
		return nil, err
	}
	if yangDefPrecision != nil {
		resource.Precision = (TrafficClassificationDetectionApplicationPrecision)(yangDefPrecision.Name)
	}

	return resource, nil
}

// ToTrafficClassificationDetectionApplicationDevice converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToTrafficClassificationDetectionApplicationDevice(params ...string) (*TrafficClassificationDetectionApplicationDevice, error) {
	resource := new(TrafficClassificationDetectionApplicationDevice)

	reflectTrafficClassificationDetectionApplicationDevice, err := utils.FindModelPluginObject(d.device, "TrafficClassificationDetectionApplicationDevice", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToTrafficClassificationDetectionApplicationDevice(reflectTrafficClassificationDetectionApplicationDevice, params...)
	return resource, err

}

// ToTrafficClassificationDetectionApplicationDevice converts gNMI to OAPI relative to a node in the tree.
func ToTrafficClassificationDetectionApplicationDevice(ygotObjValue *reflect.Value, params ...string) (*TrafficClassificationDetectionApplicationDevice, error) {
	resource := new(TrafficClassificationDetectionApplicationDevice)

	return resource, nil
}

// ToTrafficClassificationDetectionApplicationPrecision converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToTrafficClassificationDetectionApplicationPrecision(params ...string) (*TrafficClassificationDetectionApplicationPrecision, error) {
	resource := new(TrafficClassificationDetectionApplicationPrecision)

	reflectTrafficClassificationDetectionApplicationPrecision, err := utils.FindModelPluginObject(d.device, "TrafficClassificationDetectionApplicationPrecision", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToTrafficClassificationDetectionApplicationPrecision(reflectTrafficClassificationDetectionApplicationPrecision, params...)
	return resource, err

}

// ToTrafficClassificationDetectionApplicationPrecision converts gNMI to OAPI relative to a node in the tree.
func ToTrafficClassificationDetectionApplicationPrecision(ygotObjValue *reflect.Value, params ...string) (*TrafficClassificationDetectionApplicationPrecision, error) {
	resource := new(TrafficClassificationDetectionApplicationPrecision)

	return resource, nil
}

// ToTrafficClassificationDetectionApplicationModelState converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToTrafficClassificationDetectionApplicationModelState(params ...string) (*TrafficClassificationDetectionApplicationModelState, error) {
	resource := new(TrafficClassificationDetectionApplicationModelState)

	reflectTrafficClassificationDetectionApplicationModelState, err := utils.FindModelPluginObject(d.device, "TrafficClassificationDetectionApplicationModelState", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToTrafficClassificationDetectionApplicationModelState(reflectTrafficClassificationDetectionApplicationModelState, params...)
	return resource, err

}

// ToTrafficClassificationDetectionApplicationModelState converts gNMI to OAPI relative to a node in the tree.
func ToTrafficClassificationDetectionApplicationModelState(ygotObjValue *reflect.Value, params ...string) (*TrafficClassificationDetectionApplicationModelState, error) {
	resource := new(TrafficClassificationDetectionApplicationModelState)

	// Property: active-model-file string
	//encoding gNMI attribute to OAPI
	reflectActiveModelFile, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "ActiveModelFile")
	if err != nil {
		return nil, err
	}
	if reflectActiveModelFile != nil && isNotNil(reflectActiveModelFile.Interface()) {
		attrActiveModelFile := fmt.Sprintf("%v", reflectActiveModelFile.Interface())
		resource.ActiveModelFile = &attrActiveModelFile
	}

	// Property: active-model-name string
	//encoding gNMI attribute to OAPI
	reflectActiveModelName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "ActiveModelName")
	if err != nil {
		return nil, err
	}
	if reflectActiveModelName != nil && isNotNil(reflectActiveModelName.Interface()) {
		attrActiveModelName := fmt.Sprintf("%v", reflectActiveModelName.Interface())
		resource.ActiveModelName = &attrActiveModelName
	}

	return resource, nil
}

// ToTrafficClassificationDistrict converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToTrafficClassificationDistrict(params ...string) (*TrafficClassificationDistrict, error) {
	resource := new(TrafficClassificationDistrict)

	reflectTrafficClassificationDistrict, err := utils.FindModelPluginObject(d.device, "TrafficClassificationDistrict", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToTrafficClassificationDistrict(reflectTrafficClassificationDistrict, params...)
	return resource, err

}

// ToTrafficClassificationDistrict converts gNMI to OAPI relative to a node in the tree.
func ToTrafficClassificationDistrict(ygotObjValue *reflect.Value, params ...string) (*TrafficClassificationDistrict, error) {
	resource := new(TrafficClassificationDistrict)

	// Property: district-ref ListKey
	//encoding gNMI attribute to OAPI
	reflectDistrictRef, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DistrictRef")
	if err != nil {
		return nil, err
	}
	if reflectDistrictRef != nil && isNotNil(reflectDistrictRef.Interface()) {
		attrDistrictRef := ListKey(reflectDistrictRef.Interface().(string))
		resource.DistrictRef = attrDistrictRef
	} else {
		resource.DistrictRef = ListKey("")
	}

	// Property: enabled bool
	//encoding gNMI attribute to OAPI
	reflectEnabled, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Enabled")
	if err != nil {
		return nil, err
	}
	if reflectEnabled != nil && isNotNil(reflectEnabled.Interface()) {
		boolEnabled := reflectEnabled.Interface().(bool)
		resource.Enabled = boolEnabled
	} else {
		resource.Enabled = false
	}

	// Property: stream-count int
	//encoding gNMI attribute to OAPI
	reflectStreamCount, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "StreamCount")
	if err != nil {
		return nil, err
	}
	if reflectStreamCount != nil && isNotNil(reflectStreamCount.Interface()) {
		//OpenAPI does not have unsigned numbers.
		if resource.StreamCount, err = utils.ToIntPtr(reflectStreamCount); err != nil {
			return nil, err
		}
	}

	return resource, nil
}

// ToTrafficClassificationDistrictList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToTrafficClassificationDistrictList(params ...string) (*TrafficClassificationDistrictList, error) {
	resource := new(TrafficClassificationDistrictList)

	// Array list - Go type TrafficClassificationDistrict
	mpObject, err := utils.FindModelPluginObject(d.device, "TrafficClassificationDistrict", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToTrafficClassificationDistrict(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// ToTrafficClassificationDistrictList converts gNMI to OAPI relative to a node in the tree.
func ToTrafficClassificationDistrictList(ygotObjValue *reflect.Value, params ...string) (*TrafficClassificationDistrictList, error) {
	resource := new(TrafficClassificationDistrictList)

	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToTrafficClassificationDistrict(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil
}

// ToTrafficMonitoring converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToTrafficMonitoring(params ...string) (*TrafficMonitoring, error) {
	resource := new(TrafficMonitoring)

	reflectTrafficMonitoring, err := utils.FindModelPluginObject(d.device, "TrafficMonitoring", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToTrafficMonitoring(reflectTrafficMonitoring, params...)
	return resource, err

}

// ToTrafficMonitoring converts gNMI to OAPI relative to a node in the tree.
func ToTrafficMonitoring(ygotObjValue *reflect.Value, params ...string) (*TrafficMonitoring, error) {
	resource := new(TrafficMonitoring)

	// Property: default string
	//encoding gNMI attribute to OAPI
	reflectDefault, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Default")
	if err != nil {
		return nil, err
	}
	if reflectDefault != nil && isNotNil(reflectDefault.Interface()) {
		attrDefault := fmt.Sprintf("%v", reflectDefault.Interface())
		resource.Default = &attrDefault
	}

	// Property: district TrafficMonitoringDistrictList
	// Handle object
	reflectDistrict, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "District")
	if err != nil {
		return nil, err
	}
	if reflectDistrict != nil && isNotNil(reflectDistrict.Interface()) {
		attrDistrict, err := ToTrafficMonitoringDistrictList(reflectDistrict, params...)
		if err != nil {
			return nil, err
		}
		resource.District = attrDistrict
	}

	// Property: enable bool
	//encoding gNMI attribute to OAPI
	reflectEnable, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Enable")
	if err != nil {
		return nil, err
	}
	if reflectEnable != nil && isNotNil(reflectEnable.Interface()) {
		boolEnable := reflectEnable.Interface().(bool)
		resource.Enable = boolEnable
	} else {
		resource.Enable = false
	}

	// Property: person-vehicle-bike-detection-application TrafficMonitoringPersonVehicleBikeDetectionApplication
	// Handle object
	reflectPersonVehicleBikeDetectionApplication, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "PersonVehicleBikeDetectionApplication")
	if err != nil {
		return nil, err
	}
	if reflectPersonVehicleBikeDetectionApplication != nil && isNotNil(reflectPersonVehicleBikeDetectionApplication.Interface()) {
		attrPersonVehicleBikeDetectionApplication, err := ToTrafficMonitoringPersonVehicleBikeDetectionApplication(reflectPersonVehicleBikeDetectionApplication, params...)
		if err != nil {
			return nil, err
		}
		resource.PersonVehicleBikeDetectionApplication = attrPersonVehicleBikeDetectionApplication
	}

	return resource, nil
}

// ToTrafficMonitoringDistrict converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToTrafficMonitoringDistrict(params ...string) (*TrafficMonitoringDistrict, error) {
	resource := new(TrafficMonitoringDistrict)

	reflectTrafficMonitoringDistrict, err := utils.FindModelPluginObject(d.device, "TrafficMonitoringDistrict", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToTrafficMonitoringDistrict(reflectTrafficMonitoringDistrict, params...)
	return resource, err

}

// ToTrafficMonitoringDistrict converts gNMI to OAPI relative to a node in the tree.
func ToTrafficMonitoringDistrict(ygotObjValue *reflect.Value, params ...string) (*TrafficMonitoringDistrict, error) {
	resource := new(TrafficMonitoringDistrict)

	// Property: district-ref ListKey
	//encoding gNMI attribute to OAPI
	reflectDistrictRef, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DistrictRef")
	if err != nil {
		return nil, err
	}
	if reflectDistrictRef != nil && isNotNil(reflectDistrictRef.Interface()) {
		attrDistrictRef := ListKey(reflectDistrictRef.Interface().(string))
		resource.DistrictRef = attrDistrictRef
	} else {
		resource.DistrictRef = ListKey("")
	}

	// Property: enabled bool
	//encoding gNMI attribute to OAPI
	reflectEnabled, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Enabled")
	if err != nil {
		return nil, err
	}
	if reflectEnabled != nil && isNotNil(reflectEnabled.Interface()) {
		boolEnabled := reflectEnabled.Interface().(bool)
		resource.Enabled = boolEnabled
	} else {
		resource.Enabled = false
	}

	// Property: stream-count int
	//encoding gNMI attribute to OAPI
	reflectStreamCount, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "StreamCount")
	if err != nil {
		return nil, err
	}
	if reflectStreamCount != nil && isNotNil(reflectStreamCount.Interface()) {
		//OpenAPI does not have unsigned numbers.
		if resource.StreamCount, err = utils.ToIntPtr(reflectStreamCount); err != nil {
			return nil, err
		}
	}

	return resource, nil
}

// ToTrafficMonitoringDistrictList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToTrafficMonitoringDistrictList(params ...string) (*TrafficMonitoringDistrictList, error) {
	resource := new(TrafficMonitoringDistrictList)

	// Array list - Go type TrafficMonitoringDistrict
	mpObject, err := utils.FindModelPluginObject(d.device, "TrafficMonitoringDistrict", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToTrafficMonitoringDistrict(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// ToTrafficMonitoringDistrictList converts gNMI to OAPI relative to a node in the tree.
func ToTrafficMonitoringDistrictList(ygotObjValue *reflect.Value, params ...string) (*TrafficMonitoringDistrictList, error) {
	resource := new(TrafficMonitoringDistrictList)

	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToTrafficMonitoringDistrict(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil
}

// ToTrafficMonitoringPersonVehicleBikeDetectionApplication converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToTrafficMonitoringPersonVehicleBikeDetectionApplication(params ...string) (*TrafficMonitoringPersonVehicleBikeDetectionApplication, error) {
	resource := new(TrafficMonitoringPersonVehicleBikeDetectionApplication)

	reflectTrafficMonitoringPersonVehicleBikeDetectionApplication, err := utils.FindModelPluginObject(d.device, "TrafficMonitoringPersonVehicleBikeDetectionApplication", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToTrafficMonitoringPersonVehicleBikeDetectionApplication(reflectTrafficMonitoringPersonVehicleBikeDetectionApplication, params...)
	return resource, err

}

// ToTrafficMonitoringPersonVehicleBikeDetectionApplication converts gNMI to OAPI relative to a node in the tree.
func ToTrafficMonitoringPersonVehicleBikeDetectionApplication(ygotObjValue *reflect.Value, params ...string) (*TrafficMonitoringPersonVehicleBikeDetectionApplication, error) {
	resource := new(TrafficMonitoringPersonVehicleBikeDetectionApplication)

	// Property: device string
	// Enums handling
	reflectDevice, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Device")
	if err != nil {
		return nil, err
	}
	attrDevice := reflectDevice.Interface()
	_, yangDefDevice, err := utils.ExtractGnmiEnumMap(ygotObjValue, "TrafficMonitoringPersonVehicleBikeDetectionApplicationDevice", attrDevice)
	if err != nil {
		return nil, err
	}
	if yangDefDevice != nil {
		resource.Device = (TrafficMonitoringPersonVehicleBikeDetectionApplicationDevice)(yangDefDevice.Name)
	}

	// Property: model string
	//encoding gNMI attribute to OAPI
	reflectModel, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Model")
	if err != nil {
		return nil, err
	}
	if reflectModel != nil && isNotNil(reflectModel.Interface()) {
		attrModel := fmt.Sprintf("%v", reflectModel.Interface())
		resource.Model = &attrModel
	}

	// Property: model-state TrafficMonitoringPersonVehicleBikeDetectionApplicationModelState
	// Handle object
	reflectModelState, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "ModelState")
	if err != nil {
		return nil, err
	}
	if reflectModelState != nil && isNotNil(reflectModelState.Interface()) {
		attrModelState, err := ToTrafficMonitoringPersonVehicleBikeDetectionApplicationModelState(reflectModelState, params...)
		if err != nil {
			return nil, err
		}
		resource.ModelState = attrModelState
	}

	// Property: precision string
	// Enums handling
	reflectPrecision, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Precision")
	if err != nil {
		return nil, err
	}
	attrPrecision := reflectPrecision.Interface()
	_, yangDefPrecision, err := utils.ExtractGnmiEnumMap(ygotObjValue, "TrafficMonitoringPersonVehicleBikeDetectionApplicationPrecision", attrPrecision)
	if err != nil {
		return nil, err
	}
	if yangDefPrecision != nil {
		resource.Precision = (TrafficMonitoringPersonVehicleBikeDetectionApplicationPrecision)(yangDefPrecision.Name)
	}

	return resource, nil
}

// ToTrafficMonitoringPersonVehicleBikeDetectionApplicationDevice converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToTrafficMonitoringPersonVehicleBikeDetectionApplicationDevice(params ...string) (*TrafficMonitoringPersonVehicleBikeDetectionApplicationDevice, error) {
	resource := new(TrafficMonitoringPersonVehicleBikeDetectionApplicationDevice)

	reflectTrafficMonitoringPersonVehicleBikeDetectionApplicationDevice, err := utils.FindModelPluginObject(d.device, "TrafficMonitoringPersonVehicleBikeDetectionApplicationDevice", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToTrafficMonitoringPersonVehicleBikeDetectionApplicationDevice(reflectTrafficMonitoringPersonVehicleBikeDetectionApplicationDevice, params...)
	return resource, err

}

// ToTrafficMonitoringPersonVehicleBikeDetectionApplicationDevice converts gNMI to OAPI relative to a node in the tree.
func ToTrafficMonitoringPersonVehicleBikeDetectionApplicationDevice(ygotObjValue *reflect.Value, params ...string) (*TrafficMonitoringPersonVehicleBikeDetectionApplicationDevice, error) {
	resource := new(TrafficMonitoringPersonVehicleBikeDetectionApplicationDevice)

	return resource, nil
}

// ToTrafficMonitoringPersonVehicleBikeDetectionApplicationPrecision converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToTrafficMonitoringPersonVehicleBikeDetectionApplicationPrecision(params ...string) (*TrafficMonitoringPersonVehicleBikeDetectionApplicationPrecision, error) {
	resource := new(TrafficMonitoringPersonVehicleBikeDetectionApplicationPrecision)

	reflectTrafficMonitoringPersonVehicleBikeDetectionApplicationPrecision, err := utils.FindModelPluginObject(d.device, "TrafficMonitoringPersonVehicleBikeDetectionApplicationPrecision", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToTrafficMonitoringPersonVehicleBikeDetectionApplicationPrecision(reflectTrafficMonitoringPersonVehicleBikeDetectionApplicationPrecision, params...)
	return resource, err

}

// ToTrafficMonitoringPersonVehicleBikeDetectionApplicationPrecision converts gNMI to OAPI relative to a node in the tree.
func ToTrafficMonitoringPersonVehicleBikeDetectionApplicationPrecision(ygotObjValue *reflect.Value, params ...string) (*TrafficMonitoringPersonVehicleBikeDetectionApplicationPrecision, error) {
	resource := new(TrafficMonitoringPersonVehicleBikeDetectionApplicationPrecision)

	return resource, nil
}

// ToTrafficMonitoringPersonVehicleBikeDetectionApplicationModelState converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToTrafficMonitoringPersonVehicleBikeDetectionApplicationModelState(params ...string) (*TrafficMonitoringPersonVehicleBikeDetectionApplicationModelState, error) {
	resource := new(TrafficMonitoringPersonVehicleBikeDetectionApplicationModelState)

	reflectTrafficMonitoringPersonVehicleBikeDetectionApplicationModelState, err := utils.FindModelPluginObject(d.device, "TrafficMonitoringPersonVehicleBikeDetectionApplicationModelState", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToTrafficMonitoringPersonVehicleBikeDetectionApplicationModelState(reflectTrafficMonitoringPersonVehicleBikeDetectionApplicationModelState, params...)
	return resource, err

}

// ToTrafficMonitoringPersonVehicleBikeDetectionApplicationModelState converts gNMI to OAPI relative to a node in the tree.
func ToTrafficMonitoringPersonVehicleBikeDetectionApplicationModelState(ygotObjValue *reflect.Value, params ...string) (*TrafficMonitoringPersonVehicleBikeDetectionApplicationModelState, error) {
	resource := new(TrafficMonitoringPersonVehicleBikeDetectionApplicationModelState)

	// Property: active-model-file string
	//encoding gNMI attribute to OAPI
	reflectActiveModelFile, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "ActiveModelFile")
	if err != nil {
		return nil, err
	}
	if reflectActiveModelFile != nil && isNotNil(reflectActiveModelFile.Interface()) {
		attrActiveModelFile := fmt.Sprintf("%v", reflectActiveModelFile.Interface())
		resource.ActiveModelFile = &attrActiveModelFile
	}

	// Property: active-model-name string
	//encoding gNMI attribute to OAPI
	reflectActiveModelName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "ActiveModelName")
	if err != nil {
		return nil, err
	}
	if reflectActiveModelName != nil && isNotNil(reflectActiveModelName.Interface()) {
		attrActiveModelName := fmt.Sprintf("%v", reflectActiveModelName.Interface())
		resource.ActiveModelName = &attrActiveModelName
	}

	return resource, nil
}

// ToCityId converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToCityId(params ...string) (*CityId, error) {
	resource := new(CityId)

	reflectCityId, err := utils.FindModelPluginObject(d.device, "CityId", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToCityId(reflectCityId, params...)
	return resource, err

}

// ToCityId converts gNMI to OAPI relative to a node in the tree.
func ToCityId(ygotObjValue *reflect.Value, params ...string) (*CityId, error) {
	resource := new(CityId)

	return resource, nil
}

//Ignoring RequestBodyCollisionDetection

//Ignoring RequestBodyCollisionDetectionDetectionApplication

//Ignoring RequestBodyCollisionDetectionDistrict

//Ignoring RequestBodyDistrict

//Ignoring RequestBodyDistrictLocation

//Ignoring RequestBodyDistrictSource

//Ignoring RequestBodyDistrictSourceLocation

//Ignoring RequestBodyDistrictSourceVideo

//Ignoring RequestBodyTrafficClassification

//Ignoring RequestBodyTrafficClassificationClassificationApplication

//Ignoring RequestBodyTrafficClassificationDetectionApplication

//Ignoring RequestBodyTrafficClassificationDistrict

//Ignoring RequestBodyTrafficMonitoring

//Ignoring RequestBodyTrafficMonitoringDistrict

//Ignoring RequestBodyTrafficMonitoringPersonVehicleBikeDetectionApplication

func isNotNil(i interface{}) bool {
	if i == nil {
		return false
	}
	switch reflect.TypeOf(i).Kind() {
	case reflect.Ptr, reflect.Map, reflect.Array, reflect.Chan, reflect.Slice:
		return !reflect.ValueOf(i).IsNil()
	}
	return true
} // SPDX-FileCopyrightText: 2022-present Intel Corporation
//
// SPDX-License-Identifier: LicenseRef-Intel

// Not generating param-types

// SPDX-FileCopyrightText: 2022-present Intel Corporation
//
// SPDX-License-Identifier: LicenseRef-Intel

// Not generating request-bodies

// SPDX-FileCopyrightText: 2022-present Intel Corporation
//
// SPDX-License-Identifier: LicenseRef-Intel

// Not generating additional-properties
// SPDX-FileCopyrightText: 2022-present Intel Corporation
//
// SPDX-License-Identifier: LicenseRef-Intel

// Not generating additional-properties
