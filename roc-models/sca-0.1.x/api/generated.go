// Code generated by YGOT. DO NOTEDIT.
/*
Package api is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /go/pkg/mod/github.com/openconfig/ygot@v0.24.1/genutil/names.go
using the following YANG input files:
	- /config-model/yang/intel-sca-source@2022-10-27.yang
	- /config-model/yang/intel-sca@2022-10-27.yang
Imported modules were sourced from:
	- "/config-model/yang"/...
*/
package api

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

var (
	SchemaTree map[string]*yang.Entry
	ΛEnumTypes map[string][]reflect.Type
)

func init() {
	var err error
	initΛEnumTypes()
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " +  err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root: &Device{},
		SchemaTree: uzp,
		Unmarshal: Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn )
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// Device represents the /device YANG schema element.
type Device struct {
	CollisionDetection	*IntelSca_CollisionDetection	`path:"collision-detection" module:"intel-sca"`
	District	map[string]*IntelScaSource_District	`path:"district" module:"intel-sca-source"`
	TrafficClassification	*IntelSca_TrafficClassification	`path:"traffic-classification" module:"intel-sca"`
	TrafficMonitoring	*IntelSca_TrafficMonitoring	`path:"traffic-monitoring" module:"intel-sca"`
}

// IsYANGGoStruct ensures that Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Device) IsYANGGoStruct() {}

// NewDistrict creates a new entry in the District list of the
// Device struct. The keys of the list are populated from the input
// arguments.
func (t *Device) NewDistrict(DistrictId string) (*IntelScaSource_District, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.District == nil {
		t.District = make(map[string]*IntelScaSource_District)
	}

	key := DistrictId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.District[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list District", key)
	}

	t.District[key] = &IntelScaSource_District{
		DistrictId: &DistrictId,
	}

	return t.District[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Device"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Device) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Device.
func (*Device) ΛBelongingModule() string {
	return ""
}


// IntelScaSource_District represents the /intel-sca-source/district YANG schema element.
type IntelScaSource_District struct {
	Description	*string	`path:"description" module:"intel-sca-source"`
	DisplayName	*string	`path:"display-name" module:"intel-sca-source"`
	DistrictId	*string	`path:"district-id" module:"intel-sca-source"`
	Image	*string	`path:"image" module:"intel-sca-source"`
	Location	*IntelScaSource_District_Location	`path:"location" module:"intel-sca-source"`
	Source	map[string]*IntelScaSource_District_Source	`path:"source" module:"intel-sca-source"`
}

// IsYANGGoStruct ensures that IntelScaSource_District implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IntelScaSource_District) IsYANGGoStruct() {}

// NewSource creates a new entry in the Source list of the
// IntelScaSource_District struct. The keys of the list are populated from the input
// arguments.
func (t *IntelScaSource_District) NewSource(SourceId string) (*IntelScaSource_District_Source, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*IntelScaSource_District_Source)
	}

	key := SourceId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &IntelScaSource_District_Source{
		SourceId: &SourceId,
	}

	return t.Source[key], nil
}

// ΛListKeyMap returns the keys of the IntelScaSource_District struct, which is a YANG list entry.
func (t *IntelScaSource_District) ΛListKeyMap() (map[string]interface{}, error) {
	if t.DistrictId == nil {
		return nil, fmt.Errorf("nil value for key DistrictId")
	}

	return map[string]interface{}{
		"district-id": *t.DistrictId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IntelScaSource_District) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IntelScaSource_District"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IntelScaSource_District) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IntelScaSource_District) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IntelScaSource_District.
func (*IntelScaSource_District) ΛBelongingModule() string {
	return "intel-sca-source"
}


// IntelScaSource_District_Location represents the /intel-sca-source/district/location YANG schema element.
type IntelScaSource_District_Location struct {
	CoordinateSystem	E_IntelScaSource_District_Location_CoordinateSystem	`path:"coordinate-system" module:"intel-sca-source"`
	OrientationX	*int64	`path:"orientation-x" module:"intel-sca-source"`
	X	*int64	`path:"x" module:"intel-sca-source"`
	Y	*int64	`path:"y" module:"intel-sca-source"`
	Z	*int64	`path:"z" module:"intel-sca-source"`
}

// IsYANGGoStruct ensures that IntelScaSource_District_Location implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IntelScaSource_District_Location) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IntelScaSource_District_Location) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IntelScaSource_District_Location"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IntelScaSource_District_Location) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IntelScaSource_District_Location) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IntelScaSource_District_Location.
func (*IntelScaSource_District_Location) ΛBelongingModule() string {
	return "intel-sca-source"
}


// IntelScaSource_District_Source represents the /intel-sca-source/district/source YANG schema element.
type IntelScaSource_District_Source struct {
	Description	*string	`path:"description" module:"intel-sca-source"`
	DisplayName	*string	`path:"display-name" module:"intel-sca-source"`
	Image	*string	`path:"image" module:"intel-sca-source"`
	Location	*IntelScaSource_District_Source_Location	`path:"location" module:"intel-sca-source"`
	SourceId	*string	`path:"source-id" module:"intel-sca-source"`
	State	*IntelScaSource_District_Source_State	`path:"state" module:"intel-sca-source"`
	Video	*IntelScaSource_District_Source_Video	`path:"video" module:"intel-sca-source"`
}

// IsYANGGoStruct ensures that IntelScaSource_District_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IntelScaSource_District_Source) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the IntelScaSource_District_Source struct, which is a YANG list entry.
func (t *IntelScaSource_District_Source) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SourceId == nil {
		return nil, fmt.Errorf("nil value for key SourceId")
	}

	return map[string]interface{}{
		"source-id": *t.SourceId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IntelScaSource_District_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IntelScaSource_District_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IntelScaSource_District_Source) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IntelScaSource_District_Source) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IntelScaSource_District_Source.
func (*IntelScaSource_District_Source) ΛBelongingModule() string {
	return "intel-sca-source"
}


// IntelScaSource_District_Source_Location represents the /intel-sca-source/district/source/location YANG schema element.
type IntelScaSource_District_Source_Location struct {
	CoordinateSystem	E_IntelScaSource_District_Location_CoordinateSystem	`path:"coordinate-system" module:"intel-sca-source"`
	OrientationX	*int64	`path:"orientation-x" module:"intel-sca-source"`
	X	*int64	`path:"x" module:"intel-sca-source"`
	Y	*int64	`path:"y" module:"intel-sca-source"`
	Z	*int64	`path:"z" module:"intel-sca-source"`
}

// IsYANGGoStruct ensures that IntelScaSource_District_Source_Location implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IntelScaSource_District_Source_Location) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IntelScaSource_District_Source_Location) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IntelScaSource_District_Source_Location"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IntelScaSource_District_Source_Location) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IntelScaSource_District_Source_Location) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IntelScaSource_District_Source_Location.
func (*IntelScaSource_District_Source_Location) ΛBelongingModule() string {
	return "intel-sca-source"
}


// IntelScaSource_District_Source_State represents the /intel-sca-source/district/source/state YANG schema element.
type IntelScaSource_District_Source_State struct {
	Error	*string	`path:"error" module:"intel-sca-source"`
	ErrorSince	*string	`path:"error-since" module:"intel-sca-source"`
	Status	*string	`path:"status" module:"intel-sca-source"`
}

// IsYANGGoStruct ensures that IntelScaSource_District_Source_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IntelScaSource_District_Source_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IntelScaSource_District_Source_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IntelScaSource_District_Source_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IntelScaSource_District_Source_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IntelScaSource_District_Source_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IntelScaSource_District_Source_State.
func (*IntelScaSource_District_Source_State) ΛBelongingModule() string {
	return "intel-sca-source"
}


// IntelScaSource_District_Source_Video represents the /intel-sca-source/district/source/video YANG schema element.
type IntelScaSource_District_Source_Video struct {
	Path	*string	`path:"path" module:"intel-sca-source"`
	SourceType	E_IntelScaSource_District_Source_Video_SourceType	`path:"source-type" module:"intel-sca-source"`
}

// IsYANGGoStruct ensures that IntelScaSource_District_Source_Video implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IntelScaSource_District_Source_Video) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IntelScaSource_District_Source_Video) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IntelScaSource_District_Source_Video"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IntelScaSource_District_Source_Video) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IntelScaSource_District_Source_Video) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IntelScaSource_District_Source_Video.
func (*IntelScaSource_District_Source_Video) ΛBelongingModule() string {
	return "intel-sca-source"
}


// IntelSca_CollisionDetection represents the /intel-sca/collision-detection YANG schema element.
type IntelSca_CollisionDetection struct {
	Default	*string	`path:"default" module:"intel-sca"`
	DetectionApplication	*IntelSca_CollisionDetection_DetectionApplication	`path:"detection-application" module:"intel-sca"`
	District	map[string]*IntelSca_CollisionDetection_District	`path:"district" module:"intel-sca"`
	Enable	*bool	`path:"enable" module:"intel-sca"`
}

// IsYANGGoStruct ensures that IntelSca_CollisionDetection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IntelSca_CollisionDetection) IsYANGGoStruct() {}

// NewDistrict creates a new entry in the District list of the
// IntelSca_CollisionDetection struct. The keys of the list are populated from the input
// arguments.
func (t *IntelSca_CollisionDetection) NewDistrict(DistrictRef string) (*IntelSca_CollisionDetection_District, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.District == nil {
		t.District = make(map[string]*IntelSca_CollisionDetection_District)
	}

	key := DistrictRef

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.District[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list District", key)
	}

	t.District[key] = &IntelSca_CollisionDetection_District{
		DistrictRef: &DistrictRef,
	}

	return t.District[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IntelSca_CollisionDetection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IntelSca_CollisionDetection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IntelSca_CollisionDetection) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IntelSca_CollisionDetection) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IntelSca_CollisionDetection.
func (*IntelSca_CollisionDetection) ΛBelongingModule() string {
	return "intel-sca"
}


// IntelSca_CollisionDetection_DetectionApplication represents the /intel-sca/collision-detection/detection-application YANG schema element.
type IntelSca_CollisionDetection_DetectionApplication struct {
	Device	E_IntelSca_CollisionDetection_DetectionApplication_Device	`path:"device" module:"intel-sca"`
	Model	*string	`path:"model" module:"intel-sca"`
	ModelState	*IntelSca_CollisionDetection_DetectionApplication_ModelState	`path:"model-state" module:"intel-sca"`
	Precision	E_IntelSca_CollisionDetection_DetectionApplication_Precision	`path:"precision" module:"intel-sca"`
}

// IsYANGGoStruct ensures that IntelSca_CollisionDetection_DetectionApplication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IntelSca_CollisionDetection_DetectionApplication) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IntelSca_CollisionDetection_DetectionApplication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IntelSca_CollisionDetection_DetectionApplication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IntelSca_CollisionDetection_DetectionApplication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IntelSca_CollisionDetection_DetectionApplication) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IntelSca_CollisionDetection_DetectionApplication.
func (*IntelSca_CollisionDetection_DetectionApplication) ΛBelongingModule() string {
	return "intel-sca"
}


// IntelSca_CollisionDetection_DetectionApplication_ModelState represents the /intel-sca/collision-detection/detection-application/model-state YANG schema element.
type IntelSca_CollisionDetection_DetectionApplication_ModelState struct {
	ActiveModelFile	*string	`path:"active-model-file" module:"intel-sca"`
	ActiveModelName	*string	`path:"active-model-name" module:"intel-sca"`
}

// IsYANGGoStruct ensures that IntelSca_CollisionDetection_DetectionApplication_ModelState implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IntelSca_CollisionDetection_DetectionApplication_ModelState) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IntelSca_CollisionDetection_DetectionApplication_ModelState) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IntelSca_CollisionDetection_DetectionApplication_ModelState"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IntelSca_CollisionDetection_DetectionApplication_ModelState) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IntelSca_CollisionDetection_DetectionApplication_ModelState) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IntelSca_CollisionDetection_DetectionApplication_ModelState.
func (*IntelSca_CollisionDetection_DetectionApplication_ModelState) ΛBelongingModule() string {
	return "intel-sca"
}


// IntelSca_CollisionDetection_District represents the /intel-sca/collision-detection/district YANG schema element.
type IntelSca_CollisionDetection_District struct {
	DistrictRef	*string	`path:"district-ref" module:"intel-sca"`
	Enabled	*bool	`path:"enabled" module:"intel-sca"`
	StreamCount	*uint8	`path:"stream-count" module:"intel-sca"`
}

// IsYANGGoStruct ensures that IntelSca_CollisionDetection_District implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IntelSca_CollisionDetection_District) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the IntelSca_CollisionDetection_District struct, which is a YANG list entry.
func (t *IntelSca_CollisionDetection_District) ΛListKeyMap() (map[string]interface{}, error) {
	if t.DistrictRef == nil {
		return nil, fmt.Errorf("nil value for key DistrictRef")
	}

	return map[string]interface{}{
		"district-ref": *t.DistrictRef,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IntelSca_CollisionDetection_District) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IntelSca_CollisionDetection_District"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IntelSca_CollisionDetection_District) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IntelSca_CollisionDetection_District) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IntelSca_CollisionDetection_District.
func (*IntelSca_CollisionDetection_District) ΛBelongingModule() string {
	return "intel-sca"
}


// IntelSca_TrafficClassification represents the /intel-sca/traffic-classification YANG schema element.
type IntelSca_TrafficClassification struct {
	ClassificationApplication	*IntelSca_TrafficClassification_ClassificationApplication	`path:"classification-application" module:"intel-sca"`
	Default	*string	`path:"default" module:"intel-sca"`
	DetectionApplication	*IntelSca_TrafficClassification_DetectionApplication	`path:"detection-application" module:"intel-sca"`
	District	map[string]*IntelSca_TrafficClassification_District	`path:"district" module:"intel-sca"`
	Enable	*bool	`path:"enable" module:"intel-sca"`
}

// IsYANGGoStruct ensures that IntelSca_TrafficClassification implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IntelSca_TrafficClassification) IsYANGGoStruct() {}

// NewDistrict creates a new entry in the District list of the
// IntelSca_TrafficClassification struct. The keys of the list are populated from the input
// arguments.
func (t *IntelSca_TrafficClassification) NewDistrict(DistrictRef string) (*IntelSca_TrafficClassification_District, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.District == nil {
		t.District = make(map[string]*IntelSca_TrafficClassification_District)
	}

	key := DistrictRef

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.District[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list District", key)
	}

	t.District[key] = &IntelSca_TrafficClassification_District{
		DistrictRef: &DistrictRef,
	}

	return t.District[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IntelSca_TrafficClassification) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IntelSca_TrafficClassification"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IntelSca_TrafficClassification) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IntelSca_TrafficClassification) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IntelSca_TrafficClassification.
func (*IntelSca_TrafficClassification) ΛBelongingModule() string {
	return "intel-sca"
}


// IntelSca_TrafficClassification_ClassificationApplication represents the /intel-sca/traffic-classification/classification-application YANG schema element.
type IntelSca_TrafficClassification_ClassificationApplication struct {
	Device	E_IntelSca_CollisionDetection_DetectionApplication_Device	`path:"device" module:"intel-sca"`
	Model	*string	`path:"model" module:"intel-sca"`
	ModelState	*IntelSca_TrafficClassification_ClassificationApplication_ModelState	`path:"model-state" module:"intel-sca"`
	Precision	E_IntelSca_CollisionDetection_DetectionApplication_Precision	`path:"precision" module:"intel-sca"`
}

// IsYANGGoStruct ensures that IntelSca_TrafficClassification_ClassificationApplication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IntelSca_TrafficClassification_ClassificationApplication) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IntelSca_TrafficClassification_ClassificationApplication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IntelSca_TrafficClassification_ClassificationApplication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IntelSca_TrafficClassification_ClassificationApplication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IntelSca_TrafficClassification_ClassificationApplication) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IntelSca_TrafficClassification_ClassificationApplication.
func (*IntelSca_TrafficClassification_ClassificationApplication) ΛBelongingModule() string {
	return "intel-sca"
}


// IntelSca_TrafficClassification_ClassificationApplication_ModelState represents the /intel-sca/traffic-classification/classification-application/model-state YANG schema element.
type IntelSca_TrafficClassification_ClassificationApplication_ModelState struct {
	ActiveModelFile	*string	`path:"active-model-file" module:"intel-sca"`
	ActiveModelName	*string	`path:"active-model-name" module:"intel-sca"`
}

// IsYANGGoStruct ensures that IntelSca_TrafficClassification_ClassificationApplication_ModelState implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IntelSca_TrafficClassification_ClassificationApplication_ModelState) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IntelSca_TrafficClassification_ClassificationApplication_ModelState) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IntelSca_TrafficClassification_ClassificationApplication_ModelState"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IntelSca_TrafficClassification_ClassificationApplication_ModelState) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IntelSca_TrafficClassification_ClassificationApplication_ModelState) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IntelSca_TrafficClassification_ClassificationApplication_ModelState.
func (*IntelSca_TrafficClassification_ClassificationApplication_ModelState) ΛBelongingModule() string {
	return "intel-sca"
}


// IntelSca_TrafficClassification_DetectionApplication represents the /intel-sca/traffic-classification/detection-application YANG schema element.
type IntelSca_TrafficClassification_DetectionApplication struct {
	Device	E_IntelSca_CollisionDetection_DetectionApplication_Device	`path:"device" module:"intel-sca"`
	Model	*string	`path:"model" module:"intel-sca"`
	ModelState	*IntelSca_TrafficClassification_DetectionApplication_ModelState	`path:"model-state" module:"intel-sca"`
	Precision	E_IntelSca_CollisionDetection_DetectionApplication_Precision	`path:"precision" module:"intel-sca"`
}

// IsYANGGoStruct ensures that IntelSca_TrafficClassification_DetectionApplication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IntelSca_TrafficClassification_DetectionApplication) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IntelSca_TrafficClassification_DetectionApplication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IntelSca_TrafficClassification_DetectionApplication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IntelSca_TrafficClassification_DetectionApplication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IntelSca_TrafficClassification_DetectionApplication) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IntelSca_TrafficClassification_DetectionApplication.
func (*IntelSca_TrafficClassification_DetectionApplication) ΛBelongingModule() string {
	return "intel-sca"
}


// IntelSca_TrafficClassification_DetectionApplication_ModelState represents the /intel-sca/traffic-classification/detection-application/model-state YANG schema element.
type IntelSca_TrafficClassification_DetectionApplication_ModelState struct {
	ActiveModelFile	*string	`path:"active-model-file" module:"intel-sca"`
	ActiveModelName	*string	`path:"active-model-name" module:"intel-sca"`
}

// IsYANGGoStruct ensures that IntelSca_TrafficClassification_DetectionApplication_ModelState implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IntelSca_TrafficClassification_DetectionApplication_ModelState) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IntelSca_TrafficClassification_DetectionApplication_ModelState) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IntelSca_TrafficClassification_DetectionApplication_ModelState"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IntelSca_TrafficClassification_DetectionApplication_ModelState) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IntelSca_TrafficClassification_DetectionApplication_ModelState) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IntelSca_TrafficClassification_DetectionApplication_ModelState.
func (*IntelSca_TrafficClassification_DetectionApplication_ModelState) ΛBelongingModule() string {
	return "intel-sca"
}


// IntelSca_TrafficClassification_District represents the /intel-sca/traffic-classification/district YANG schema element.
type IntelSca_TrafficClassification_District struct {
	DistrictRef	*string	`path:"district-ref" module:"intel-sca"`
	Enabled	*bool	`path:"enabled" module:"intel-sca"`
	StreamCount	*uint8	`path:"stream-count" module:"intel-sca"`
}

// IsYANGGoStruct ensures that IntelSca_TrafficClassification_District implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IntelSca_TrafficClassification_District) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the IntelSca_TrafficClassification_District struct, which is a YANG list entry.
func (t *IntelSca_TrafficClassification_District) ΛListKeyMap() (map[string]interface{}, error) {
	if t.DistrictRef == nil {
		return nil, fmt.Errorf("nil value for key DistrictRef")
	}

	return map[string]interface{}{
		"district-ref": *t.DistrictRef,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IntelSca_TrafficClassification_District) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IntelSca_TrafficClassification_District"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IntelSca_TrafficClassification_District) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IntelSca_TrafficClassification_District) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IntelSca_TrafficClassification_District.
func (*IntelSca_TrafficClassification_District) ΛBelongingModule() string {
	return "intel-sca"
}


// IntelSca_TrafficMonitoring represents the /intel-sca/traffic-monitoring YANG schema element.
type IntelSca_TrafficMonitoring struct {
	Default	*string	`path:"default" module:"intel-sca"`
	District	map[string]*IntelSca_TrafficMonitoring_District	`path:"district" module:"intel-sca"`
	Enable	*bool	`path:"enable" module:"intel-sca"`
	PersonVehicleBikeDetectionApplication	*IntelSca_TrafficMonitoring_PersonVehicleBikeDetectionApplication	`path:"person-vehicle-bike-detection-application" module:"intel-sca"`
}

// IsYANGGoStruct ensures that IntelSca_TrafficMonitoring implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IntelSca_TrafficMonitoring) IsYANGGoStruct() {}

// NewDistrict creates a new entry in the District list of the
// IntelSca_TrafficMonitoring struct. The keys of the list are populated from the input
// arguments.
func (t *IntelSca_TrafficMonitoring) NewDistrict(DistrictRef string) (*IntelSca_TrafficMonitoring_District, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.District == nil {
		t.District = make(map[string]*IntelSca_TrafficMonitoring_District)
	}

	key := DistrictRef

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.District[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list District", key)
	}

	t.District[key] = &IntelSca_TrafficMonitoring_District{
		DistrictRef: &DistrictRef,
	}

	return t.District[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IntelSca_TrafficMonitoring) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IntelSca_TrafficMonitoring"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IntelSca_TrafficMonitoring) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IntelSca_TrafficMonitoring) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IntelSca_TrafficMonitoring.
func (*IntelSca_TrafficMonitoring) ΛBelongingModule() string {
	return "intel-sca"
}


// IntelSca_TrafficMonitoring_District represents the /intel-sca/traffic-monitoring/district YANG schema element.
type IntelSca_TrafficMonitoring_District struct {
	DistrictRef	*string	`path:"district-ref" module:"intel-sca"`
	Enabled	*bool	`path:"enabled" module:"intel-sca"`
	StreamCount	*uint8	`path:"stream-count" module:"intel-sca"`
}

// IsYANGGoStruct ensures that IntelSca_TrafficMonitoring_District implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IntelSca_TrafficMonitoring_District) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the IntelSca_TrafficMonitoring_District struct, which is a YANG list entry.
func (t *IntelSca_TrafficMonitoring_District) ΛListKeyMap() (map[string]interface{}, error) {
	if t.DistrictRef == nil {
		return nil, fmt.Errorf("nil value for key DistrictRef")
	}

	return map[string]interface{}{
		"district-ref": *t.DistrictRef,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IntelSca_TrafficMonitoring_District) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IntelSca_TrafficMonitoring_District"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IntelSca_TrafficMonitoring_District) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IntelSca_TrafficMonitoring_District) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IntelSca_TrafficMonitoring_District.
func (*IntelSca_TrafficMonitoring_District) ΛBelongingModule() string {
	return "intel-sca"
}


// IntelSca_TrafficMonitoring_PersonVehicleBikeDetectionApplication represents the /intel-sca/traffic-monitoring/person-vehicle-bike-detection-application YANG schema element.
type IntelSca_TrafficMonitoring_PersonVehicleBikeDetectionApplication struct {
	Device	E_IntelSca_CollisionDetection_DetectionApplication_Device	`path:"device" module:"intel-sca"`
	Model	*string	`path:"model" module:"intel-sca"`
	ModelState	*IntelSca_TrafficMonitoring_PersonVehicleBikeDetectionApplication_ModelState	`path:"model-state" module:"intel-sca"`
	Precision	E_IntelSca_CollisionDetection_DetectionApplication_Precision	`path:"precision" module:"intel-sca"`
}

// IsYANGGoStruct ensures that IntelSca_TrafficMonitoring_PersonVehicleBikeDetectionApplication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IntelSca_TrafficMonitoring_PersonVehicleBikeDetectionApplication) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IntelSca_TrafficMonitoring_PersonVehicleBikeDetectionApplication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IntelSca_TrafficMonitoring_PersonVehicleBikeDetectionApplication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IntelSca_TrafficMonitoring_PersonVehicleBikeDetectionApplication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IntelSca_TrafficMonitoring_PersonVehicleBikeDetectionApplication) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IntelSca_TrafficMonitoring_PersonVehicleBikeDetectionApplication.
func (*IntelSca_TrafficMonitoring_PersonVehicleBikeDetectionApplication) ΛBelongingModule() string {
	return "intel-sca"
}


// IntelSca_TrafficMonitoring_PersonVehicleBikeDetectionApplication_ModelState represents the /intel-sca/traffic-monitoring/person-vehicle-bike-detection-application/model-state YANG schema element.
type IntelSca_TrafficMonitoring_PersonVehicleBikeDetectionApplication_ModelState struct {
	ActiveModelFile	*string	`path:"active-model-file" module:"intel-sca"`
	ActiveModelName	*string	`path:"active-model-name" module:"intel-sca"`
}

// IsYANGGoStruct ensures that IntelSca_TrafficMonitoring_PersonVehicleBikeDetectionApplication_ModelState implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IntelSca_TrafficMonitoring_PersonVehicleBikeDetectionApplication_ModelState) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IntelSca_TrafficMonitoring_PersonVehicleBikeDetectionApplication_ModelState) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IntelSca_TrafficMonitoring_PersonVehicleBikeDetectionApplication_ModelState"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IntelSca_TrafficMonitoring_PersonVehicleBikeDetectionApplication_ModelState) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IntelSca_TrafficMonitoring_PersonVehicleBikeDetectionApplication_ModelState) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IntelSca_TrafficMonitoring_PersonVehicleBikeDetectionApplication_ModelState.
func (*IntelSca_TrafficMonitoring_PersonVehicleBikeDetectionApplication_ModelState) ΛBelongingModule() string {
	return "intel-sca"
}


// E_IntelScaSource_District_Location_CoordinateSystem is a derived int64 type which is used to represent
// the enumerated node IntelScaSource_District_Location_CoordinateSystem. An additional value named
// IntelScaSource_District_Location_CoordinateSystem_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IntelScaSource_District_Location_CoordinateSystem int64

// IsYANGGoEnum ensures that IntelScaSource_District_Location_CoordinateSystem implements the yang.GoEnum
// interface. This ensures that IntelScaSource_District_Location_CoordinateSystem can be identified as a
// mapped type for a YANG enumeration.
func (E_IntelScaSource_District_Location_CoordinateSystem) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IntelScaSource_District_Location_CoordinateSystem.
func (E_IntelScaSource_District_Location_CoordinateSystem) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_IntelScaSource_District_Location_CoordinateSystem.
func (e E_IntelScaSource_District_Location_CoordinateSystem) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IntelScaSource_District_Location_CoordinateSystem")
}

const (
	// IntelScaSource_District_Location_CoordinateSystem_UNSET corresponds to the value UNSET of IntelScaSource_District_Location_CoordinateSystem
	IntelScaSource_District_Location_CoordinateSystem_UNSET E_IntelScaSource_District_Location_CoordinateSystem = 0
	// IntelScaSource_District_Location_CoordinateSystem_grid_bottom_left corresponds to the value grid_bottom_left of IntelScaSource_District_Location_CoordinateSystem
	IntelScaSource_District_Location_CoordinateSystem_grid_bottom_left E_IntelScaSource_District_Location_CoordinateSystem = 1
	// IntelScaSource_District_Location_CoordinateSystem_grid_top_left corresponds to the value grid_top_left of IntelScaSource_District_Location_CoordinateSystem
	IntelScaSource_District_Location_CoordinateSystem_grid_top_left E_IntelScaSource_District_Location_CoordinateSystem = 2
	// IntelScaSource_District_Location_CoordinateSystem_lat_long corresponds to the value lat_long of IntelScaSource_District_Location_CoordinateSystem
	IntelScaSource_District_Location_CoordinateSystem_lat_long E_IntelScaSource_District_Location_CoordinateSystem = 3
)


// E_IntelScaSource_District_Source_Video_SourceType is a derived int64 type which is used to represent
// the enumerated node IntelScaSource_District_Source_Video_SourceType. An additional value named
// IntelScaSource_District_Source_Video_SourceType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IntelScaSource_District_Source_Video_SourceType int64

// IsYANGGoEnum ensures that IntelScaSource_District_Source_Video_SourceType implements the yang.GoEnum
// interface. This ensures that IntelScaSource_District_Source_Video_SourceType can be identified as a
// mapped type for a YANG enumeration.
func (E_IntelScaSource_District_Source_Video_SourceType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IntelScaSource_District_Source_Video_SourceType.
func (E_IntelScaSource_District_Source_Video_SourceType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_IntelScaSource_District_Source_Video_SourceType.
func (e E_IntelScaSource_District_Source_Video_SourceType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IntelScaSource_District_Source_Video_SourceType")
}

const (
	// IntelScaSource_District_Source_Video_SourceType_UNSET corresponds to the value UNSET of IntelScaSource_District_Source_Video_SourceType
	IntelScaSource_District_Source_Video_SourceType_UNSET E_IntelScaSource_District_Source_Video_SourceType = 0
	// IntelScaSource_District_Source_Video_SourceType_file corresponds to the value file of IntelScaSource_District_Source_Video_SourceType
	IntelScaSource_District_Source_Video_SourceType_file E_IntelScaSource_District_Source_Video_SourceType = 1
	// IntelScaSource_District_Source_Video_SourceType_stream corresponds to the value stream of IntelScaSource_District_Source_Video_SourceType
	IntelScaSource_District_Source_Video_SourceType_stream E_IntelScaSource_District_Source_Video_SourceType = 2
	// IntelScaSource_District_Source_Video_SourceType_device corresponds to the value device of IntelScaSource_District_Source_Video_SourceType
	IntelScaSource_District_Source_Video_SourceType_device E_IntelScaSource_District_Source_Video_SourceType = 3
	// IntelScaSource_District_Source_Video_SourceType_sample corresponds to the value sample of IntelScaSource_District_Source_Video_SourceType
	IntelScaSource_District_Source_Video_SourceType_sample E_IntelScaSource_District_Source_Video_SourceType = 4
)


// E_IntelSca_CollisionDetection_DetectionApplication_Device is a derived int64 type which is used to represent
// the enumerated node IntelSca_CollisionDetection_DetectionApplication_Device. An additional value named
// IntelSca_CollisionDetection_DetectionApplication_Device_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IntelSca_CollisionDetection_DetectionApplication_Device int64

// IsYANGGoEnum ensures that IntelSca_CollisionDetection_DetectionApplication_Device implements the yang.GoEnum
// interface. This ensures that IntelSca_CollisionDetection_DetectionApplication_Device can be identified as a
// mapped type for a YANG enumeration.
func (E_IntelSca_CollisionDetection_DetectionApplication_Device) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IntelSca_CollisionDetection_DetectionApplication_Device.
func (E_IntelSca_CollisionDetection_DetectionApplication_Device) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_IntelSca_CollisionDetection_DetectionApplication_Device.
func (e E_IntelSca_CollisionDetection_DetectionApplication_Device) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IntelSca_CollisionDetection_DetectionApplication_Device")
}

const (
	// IntelSca_CollisionDetection_DetectionApplication_Device_UNSET corresponds to the value UNSET of IntelSca_CollisionDetection_DetectionApplication_Device
	IntelSca_CollisionDetection_DetectionApplication_Device_UNSET E_IntelSca_CollisionDetection_DetectionApplication_Device = 0
	// IntelSca_CollisionDetection_DetectionApplication_Device_cpu corresponds to the value cpu of IntelSca_CollisionDetection_DetectionApplication_Device
	IntelSca_CollisionDetection_DetectionApplication_Device_cpu E_IntelSca_CollisionDetection_DetectionApplication_Device = 1
	// IntelSca_CollisionDetection_DetectionApplication_Device_gpu corresponds to the value gpu of IntelSca_CollisionDetection_DetectionApplication_Device
	IntelSca_CollisionDetection_DetectionApplication_Device_gpu E_IntelSca_CollisionDetection_DetectionApplication_Device = 2
	// IntelSca_CollisionDetection_DetectionApplication_Device_vpu corresponds to the value vpu of IntelSca_CollisionDetection_DetectionApplication_Device
	IntelSca_CollisionDetection_DetectionApplication_Device_vpu E_IntelSca_CollisionDetection_DetectionApplication_Device = 3
)


// E_IntelSca_CollisionDetection_DetectionApplication_Precision is a derived int64 type which is used to represent
// the enumerated node IntelSca_CollisionDetection_DetectionApplication_Precision. An additional value named
// IntelSca_CollisionDetection_DetectionApplication_Precision_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IntelSca_CollisionDetection_DetectionApplication_Precision int64

// IsYANGGoEnum ensures that IntelSca_CollisionDetection_DetectionApplication_Precision implements the yang.GoEnum
// interface. This ensures that IntelSca_CollisionDetection_DetectionApplication_Precision can be identified as a
// mapped type for a YANG enumeration.
func (E_IntelSca_CollisionDetection_DetectionApplication_Precision) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IntelSca_CollisionDetection_DetectionApplication_Precision.
func (E_IntelSca_CollisionDetection_DetectionApplication_Precision) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_IntelSca_CollisionDetection_DetectionApplication_Precision.
func (e E_IntelSca_CollisionDetection_DetectionApplication_Precision) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IntelSca_CollisionDetection_DetectionApplication_Precision")
}

const (
	// IntelSca_CollisionDetection_DetectionApplication_Precision_UNSET corresponds to the value UNSET of IntelSca_CollisionDetection_DetectionApplication_Precision
	IntelSca_CollisionDetection_DetectionApplication_Precision_UNSET E_IntelSca_CollisionDetection_DetectionApplication_Precision = 0
	// IntelSca_CollisionDetection_DetectionApplication_Precision_fp8 corresponds to the value fp8 of IntelSca_CollisionDetection_DetectionApplication_Precision
	IntelSca_CollisionDetection_DetectionApplication_Precision_fp8 E_IntelSca_CollisionDetection_DetectionApplication_Precision = 1
	// IntelSca_CollisionDetection_DetectionApplication_Precision_fp16 corresponds to the value fp16 of IntelSca_CollisionDetection_DetectionApplication_Precision
	IntelSca_CollisionDetection_DetectionApplication_Precision_fp16 E_IntelSca_CollisionDetection_DetectionApplication_Precision = 2
	// IntelSca_CollisionDetection_DetectionApplication_Precision_fp32 corresponds to the value fp32 of IntelSca_CollisionDetection_DetectionApplication_Precision
	IntelSca_CollisionDetection_DetectionApplication_Precision_fp32 E_IntelSca_CollisionDetection_DetectionApplication_Precision = 3
)


// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_IntelScaSource_District_Location_CoordinateSystem": {
		1: {Name: "grid-bottom-left"},
		2: {Name: "grid-top-left"},
		3: {Name: "lat-long"},
	},
	"E_IntelScaSource_District_Source_Video_SourceType": {
		1: {Name: "file"},
		2: {Name: "stream"},
		3: {Name: "device"},
		4: {Name: "sample"},
	},
	"E_IntelSca_CollisionDetection_DetectionApplication_Device": {
		1: {Name: "cpu"},
		2: {Name: "gpu"},
		3: {Name: "vpu"},
	},
	"E_IntelSca_CollisionDetection_DetectionApplication_Precision": {
		1: {Name: "fp8"},
		2: {Name: "fp16"},
		3: {Name: "fp32"},
	},
}


var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5d, 0xdd, 0x73, 0xdb, 0x38,
		0x92, 0x7f, 0xcf, 0x5f, 0x81, 0xd2, 0xcb, 0xed, 0x5e, 0x45, 0x8e, 0x65, 0x3b, 0xb1, 0xc7, 0x6f,
		0x99, 0x49, 0x76, 0x2e, 0x35, 0xc9, 0x4e, 0x6a, 0x92, 0x9d, 0xba, 0xdd, 0x4d, 0x2a, 0x05, 0x91,
		0x4d, 0x09, 0x67, 0x0a, 0x60, 0x01, 0xa0, 0x12, 0xe5, 0x2a, 0xff, 0xfb, 0x16, 0x41, 0x52, 0x9f,
		0xfc, 0x40, 0x53, 0x94, 0x2d, 0xdb, 0x9d, 0xa7, 0xd8, 0x46, 0x83, 0x24, 0xd0, 0xdd, 0xbf, 0x46,
		0x7f, 0xe1, 0xff, 0x9f, 0x30, 0xc6, 0xd8, 0xe0, 0xef, 0x7c, 0x06, 0x83, 0x6b, 0x36, 0x08, 0x61,
		0x2e, 0x02, 0x18, 0x3c, 0xcd, 0x7f, 0xfb, 0x9b, 0x90, 0xe1, 0xe0, 0x9a, 0x8d, 0x8a, 0x1f, 0x7f,
		0x51, 0x32, 0x12, 0x93, 0xc1, 0x35, 0x3b, 0x2d, 0x7e, 0xf1, 0x4a, 0xe8, 0xc1, 0x35, 0xcb, 0xa7,
		0x70, 0xbf, 0x08, 0x54, 0x1c, 0x0b, 0x23, 0x94, 0x1c, 0x86, 0x60, 0x21, 0xb0, 0x42, 0xc9, 0x8d,
		0x01, 0x1b, 0xcf, 0xaa, 0x1a, 0xfc, 0x74, 0x73, 0xe8, 0x2b, 0x30, 0x81, 0x16, 0x49, 0x31, 0x4f,
		0xf1, 0x02, 0xa9, 0x06, 0xf6, 0x32, 0x49, 0x62, 0x11, 0xf0, 0xec, 0x0f, 0xcc, 0x2a, 0x16, 0xa8,
		0x54, 0x5a, 0xa6, 0xc6, 0xff, 0x07, 0x81, 0x35, 0x4c, 0x48, 0x66, 0xa6, 0x10, 0x47, 0xdb, 0xb3,
		0x6d, 0x7e, 0xce, 0xf2, 0xd7, 0xdb, 0x9f, 0xb5, 0xfc, 0xc3, 0x7b, 0x0d, 0x91, 0xf8, 0xb6, 0xf3,
		0x01, 0x1b, 0x1f, 0x61, 0x02, 0xbe, 0xf5, 0x18, 0xf7, 0xe7, 0x0f, 0x2a, 0xd5, 0x01, 0x54, 0x92,
		0xe6, 0xaf, 0x02, 0x8b, 0xaf, 0x4a, 0x67, 0x6f, 0x33, 0x48, 0xf2, 0xa7, 0x3c, 0xad, 0x1e, 0xf8,
		0x3f, 0xdc, 0xbc, 0xd4, 0x93, 0x74, 0x06, 0xd2, 0x0e, 0xae, 0x99, 0xd5, 0x29, 0xd4, 0x0c, 0x5c,
		0x1b, 0xe5, 0x5e, 0x6a, 0x67, 0xd4, 0x8f, 0x8d, 0xdf, 0xfc, 0xd8, 0x5e, 0xe9, 0xad, 0xad, 0x5c,
		0xfe, 0x21, 0x84, 0x88, 0xa7, 0xb1, 0xad, 0xff, 0x94, 0x15, 0xeb, 0xe4, 0x03, 0x6b, 0xde, 0x6f,
		0x6b, 0x2b, 0x67, 0x5c, 0xdf, 0x30, 0x3b, 0x05, 0x56, 0x90, 0x31, 0x93, 0xaf, 0x58, 0x0d, 0x75,
		0xb1, 0x75, 0xa7, 0x35, 0x7f, 0xae, 0xdb, 0x42, 0x9f, 0xad, 0xf4, 0xdc, 0x52, 0xdf, 0xad, 0x45,
		0x6f, 0x31, 0x7a, 0xab, 0xfd, 0xb7, 0xbc, 0x7a, 0xeb, 0x6b, 0x58, 0x60, 0x39, 0xed, 0xc7, 0x45,
		0x02, 0x7e, 0x2b, 0x15, 0x03, 0x8f, 0x34, 0x44, 0x4d, 0xab, 0x55, 0xca, 0xdc, 0x65, 0xc3, 0x98,
		0xf7, 0xdc, 0x4e, 0xb3, 0xe9, 0x9e, 0x19, 0x1d, 0x5c, 0x87, 0xc2, 0x58, 0x2d, 0x02, 0xeb, 0x7e,
		0xc8, 0x99, 0x62, 0xed, 0xbf, 0x43, 0x11, 0x56, 0x7f, 0xe6, 0xee, 0x27, 0x56, 0x7c, 0xde, 0x60,
		0xa9, 0x68, 0x86, 0x7c, 0xa5, 0x40, 0x7c, 0x58, 0xbb, 0x8a, 0xcc, 0x8f, 0xd1, 0x83, 0x42, 0x67,
		0xe5, 0xba, 0x4a, 0x45, 0x6c, 0x0e, 0x53, 0x11, 0xc4, 0xc0, 0x5e, 0xd5, 0x28, 0xbd, 0x16, 0x75,
		0x45, 0x3c, 0x7f, 0x08, 0x9e, 0xaf, 0x53, 0x7f, 0x6b, 0x9c, 0xe3, 0x80, 0xb1, 0x75, 0x05, 0x2a,
		0x81, 0xb4, 0x76, 0xf4, 0x36, 0xbe, 0x4d, 0x95, 0x08, 0x20, 0x63, 0x12, 0xa9, 0xc2, 0x4c, 0x35,
		0xfa, 0xcc, 0xd1, 0xac, 0x1a, 0xbd, 0xd9, 0x05, 0xc3, 0x36, 0x48, 0xf6, 0xc1, 0xb2, 0x51, 0x67,
		0x76, 0xea, 0xcc, 0x56, 0x78, 0xf6, 0x6a, 0x66, 0xb3, 0x16, 0x76, 0x5b, 0x3e, 0xee, 0x1d, 0x97,
		0x21, 0xb7, 0x4a, 0x2f, 0xea, 0xe5, 0xdc, 0x5f, 0x2d, 0xef, 0xec, 0x0a, 0xc8, 0x74, 0x06, 0xba,
		0x49, 0x59, 0x55, 0xea, 0x9b, 0x0b, 0x8f, 0xb1, 0xaf, 0x65, 0x3a, 0xf3, 0xdf, 0xc7, 0x8f, 0xea,
		0x83, 0xd5, 0x42, 0x4e, 0xbc, 0x29, 0x1c, 0xd5, 0xc8, 0xa9, 0xcf, 0x24, 0xf5, 0xdc, 0x74, 0x47,
		0x73, 0x96, 0xd1, 0x4c, 0x70, 0x34, 0xe7, 0x19, 0xcd, 0x3c, 0x49, 0x07, 0x5e, 0x24, 0x3f, 0x9e,
		0xfa, 0x7e, 0xf3, 0x1b, 0x69, 0x71, 0x1f, 0x9c, 0x7d, 0x6b, 0x2b, 0x1f, 0x6c, 0x50, 0x4c, 0x1c,
		0xc5, 0x19, 0x82, 0x62, 0xee, 0x28, 0xce, 0xfd, 0x3e, 0x75, 0x5f, 0xee, 0x7f, 0xd2, 0x61, 0x11,
		0x07, 0x33, 0x15, 0x42, 0xec, 0xaf, 0x68, 0xf3, 0xe1, 0x38, 0x3d, 0xfb, 0x5a, 0x5a, 0xd0, 0xcc,
		0x51, 0x32, 0xc9, 0x67, 0x70, 0xc2, 0xde, 0x02, 0x9f, 0x03, 0x1b, 0xc7, 0x5c, 0xde, 0x64, 0xe7,
		0x89, 0xd4, 0xc0, 0x86, 0x71, 0xea, 0x86, 0x9e, 0x7c, 0x92, 0x6f, 0xe4, 0x9c, 0xc7, 0x22, 0x64,
		0x73, 0x1e, 0xa7, 0x60, 0xd8, 0x57, 0x11, 0xc7, 0x6c, 0x0c, 0x4c, 0x4c, 0xa4, 0xd2, 0x10, 0x32,
		0x2e, 0xc3, 0x0d, 0xb2, 0xad, 0x61, 0xa9, 0x81, 0x90, 0x09, 0x69, 0x2c, 0xf0, 0xf0, 0xe4, 0x93,
		0xfc, 0x38, 0x15, 0x86, 0x09, 0xc3, 0xb8, 0x64, 0xf0, 0x8d, 0xcf, 0x92, 0xd8, 0x69, 0x7e, 0xce,
		0x62, 0xa5, 0x0c, 0xc4, 0x8b, 0xec, 0x50, 0x93, 0xc4, 0xd9, 0xac, 0xd6, 0x6a, 0x31, 0x4e, 0x2d,
		0x9c, 0xb0, 0x0f, 0x96, 0x5b, 0x28, 0xa7, 0xe5, 0x1a, 0x98, 0x04, 0x08, 0x21, 0x64, 0x63, 0x88,
		0xd5, 0xd7, 0x4f, 0xd2, 0x2a, 0x66, 0xa6, 0xea, 0xab, 0x7b, 0x07, 0x1e, 0xd8, 0x94, 0xc7, 0x4c,
		0x83, 0xc9, 0xde, 0x44, 0x45, 0xee, 0x97, 0x1b, 0xc6, 0x08, 0x01, 0xcb, 0xc3, 0x05, 0x16, 0x3c,
		0x58, 0x98, 0x5c, 0x43, 0x23, 0x70, 0xe2, 0xca, 0x63, 0xec, 0x5b, 0x90, 0x13, 0x67, 0xdc, 0xff,
		0xdb, 0x6b, 0x99, 0x10, 0xca, 0xf2, 0x9d, 0x90, 0x28, 0xed, 0xea, 0x88, 0xfe, 0xcc, 0x24, 0x07,
		0xa7, 0x63, 0x1d, 0xdd, 0xdf, 0x34, 0x77, 0xa6, 0xfa, 0x2b, 0x31, 0x11, 0xd6, 0xb4, 0xf3, 0xfa,
		0xee, 0x2a, 0xc3, 0x84, 0x5b, 0x31, 0xcf, 0x9e, 0x1d, 0xf1, 0xd8, 0x80, 0x37, 0xf5, 0x0f, 0x84,
		0x6e, 0x7f, 0xc7, 0xbf, 0xed, 0xb1, 0x24, 0xa7, 0xa7, 0xf7, 0x67, 0x51, 0x7a, 0x82, 0xaf, 0xcf,
		0x87, 0x82, 0xaf, 0xa1, 0xc9, 0x14, 0x35, 0x12, 0xc4, 0x0a, 0x22, 0x1c, 0x94, 0x69, 0xe0, 0x21,
		0x53, 0x32, 0x5e, 0x2c, 0x51, 0x61, 0xac, 0x52, 0xeb, 0x94, 0xbd, 0x9b, 0xd4, 0x30, 0xaf, 0x59,
		0x9b, 0xcf, 0x9a, 0xbb, 0xba, 0xfe, 0x8c, 0x74, 0xfd, 0xd1, 0xe8, 0xfa, 0xb6, 0xb3, 0xeb, 0x72,
		0x60, 0x26, 0xae, 0x73, 0x18, 0xe6, 0xcc, 0x16, 0x89, 0x18, 0xb1, 0x88, 0xe5, 0x1e, 0xed, 0x4e,
		0xe1, 0xb9, 0x26, 0x5b, 0x6c, 0xfb, 0x71, 0x0a, 0x2c, 0x23, 0x77, 0xe6, 0x57, 0x69, 0x9d, 0xe4,
		0x06, 0x99, 0x90, 0xce, 0xfc, 0x2a, 0x8d, 0xa6, 0xcc, 0xa0, 0x91, 0x6c, 0x0a, 0xda, 0xfb, 0x51,
		0x7e, 0x76, 0x0b, 0xda, 0x7e, 0xe9, 0xc2, 0xdb, 0x1d, 0x79, 0xbc, 0x2b, 0xaf, 0xef, 0xcd, 0xf3,
		0x7b, 0xf3, 0x7e, 0x77, 0x19, 0x40, 0xea, 0x76, 0xdf, 0x53, 0x98, 0xaf, 0x1d, 0xd4, 0xdd, 0x1e,
		0xda, 0xb5, 0x8b, 0xfa, 0x3a, 0x5c, 0x3d, 0x45, 0x8a, 0xb4, 0xcc, 0x5f, 0x7d, 0x1f, 0x91, 0x76,
		0x53, 0x74, 0x17, 0x69, 0x92, 0x60, 0x92, 0x60, 0x92, 0xe0, 0x9e, 0x70, 0xfd, 0xa5, 0x94, 0xca,
		0x36, 0x47, 0x28, 0x36, 0xc6, 0x9b, 0x60, 0x0a, 0x33, 0x9e, 0x94, 0xc1, 0x14, 0x21, 0x6d, 0x66,
		0x53, 0x06, 0xfc, 0x59, 0x45, 0xa0, 0xf5, 0x59, 0x65, 0x48, 0xe3, 0x99, 0xbf, 0x1d, 0x9a, 0x3f,
		0xd1, 0xea, 0x34, 0xb0, 0x85, 0xda, 0x19, 0xbc, 0xc9, 0x1e, 0xf8, 0x21, 0xe0, 0x5f, 0x7e, 0x29,
		0x9f, 0xb7, 0x0c, 0x71, 0x7c, 0x59, 0xfe, 0x6f, 0x2d, 0x70, 0xfb, 0xe5, 0x5d, 0xf6, 0x34, 0xe7,
		0xd2, 0x18, 0x1c, 0xc0, 0x10, 0x4f, 0x34, 0x04, 0xee, 0x2d, 0xfc, 0xcd, 0xf0, 0x15, 0x09, 0xf9,
		0xed, 0xc9, 0xe4, 0x26, 0xbf, 0xfd, 0x1e, 0x7e, 0xfb, 0x28, 0xb9, 0x42, 0xfb, 0xed, 0xa3, 0x64,
		0xf4, 0x02, 0xed, 0xb8, 0x8f, 0x92, 0xf3, 0xb3, 0x3b, 0xf7, 0xdc, 0xbb, 0x37, 0xc7, 0x39, 0xe2,
		0xdd, 0x7b, 0x5f, 0xb3, 0x73, 0x14, 0xc9, 0x55, 0xb6, 0xcf, 0x77, 0xed, 0xbb, 0x47, 0x05, 0x56,
		0x3d, 0x41, 0xac, 0x07, 0xf0, 0x6a, 0x8a, 0x5f, 0xef, 0x07, 0x54, 0x7b, 0x65, 0x1c, 0x14, 0xe9,
		0x0c, 0x1e, 0x49, 0x06, 0xe5, 0x48, 0xbf, 0xbc, 0x02, 0xce, 0x62, 0x61, 0x9c, 0x63, 0x5f, 0x43,
		0x04, 0x1a, 0x64, 0x00, 0x86, 0x59, 0x55, 0xe4, 0xd1, 0x18, 0x4a, 0x2a, 0xb8, 0x0f, 0x49, 0x05,
		0xc5, 0x96, 0x0f, 0x35, 0x44, 0x88, 0xd4, 0x82, 0x75, 0x2a, 0xac, 0xb7, 0xb0, 0x60, 0x95, 0x8c,
		0x53, 0x38, 0x6b, 0x61, 0x39, 0x32, 0x55, 0x1e, 0x80, 0xa9, 0x82, 0x37, 0x3f, 0xda, 0xb3, 0xba,
		0x76, 0xb4, 0xc9, 0xa5, 0xc7, 0xd8, 0xfa, 0x2c, 0xaf, 0x25, 0x43, 0xd7, 0x25, 0x77, 0xed, 0x77,
		0x10, 0x00, 0xc9, 0xc7, 0x31, 0x84, 0xfe, 0x02, 0x56, 0x12, 0xe0, 0x64, 0xab, 0xfc, 0x8a, 0x52,
		0x03, 0xbb, 0xf8, 0xac, 0xe7, 0x54, 0x24, 0x60, 0x74, 0x16, 0xa8, 0xde, 0x95, 0xb1, 0x52, 0x31,
		0x70, 0xd4, 0x39, 0x60, 0x74, 0x00, 0x19, 0x32, 0x56, 0x03, 0x9f, 0x0d, 0x5d, 0x9e, 0xb5, 0xbf,
		0x20, 0x6d, 0x50, 0x21, 0x8f, 0xd4, 0x79, 0x46, 0x77, 0xc4, 0xf2, 0x39, 0x5c, 0x52, 0xb7, 0x9d,
		0x0a, 0xd3, 0x9c, 0x27, 0xbc, 0x36, 0x5b, 0x99, 0xb5, 0xdc, 0x1e, 0x78, 0x1e, 0x8c, 0x9a, 0x59,
		0xe4, 0x33, 0x09, 0x2f, 0xa1, 0xe3, 0x72, 0xa5, 0x53, 0x21, 0xed, 0x15, 0x42, 0x1c, 0x9f, 0x7b,
		0x0c, 0xfd, 0x83, 0xcb, 0x09, 0x50, 0x92, 0xc4, 0xf1, 0x27, 0x49, 0x5c, 0x51, 0x8a, 0xc4, 0x41,
		0xbc, 0x04, 0xbf, 0xc1, 0xc2, 0xf3, 0x64, 0x33, 0x78, 0x2b, 0x8c, 0x7d, 0x69, 0x6d, 0xcb, 0xc9,
		0xea, 0x9d, 0x90, 0xaf, 0x63, 0xc8, 0x14, 0x49, 0xcb, 0xaa, 0x67, 0xfc, 0xb0, 0x36, 0x72, 0x74,
		0x75, 0x71, 0xf1, 0xe2, 0xf2, 0xe2, 0xe2, 0xf4, 0xf2, 0xfc, 0xf2, 0xf4, 0xa7, 0xe7, 0xcf, 0x47,
		0x2f, 0x46, 0x0d, 0x02, 0x3c, 0xf8, 0x5d, 0x87, 0xa0, 0x21, 0xfc, 0x39, 0x7b, 0x7b, 0x99, 0xc6,
		0xf1, 0x11, 0xb8, 0x46, 0xda, 0x8f, 0x74, 0x18, 0x6f, 0x48, 0x39, 0xdb, 0x1e, 0x1e, 0x90, 0xdc,
		0x04, 0x6e, 0xf7, 0x7f, 0x14, 0xe3, 0xfc, 0xbc, 0x1f, 0xef, 0x45, 0x02, 0xb1, 0x90, 0x6d, 0x06,
		0x36, 0xd5, 0x0d, 0xdd, 0xa2, 0xbb, 0xc3, 0xc3, 0x10, 0x46, 0xd4, 0x16, 0xb5, 0x1b, 0xbe, 0x2d,
		0x06, 0xef, 0x0f, 0x64, 0x05, 0x1c, 0x7c, 0xb3, 0x9a, 0x0f, 0x53, 0x69, 0x6c, 0x2d, 0xbf, 0x66,
		0x1b, 0x62, 0x40, 0x06, 0xf5, 0x58, 0xed, 0xf1, 0x61, 0xd9, 0x06, 0xf5, 0xcf, 0x27, 0xf9, 0x6b,
		0x1d, 0x92, 0x53, 0xdc, 0x7b, 0x63, 0x59, 0xe5, 0x49, 0x33, 0x9e, 0x6c, 0xef, 0x41, 0x8b, 0x4a,
		0x44, 0xa9, 0xc2, 0xaa, 0xb2, 0x4c, 0x6f, 0xcd, 0xb7, 0xf9, 0xa1, 0xab, 0xcf, 0x58, 0x7b, 0xe1,
		0x7a, 0xd7, 0x6e, 0x9b, 0x4b, 0xb7, 0xd6, 0x73, 0x20, 0x0c, 0xe3, 0xcc, 0xa4, 0x63, 0x93, 0xbf,
		0x44, 0x9e, 0x0e, 0x1e, 0x08, 0xbb, 0xb8, 0x95, 0x4a, 0x56, 0x1d, 0x1c, 0x61, 0x25, 0xab, 0x0e,
		0x7a, 0xac, 0x64, 0x5d, 0x5f, 0xf5, 0xd6, 0x92, 0xbf, 0xd5, 0x60, 0x3f, 0x48, 0x8a, 0x95, 0x9c,
		0xb0, 0x35, 0x32, 0x16, 0x09, 0x88, 0x8f, 0x03, 0x98, 0x2a, 0x77, 0xf6, 0xd8, 0x81, 0xa9, 0x6a,
		0xe7, 0xbb, 0x01, 0x93, 0x3f, 0xe8, 0xb4, 0xa6, 0x8c, 0xf8, 0x24, 0xbf, 0xfb, 0x26, 0xbd, 0x7b,
		0x1c, 0x3a, 0x31, 0xe7, 0x37, 0xec, 0xb9, 0xad, 0xf3, 0xe1, 0x04, 0x7f, 0x28, 0xf1, 0xc9, 0x64,
		0xc3, 0x9c, 0xcb, 0xd6, 0x92, 0xd6, 0xcf, 0x2e, 0x8e, 0xef, 0x6b, 0x3b, 0x1e, 0x99, 0x3e, 0xef,
		0x17, 0x66, 0x4c, 0x62, 0xbe, 0x68, 0x4e, 0x01, 0x5c, 0xc7, 0xa5, 0xd5, 0x68, 0x3f, 0xed, 0x56,
		0x90, 0xe4, 0xf9, 0xba, 0x45, 0x85, 0x94, 0x90, 0xec, 0xd7, 0x7f, 0xbc, 0x61, 0x4a, 0xb3, 0x5f,
		0xde, 0xbe, 0x21, 0x45, 0x47, 0x8a, 0x8e, 0x14, 0xdd, 0xa1, 0x14, 0xdd, 0xd5, 0x29, 0xa9, 0xb9,
		0xf5, 0x80, 0xb9, 0x08, 0xfd, 0x13, 0x2a, 0xb2, 0xc1, 0x7e, 0x4a, 0xee, 0xa5, 0x64, 0x22, 0x04,
		0x69, 0x45, 0x24, 0x40, 0xb3, 0x48, 0xe9, 0xbc, 0x9a, 0xb3, 0x25, 0x31, 0x83, 0x34, 0x1c, 0x69,
		0x38, 0xd2, 0x70, 0xa4, 0xe1, 0x7a, 0xd1, 0x70, 0x62, 0xc6, 0x27, 0x1e, 0x16, 0x5c, 0x3e, 0xcc,
		0x37, 0x53, 0xec, 0x1f, 0x7f, 0xbc, 0x75, 0x09, 0x3f, 0x92, 0x39, 0xba, 0xbc, 0xf2, 0xea, 0x2f,
		0x70, 0x32, 0x39, 0x61, 0x1f, 0xfe, 0xfc, 0xf5, 0x29, 0x7b, 0xff, 0xf7, 0x5f, 0xff, 0x7a, 0xc2,
		0x7e, 0x77, 0x14, 0x3c, 0x26, 0x3d, 0x47, 0x7a, 0x8e, 0xf4, 0xdc, 0xa1, 0xf4, 0xdc, 0xd9, 0x29,
		0x29, 0xba, 0xec, 0x25, 0x63, 0xe5, 0xdb, 0x7d, 0x6b, 0x39, 0xd2, 0x4f, 0xdd, 0x25, 0xd3, 0x85,
		0x11, 0x01, 0x8f, 0x59, 0x49, 0x97, 0x9d, 0x53, 0x27, 0x5a, 0x84, 0xd9, 0x41, 0x35, 0xe6, 0x56,
		0xd8, 0x34, 0x04, 0xd7, 0xaa, 0x23, 0x56, 0x72, 0xe2, 0x7e, 0x3a, 0x8a, 0x64, 0xd9, 0x47, 0xae,
		0xf1, 0x5a, 0x93, 0x65, 0x03, 0xa5, 0x74, 0x28, 0x24, 0xb7, 0x30, 0x34, 0x0b, 0x63, 0x61, 0xe6,
		0x9f, 0x87, 0xb4, 0x4b, 0x8a, 0x4b, 0x46, 0x0a, 0x96, 0xf5, 0x3d, 0xab, 0x99, 0x98, 0xdf, 0x4c,
		0x47, 0x91, 0x1c, 0xd4, 0xc8, 0x5a, 0x58, 0x16, 0xeb, 0xcc, 0x6a, 0x9d, 0x59, 0x0e, 0xcf, 0x7a,
		0x9e, 0x8a, 0x8d, 0xaa, 0x7c, 0xba, 0x57, 0xf9, 0x9c, 0xba, 0x4e, 0x5b, 0x5a, 0x84, 0xc3, 0xb1,
		0xb2, 0x56, 0xcd, 0x86, 0x31, 0x44, 0x16, 0x53, 0xbd, 0x33, 0x5a, 0x4e, 0x60, 0x55, 0x82, 0xa6,
		0x76, 0x05, 0x43, 0x31, 0xb7, 0xc3, 0x4c, 0x89, 0xdf, 0x79, 0xfd, 0xcf, 0xce, 0x3a, 0xa0, 0x32,
		0x7d, 0xb6, 0x56, 0x01, 0xd7, 0x02, 0x6c, 0xb9, 0x06, 0xd7, 0xec, 0xec, 0x88, 0xbb, 0x7a, 0x29,
		0x2d, 0x40, 0xe6, 0xa1, 0xdd, 0xe1, 0x37, 0x7f, 0xcd, 0xbd, 0x49, 0x86, 0x2c, 0x76, 0x28, 0x42,
		0xc9, 0x19, 0xfe, 0x87, 0x13, 0x0d, 0x60, 0x9c, 0x3b, 0xe7, 0x7f, 0x87, 0xff, 0x64, 0x49, 0xcc,
		0x25, 0xb0, 0x20, 0x56, 0xc1, 0xcd, 0x57, 0x61, 0x80, 0x45, 0x5a, 0xcd, 0xdc, 0x1f, 0xcf, 0x99,
		0xfa, 0x2f, 0xf7, 0x6b, 0x96, 0x28, 0x23, 0xee, 0x4d, 0x97, 0x2c, 0x52, 0xf0, 0x9d, 0x14, 0x3c,
		0x5e, 0x69, 0x0b, 0x69, 0x5f, 0x5c, 0x20, 0xd4, 0xf5, 0xc5, 0xbd, 0xcd, 0xfe, 0xfc, 0xe9, 0xec,
		0xec, 0xfc, 0xfc, 0xf2, 0xec, 0xf4, 0xfc, 0xc5, 0xd5, 0xf3, 0x8b, 0xcb, 0xcb, 0xe7, 0x57, 0xa7,
		0x77, 0x99, 0xfc, 0x98, 0xf1, 0xd0, 0xf1, 0xa5, 0x83, 0xee, 0xae, 0xd1, 0x25, 0x25, 0x88, 0xf6,
		0x00, 0x16, 0x08, 0x80, 0xc0, 0x82, 0xc2, 0xc7, 0x0c, 0x01, 0x96, 0xca, 0x7d, 0xe3, 0x68, 0x58,
		0x9e, 0x06, 0xd9, 0x78, 0xc1, 0x46, 0xa7, 0x30, 0xbc, 0x24, 0xd5, 0x4f, 0xb6, 0x3d, 0xc1, 0x04,
		0xc1, 0x04, 0xc1, 0xc4, 0x71, 0xc2, 0xc4, 0xc2, 0x1f, 0x26, 0x16, 0x1d, 0x60, 0xe2, 0x9f, 0xd5,
		0x30, 0x51, 0x7a, 0x10, 0x09, 0x25, 0x08, 0x25, 0x08, 0x25, 0x08, 0x25, 0x08, 0x25, 0x8e, 0x1b,
		0x25, 0xbe, 0xfb, 0xa3, 0xc4, 0xf7, 0x0e, 0x28, 0xf1, 0xaf, 0x4a, 0x94, 0x80, 0x18, 0xe6, 0x4b,
		0xe7, 0x53, 0x00, 0xd2, 0x8a, 0x19, 0x58, 0x0d, 0x86, 0xfd, 0x45, 0x15, 0x51, 0xf6, 0xbf, 0x12,
		0x6e, 0x90, 0x63, 0x89, 0xb0, 0x80, 0xb0, 0x80, 0xb0, 0xa0, 0x67, 0x2c, 0x40, 0x85, 0x9d, 0x3d,
		0xaa, 0xfe, 0x96, 0x63, 0x5b, 0xab, 0xff, 0xfc, 0x45, 0xc9, 0xb7, 0x1a, 0xb0, 0x27, 0x15, 0xeb,
		0x53, 0x1d, 0xd8, 0xaf, 0x92, 0x6d, 0xae, 0x16, 0xf4, 0xd4, 0xb2, 0xd8, 0xc4, 0x93, 0x03, 0x15,
		0x5a, 0x0f, 0x8b, 0x6b, 0xe8, 0x96, 0x4d, 0x8b, 0x5a, 0x32, 0x52, 0x58, 0x7d, 0xa9, 0x61, 0xbe,
		0x8d, 0xcb, 0xba, 0xea, 0x2f, 0x6f, 0xd5, 0xfe, 0x2d, 0xe6, 0x4c, 0x4b, 0x85, 0xde, 0x12, 0xcc,
		0x1b, 0x6f, 0x58, 0xac, 0x30, 0x6d, 0xca, 0x06, 0x73, 0x01, 0x9f, 0x81, 0xe6, 0x86, 0xb2, 0x64,
		0xee, 0x41, 0x96, 0x8c, 0x4f, 0x91, 0xe3, 0xce, 0xaa, 0xb6, 0x17, 0x3b, 0xd6, 0xb1, 0x09, 0xaa,
		0xe8, 0x91, 0x4c, 0xdb, 0x47, 0x69, 0xda, 0xd2, 0xcd, 0x42, 0xc7, 0x69, 0xa7, 0xdd, 0xde, 0xcd,
		0x42, 0xbe, 0x45, 0x9a, 0x64, 0xbd, 0x36, 0x7a, 0x32, 0xbc, 0x8a, 0x3c, 0x77, 0x95, 0x7b, 0x7b,
		0xb1, 0x67, 0x9d, 0x76, 0xef, 0x5a, 0xf4, 0x49, 0x8a, 0x9e, 0x14, 0x3d, 0x29, 0xfa, 0x47, 0xa7,
		0xe8, 0xaf, 0xe8, 0x06, 0xb9, 0x3e, 0xd4, 0x7c, 0x73, 0x09, 0xd8, 0xae, 0xe7, 0xb0, 0xa1, 0x14,
		0xac, 0x4e, 0xb1, 0xf7, 0x54, 0x12, 0x46, 0x7a, 0x9e, 0xf4, 0x3c, 0xe9, 0xf9, 0x47, 0xa7, 0xe7,
		0xcf, 0xe8, 0xaa, 0xd0, 0x5e, 0x14, 0x7d, 0x6b, 0x09, 0xdc, 0x8e, 0xe4, 0x79, 0x38, 0x1e, 0xd9,
		0x41, 0x4b, 0xe2, 0x3c, 0x9d, 0x7e, 0xa4, 0xf1, 0x8f, 0x59, 0xe3, 0x7b, 0x5f, 0x18, 0x8a, 0x2f,
		0xb9, 0xdb, 0xd9, 0x23, 0x6c, 0xe9, 0x5d, 0x1d, 0x0b, 0x77, 0x2f, 0xc1, 0x43, 0x1a, 0x29, 0x68,
		0xd6, 0xed, 0xc2, 0xc2, 0x1d, 0x59, 0xb9, 0x2b, 0x4b, 0xef, 0xcd, 0xda, 0x7b, 0xb3, 0x78, 0x77,
		0x56, 0x47, 0x2a, 0x72, 0xcf, 0xbd, 0x42, 0x24, 0x76, 0xe1, 0x0d, 0xa5, 0x9d, 0xdd, 0xc5, 0x95,
		0xfa, 0xed, 0xe8, 0x58, 0x84, 0xf7, 0x0c, 0x57, 0xfa, 0xb7, 0xfa, 0xb4, 0x2e, 0x25, 0x80, 0x4b,
		0xea, 0x7d, 0x4b, 0x01, 0x97, 0x13, 0xed, 0x55, 0x12, 0xb8, 0x9c, 0xa5, 0x43, 0x69, 0x60, 0x07,
		0x13, 0x8a, 0x75, 0x2b, 0x15, 0x5c, 0x92, 0xee, 0x57, 0x32, 0xb8, 0x39, 0x4d, 0xb7, 0xd2, 0xc1,
		0x95, 0x1d, 0x82, 0x2d, 0x21, 0xc4, 0xc9, 0x64, 0x9f, 0x66, 0x98, 0x4f, 0x5b, 0x06, 0x5c, 0xa9,
		0xe1, 0x8e, 0xb0, 0x62, 0x4a, 0x0e, 0xeb, 0xd0, 0xea, 0x56, 0x4a, 0x0f, 0x09, 0xd8, 0x08, 0xd8,
		0x7a, 0x04, 0x29, 0xdf, 0x0c, 0xb4, 0x6d, 0xb6, 0xc3, 0xa0, 0x13, 0x2e, 0x23, 0x0d, 0x7f, 0xd4,
		0xdf, 0xeb, 0xc8, 0xbf, 0x73, 0xce, 0xdd, 0x3b, 0x53, 0xad, 0xb7, 0xf3, 0x6f, 0xd5, 0x39, 0x18,
		0x95, 0xb9, 0xd6, 0x11, 0xe0, 0x3a, 0xfb, 0x0a, 0x3c, 0xd6, 0xf2, 0xf2, 0x88, 0xd6, 0x12, 0xe7,
		0x53, 0xc0, 0xc3, 0x1f, 0x6e, 0xf4, 0xe7, 0x5b, 0x04, 0xcb, 0x0e, 0x00, 0xf9, 0x6d, 0x8f, 0x0b,
		0xe2, 0x7b, 0x2a, 0xbd, 0x24, 0xe8, 0x23, 0xe8, 0xbb, 0xe3, 0x33, 0x1d, 0xc1, 0x25, 0xc1, 0x25,
		0xc1, 0xe5, 0x63, 0x83, 0xcb, 0x05, 0x1e, 0x2e, 0x17, 0x7b, 0xc0, 0x65, 0x3f, 0x25, 0xa8, 0x84,
		0x96, 0x84, 0x96, 0x84, 0x96, 0x84, 0x96, 0x84, 0x96, 0x84, 0x96, 0xb7, 0x8a, 0x96, 0xdf, 0xf1,
		0x68, 0xf9, 0x7d, 0x0f, 0xb4, 0x3c, 0x54, 0x29, 0x2e, 0xe1, 0x27, 0xe1, 0x27, 0x61, 0x21, 0x61,
		0x21, 0x61, 0x21, 0x61, 0x61, 0x87, 0x11, 0x6d, 0xe9, 0x38, 0x88, 0x12, 0xe4, 0x25, 0x8d, 0x77,
		0x29, 0x32, 0x5e, 0xb4, 0xb1, 0xa5, 0xc9, 0x3d, 0x43, 0x0a, 0xa6, 0x54, 0xf9, 0x30, 0xa0, 0xe2,
		0x57, 0xba, 0x8c, 0x44, 0x95, 0x7d, 0x13, 0x0c, 0xdb, 0xca, 0x4d, 0xfd, 0x4a, 0x9c, 0x97, 0xe3,
		0xbd, 0x4b, 0x9d, 0x8b, 0x9f, 0x3d, 0x13, 0x0f, 0x99, 0x7f, 0xe5, 0x73, 0xf1, 0x73, 0x73, 0x01,
		0x74, 0xfb, 0xf2, 0x35, 0xe5, 0x57, 0xe6, 0xef, 0xde, 0x74, 0x57, 0xd4, 0xae, 0x15, 0xb5, 0x24,
		0xc1, 0x65, 0x58, 0xda, 0x29, 0xe4, 0x55, 0x52, 0x2a, 0x72, 0xc1, 0x7c, 0x21, 0x23, 0xd0, 0x19,
		0x27, 0xb3, 0xc6, 0xaa, 0x6b, 0xa4, 0x65, 0x49, 0xe9, 0x94, 0x87, 0xb1, 0x10, 0xef, 0x41, 0x02,
		0xfd, 0x21, 0xc4, 0xc3, 0x72, 0x8b, 0xa8, 0x33, 0xc9, 0x87, 0x23, 0x5b, 0x70, 0x03, 0x0f, 0x99,
		0x92, 0xf1, 0x82, 0x71, 0x6b, 0xb5, 0x18, 0xa7, 0x16, 0x4c, 0x29, 0x22, 0xb9, 0x60, 0xb0, 0x21,
		0x4b, 0x54, 0x92, 0xc6, 0xdc, 0x42, 0xc8, 0xc6, 0x0b, 0xc6, 0x43, 0x9e, 0x58, 0xd0, 0x79, 0x5a,
		0x0c, 0x97, 0x3c, 0x5e, 0x58, 0x11, 0x18, 0x06, 0x72, 0x22, 0x64, 0xef, 0x49, 0xc9, 0x67, 0x24,
		0x45, 0x47, 0x23, 0x45, 0xde, 0x49, 0xc9, 0xa0, 0xb5, 0xd2, 0x78, 0xc7, 0x42, 0x4e, 0xd6, 0xcd,
		0xb9, 0xb0, 0xde, 0xe0, 0x40, 0x45, 0xcc, 0x4d, 0xc5, 0x44, 0xc4, 0x72, 0x73, 0xc5, 0x92, 0xfb,
		0x80, 0xdc, 0x07, 0xb7, 0xe7, 0x3e, 0xf0, 0x06, 0x0f, 0x24, 0x88, 0xf4, 0xeb, 0xfa, 0x73, 0x32,
		0x32, 0x34, 0x42, 0x62, 0x94, 0xdc, 0x86, 0xac, 0x16, 0xc4, 0x1d, 0x25, 0x96, 0xdb, 0xbc, 0xa0,
		0xc5, 0x8a, 0x19, 0x14, 0x02, 0x1b, 0x73, 0x63, 0x59, 0x9a, 0x64, 0x7f, 0x0a, 0x49, 0x64, 0x49,
		0x64, 0x49, 0x64, 0x77, 0xed, 0xc1, 0xd4, 0xe0, 0xa5, 0xb5, 0xa0, 0xeb, 0x26, 0xa8, 0x39, 0xf1,
		0xa6, 0x4d, 0x48, 0xc2, 0x49, 0xc2, 0xf9, 0xa8, 0x84, 0xf3, 0xa8, 0x5d, 0x3f, 0x3e, 0xe7, 0x3e,
		0xbc, 0xdf, 0xe7, 0x83, 0x9b, 0xf5, 0x00, 0xa7, 0xda, 0xb9, 0x08, 0x41, 0xf9, 0x9f, 0x6a, 0xf3,
		0xe1, 0xc8, 0xee, 0x09, 0xab, 0xb3, 0xac, 0x86, 0xfc, 0xe4, 0x6a, 0x15, 0x73, 0x33, 0x31, 0x63,
		0x35, 0xf0, 0x19, 0x55, 0xcf, 0xd2, 0x41, 0x75, 0x50, 0x88, 0x18, 0x12, 0x4d, 0x1d, 0x55, 0x37,
		0x2c, 0xcd, 0x10, 0x34, 0x23, 0xcf, 0xb8, 0xb1, 0x83, 0x13, 0x92, 0x70, 0x95, 0x70, 0x75, 0xe7,
		0x35, 0x6e, 0x37, 0x4d, 0x6c, 0x0f, 0x2c, 0x46, 0xd0, 0x20, 0x3b, 0x8d, 0x94, 0xff, 0xee, 0x2a,
		0x3a, 0x3e, 0xba, 0xff, 0xf1, 0xdb, 0xbb, 0x0a, 0x86, 0x8f, 0x4e, 0x4f, 0x29, 0xf8, 0x5d, 0xf3,
		0xef, 0x33, 0x42, 0x62, 0xde, 0x73, 0x6b, 0x41, 0x4b, 0xb4, 0xc8, 0x0c, 0xfe, 0xcd, 0x87, 0xdf,
		0x5f, 0x0e, 0xff, 0x75, 0x3a, 0xfc, 0xe9, 0xd3, 0xa7, 0x93, 0x67, 0x5f, 0xae, 0x87, 0x9f, 0xff,
		0x7b, 0x70, 0x94, 0xa9, 0x6a, 0x45, 0xe0, 0xcf, 0x62, 0x54, 0xd7, 0x76, 0xd4, 0xd0, 0x11, 0x77,
		0x83, 0xee, 0x1c, 0xa7, 0x18, 0x66, 0x06, 0x42, 0x69, 0x42, 0xe9, 0xbb, 0x41, 0xe9, 0xc7, 0xd0,
		0xce, 0x22, 0x12, 0x31, 0x74, 0x6e, 0x61, 0xe1, 0x75, 0x08, 0xac, 0x24, 0x3f, 0xcb, 0xc3, 0x4d,
		0x73, 0x11, 0x74, 0x7a, 0xfa, 0xb9, 0x7b, 0x3a, 0x9f, 0x25, 0x31, 0x1c, 0x6d, 0xe3, 0x8b, 0xe2,
		0xeb, 0x5a, 0xa3, 0xaf, 0x95, 0xc4, 0x6e, 0x5b, 0xba, 0x75, 0xca, 0x28, 0x96, 0xe5, 0x9a, 0x9d,
		0x77, 0x21, 0xce, 0x77, 0xf4, 0x9a, 0x8d, 0x8e, 0xbd, 0x41, 0xc6, 0x51, 0xfb, 0x92, 0x7c, 0xbc,
		0x2d, 0x78, 0x5f, 0xd2, 0x9f, 0x6e, 0xd6, 0x5b, 0xb9, 0x2e, 0xe4, 0x37, 0x58, 0xf8, 0xa4, 0x09,
		0x0d, 0xde, 0x0a, 0x63, 0x5f, 0x5a, 0xdb, 0xd2, 0xac, 0xff, 0x9d, 0x90, 0xaf, 0x63, 0xc8, 0xf0,
		0xa3, 0xc5, 0xc2, 0xcc, 0xac, 0xe1, 0xb5, 0x91, 0xa3, 0xab, 0x8b, 0x8b, 0x17, 0x97, 0x17, 0x17,
		0xa7, 0x97, 0xe7, 0x97, 0xa7, 0x3f, 0x3d, 0x7f, 0x3e, 0x7a, 0x31, 0x7a, 0xde, 0x40, 0xfc, 0xbb,
		0x0e, 0x41, 0x43, 0xf8, 0x73, 0xf6, 0xea, 0x32, 0x8d, 0xe3, 0xbb, 0xbd, 0x3c, 0xa3, 0xd5, 0x17,
		0x81, 0xda, 0x7c, 0xef, 0x8b, 0x33, 0x9e, 0x34, 0x7c, 0x6c, 0xb9, 0xad, 0xe5, 0x3b, 0xee, 0x6e,
		0x6c, 0xf3, 0x86, 0xb6, 0x6f, 0x64, 0xa7, 0x0d, 0x6c, 0xde, 0xb8, 0xed, 0x6f, 0x68, 0xd9, 0x28,
		0xef, 0x0d, 0x1a, 0x54, 0x5d, 0x31, 0xe2, 0xb3, 0x23, 0x9b, 0x5b, 0xb1, 0x5a, 0xf0, 0xb5, 0x17,
		0x1d, 0x58, 0xcd, 0xa3, 0x48, 0x04, 0xc3, 0x20, 0xe6, 0xc6, 0x88, 0x48, 0xd4, 0x34, 0x40, 0x5c,
		0xcb, 0x41, 0xad, 0x1c, 0xbf, 0xf5, 0xe9, 0x5b, 0xc6, 0x74, 0x6e, 0xea, 0xa6, 0x1a, 0x9c, 0x17,
		0xec, 0x65, 0x92, 0xc4, 0x05, 0x1d, 0xb3, 0x8a, 0x15, 0x33, 0x2d, 0x58, 0x31, 0xf5, 0xf6, 0x5c,
		0xd5, 0xae, 0xd9, 0x5a, 0xf3, 0xb9, 0xc9, 0x4c, 0x5e, 0x99, 0xc3, 0x01, 0xaf, 0x5a, 0xd5, 0x16,
		0xb3, 0xd7, 0xdb, 0xbc, 0xf5, 0x36, 0x63, 0x37, 0xcd, 0xd5, 0x80, 0x0f, 0x90, 0x62, 0x52, 0xe7,
		0xfa, 0x1c, 0x6c, 0x6e, 0xcf, 0x90, 0xaf, 0x96, 0xbc, 0xfd, 0x5a, 0x9a, 0x06, 0x5a, 0xbf, 0xab,
		0x6a, 0x82, 0x62, 0xbb, 0x79, 0x99, 0x9f, 0x53, 0xec, 0x2c, 0x6b, 0x64, 0x1a, 0x4f, 0x5f, 0x7c,
		0xcf, 0xd7, 0xd7, 0x54, 0x32, 0x02, 0xf6, 0x1c, 0x74, 0xdb, 0xd7, 0xd7, 0x54, 0x31, 0x4a, 0x37,
		0xf8, 0xf4, 0xb8, 0xbe, 0xa6, 0x30, 0x0e, 0xbd, 0x6f, 0xae, 0xf1, 0x30, 0x95, 0x77, 0xf4, 0xc3,
		0xb2, 0x97, 0xa4, 0x54, 0x21, 0x30, 0xbf, 0x39, 0x8e, 0x22, 0x43, 0xb7, 0x91, 0x7d, 0xee, 0x6b,
		0xc8, 0xa6, 0x89, 0xbd, 0xfa, 0x31, 0x6b, 0x0f, 0x7b, 0x8d, 0x2f, 0xee, 0x38, 0x8c, 0x39, 0x06,
		0xe3, 0x8e, 0xbf, 0xdd, 0x8e, 0xbd, 0xf9, 0x89, 0x35, 0x48, 0x52, 0xcc, 0x51, 0xde, 0x1d, 0x53,
		0x27, 0x38, 0x1a, 0x77, 0x36, 0x9d, 0x27, 0xe9, 0xa0, 0xdf, 0xb8, 0x3f, 0xfa, 0x20, 0xea, 0xbe,
		0x15, 0xe5, 0x55, 0x77, 0x5f, 0x8a, 0x3a, 0xaf, 0xba, 0xef, 0xbc, 0x66, 0xe7, 0xb7, 0x73, 0xa8,
		0xeb, 0x14, 0x27, 0x9f, 0xa9, 0x10, 0x62, 0x7f, 0x45, 0x9b, 0x0f, 0xc7, 0xe9, 0xd9, 0xd7, 0xd2,
		0x82, 0x66, 0x8e, 0xd2, 0x15, 0x47, 0x9c, 0xb0, 0xb7, 0xc0, 0xe7, 0xc0, 0xc6, 0x31, 0x97, 0x37,
		0xe5, 0x7d, 0x32, 0x99, 0x89, 0x16, 0x42, 0xc4, 0xd3, 0xd8, 0xe6, 0x43, 0x4f, 0x3e, 0xc9, 0x37,
		0x72, 0xce, 0x63, 0x11, 0xb2, 0x39, 0x8f, 0x53, 0x30, 0xec, 0xab, 0x88, 0x63, 0x36, 0x06, 0x26,
		0x26, 0x52, 0x69, 0x08, 0xf3, 0xbc, 0xbe, 0x35, 0xb2, 0xad, 0x61, 0xa9, 0x81, 0x90, 0x09, 0x69,
		0x2c, 0xf0, 0xf0, 0xe4, 0x93, 0xfc, 0x38, 0x15, 0x86, 0x09, 0xc3, 0xb8, 0x64, 0xf0, 0xcd, 0xf9,
		0x00, 0x32, 0xcd, 0xcf, 0x59, 0xac, 0x94, 0x81, 0x78, 0xc1, 0x02, 0x95, 0x26, 0x71, 0x36, 0x6b,
		0x19, 0xd5, 0x3f, 0x61, 0x2e, 0x39, 0xa1, 0x9c, 0x96, 0x6b, 0x60, 0x12, 0x20, 0x84, 0x90, 0x8d,
		0x21, 0x56, 0x5f, 0x3f, 0x49, 0xab, 0x98, 0x99, 0xaa, 0xaf, 0xee, 0x1d, 0x78, 0x60, 0x53, 0x1e,
		0x33, 0x0d, 0x26, 0x7b, 0x93, 0x22, 0x8d, 0x69, 0xc3, 0x22, 0x21, 0x60, 0x79, 0xb8, 0xc0, 0x42,
		0x77, 0x27, 0x34, 0x87, 0xdf, 0xe8, 0xee, 0x84, 0x9d, 0x25, 0xa1, 0xbb, 0x13, 0xfa, 0x83, 0xaf,
		0x21, 0xb2, 0x84, 0x69, 0x9d, 0xa8, 0x6b, 0x21, 0x53, 0x89, 0x0a, 0x63, 0x95, 0x5a, 0xa7, 0xec,
		0xdd, 0xa4, 0x86, 0x79, 0xcd, 0x7a, 0x14, 0x05, 0x4a, 0xa4, 0xeb, 0x3b, 0xe9, 0x7a, 0xef, 0xbc,
		0xaf, 0x4c, 0x5c, 0xe7, 0x30, 0xcc, 0x99, 0xad, 0x08, 0x58, 0x20, 0x03, 0xca, 0xbb, 0x53, 0x74,
		0xef, 0x8a, 0xe2, 0x6e, 0x76, 0x5a, 0xaf, 0x4d, 0xcd, 0x0d, 0x32, 0x21, 0x9d, 0xf9, 0x55, 0x1a,
		0x4d, 0x99, 0x41, 0x23, 0xd9, 0x14, 0xf4, 0xc3, 0x88, 0x3f, 0x7b, 0xf1, 0x78, 0x57, 0x5e, 0xdf,
		0x9b, 0xe7, 0xf7, 0xe6, 0xfd, 0xee, 0x32, 0x80, 0xd4, 0xed, 0x54, 0x1a, 0xb1, 0x2b, 0xd2, 0x5e,
		0xd7, 0x6f, 0x36, 0x8b, 0xb4, 0xc7, 0x5d, 0x9c, 0x4d, 0x22, 0x4d, 0x12, 0x4c, 0x12, 0x4c, 0x12,
		0xdc, 0x13, 0xae, 0xf7, 0x15, 0xf3, 0x7e, 0x56, 0x1d, 0xab, 0x7a, 0x56, 0x1f, 0xdf, 0x78, 0xe6,
		0x6f, 0x8f, 0xb2, 0xfa, 0x28, 0xdc, 0x97, 0x8f, 0xf9, 0x73, 0x7f, 0xd9, 0x78, 0xce, 0x97, 0xcd,
		0x1f, 0xd7, 0x82, 0x60, 0x5f, 0xde, 0x65, 0x4f, 0x3d, 0x58, 0xfd, 0x45, 0xa2, 0x21, 0x10, 0x06,
		0x75, 0xab, 0xd9, 0x8a, 0x84, 0xfc, 0xf8, 0x64, 0x82, 0x93, 0x1f, 0x7f, 0x0f, 0x3f, 0x7e, 0x94,
		0x5c, 0xa1, 0xfd, 0xf8, 0x51, 0x32, 0x7a, 0x81, 0x76, 0xe4, 0x47, 0xc9, 0xf9, 0xd9, 0x9d, 0x7b,
		0xf2, 0xdd, 0x9b, 0xe3, 0x1c, 0xf3, 0xee, 0xbd, 0x51, 0x39, 0x60, 0x6e, 0x4d, 0x7d, 0x13, 0xbf,
		0x0e, 0xe8, 0xcb, 0xbf, 0xd5, 0xac, 0x1d, 0x3c, 0x98, 0xe1, 0x13, 0x7a, 0xb0, 0xc0, 0xe5, 0x9d,
		0xea, 0x53, 0x91, 0x6a, 0x51, 0x84, 0x0a, 0xda, 0xb3, 0x11, 0xca, 0x81, 0x7e, 0xa9, 0x07, 0x33,
		0xae, 0x6f, 0x36, 0x42, 0x11, 0x8d, 0xc9, 0x4d, 0x2d, 0xd8, 0x43, 0xa9, 0x06, 0x7d, 0xa6, 0x1a,
		0xb4, 0xea, 0xff, 0xd5, 0xa5, 0xaa, 0xc0, 0x23, 0x0d, 0x51, 0xd3, 0x6a, 0x95, 0xba, 0xbe, 0xa1,
		0x95, 0xe2, 0xe0, 0x7d, 0x29, 0x44, 0x46, 0x07, 0xd7, 0xab, 0x6c, 0x37, 0x1d, 0x5c, 0x97, 0x85,
		0xb4, 0xcb, 0xff, 0x0e, 0x45, 0xb8, 0x1f, 0x33, 0x5b, 0x08, 0xf0, 0x89, 0x36, 0xd5, 0x64, 0x1d,
		0x73, 0x6c, 0xe6, 0x30, 0x15, 0x41, 0x9c, 0x31, 0x7e, 0x31, 0x29, 0xa5, 0xd7, 0x50, 0x7a, 0x0d,
		0x99, 0xe5, 0x64, 0x96, 0x93, 0x59, 0x5e, 0x61, 0x96, 0x53, 0x7a, 0x4d, 0x13, 0x05, 0xa5, 0xd7,
		0x50, 0x7a, 0x0d, 0xa5, 0xd7, 0x10, 0xb0, 0xf4, 0x00, 0x16, 0x94, 0x5e, 0xd3, 0x40, 0x47, 0xe9,
		0x35, 0xc7, 0xb5, 0x28, 0x94, 0x5e, 0x43, 0xe9, 0x35, 0xa4, 0xeb, 0x3d, 0xcf, 0xae, 0xcb, 0x81,
		0x94, 0x5e, 0xb3, 0x8f, 0xfd, 0xd2, 0x85, 0xb7, 0x3b, 0xf2, 0x78, 0x57, 0x5e, 0xdf, 0x9b, 0xe7,
		0xf7, 0xe6, 0xfd, 0xee, 0x32, 0x80, 0xd4, 0xed, 0x94, 0x5e, 0xc3, 0x28, 0xbd, 0x86, 0x24, 0x98,
		0x24, 0xf8, 0xa8, 0x25, 0xf8, 0xa8, 0xd3, 0x6b, 0x2a, 0xa3, 0x1a, 0x07, 0xcd, 0xac, 0x79, 0x55,
		0x3e, 0x91, 0x92, 0x6a, 0xc8, 0xc9, 0x42, 0xde, 0xfb, 0x87, 0xef, 0xbd, 0xa7, 0xa4, 0x9a, 0x56,
		0x12, 0x4a, 0xaa, 0xe9, 0x1b, 0xc2, 0x7a, 0xcb, 0xa7, 0xa9, 0x82, 0xab, 0xbd, 0xb2, 0x0f, 0xca,
		0x76, 0x2f, 0xed, 0x09, 0x07, 0xf5, 0x1d, 0x65, 0xaa, 0x90, 0x87, 0xb3, 0x58, 0x18, 0xe7, 0xe4,
		0xd7, 0x50, 0x34, 0x2e, 0x36, 0xcc, 0xaa, 0x22, 0xa7, 0xc6, 0x50, 0x82, 0xc1, 0x7d, 0x48, 0x30,
		0x28, 0x3b, 0x28, 0x69, 0x88, 0x10, 0x69, 0x06, 0xeb, 0x54, 0x58, 0xcf, 0x61, 0xd9, 0xe3, 0xda,
		0x2a, 0xc6, 0x59, 0x0b, 0xcb, 0x91, 0xc1, 0xf2, 0x00, 0x0c, 0x16, 0xbc, 0x11, 0xd2, 0x9e, 0xe1,
		0xb5, 0xa3, 0x4d, 0x3c, 0x2e, 0xcd, 0x6d, 0xc8, 0xf8, 0x5a, 0x6f, 0x24, 0x76, 0x80, 0xe3, 0x00,
		0x48, 0x3e, 0x8e, 0x01, 0x71, 0xad, 0x65, 0x49, 0x80, 0x93, 0xad, 0xf2, 0x2b, 0x4a, 0x0d, 0xec,
		0x62, 0xb5, 0x9e, 0x53, 0x91, 0x80, 0xd1, 0x89, 0xa0, 0x7a, 0x57, 0xc6, 0x4a, 0xc5, 0xc0, 0x51,
		0xa7, 0x81, 0xd1, 0x41, 0x6e, 0xbf, 0xd4, 0xc0, 0x67, 0xc3, 0x40, 0xa5, 0x1e, 0x06, 0xf2, 0xba,
		0x37, 0x66, 0x45, 0x85, 0x3c, 0x58, 0x67, 0x34, 0x99, 0x75, 0x93, 0xcf, 0x61, 0x98, 0x90, 0xcc,
		0x4e, 0x85, 0xf1, 0xbc, 0x21, 0xf6, 0xd5, 0x32, 0x83, 0xb9, 0x3d, 0x08, 0x3d, 0x18, 0x35, 0xb3,
		0xc8, 0x67, 0x12, 0x5e, 0x42, 0xc7, 0xe5, 0x4a, 0xa7, 0x42, 0xda, 0x2b, 0x84, 0x38, 0x3e, 0xf7,
		0x18, 0xfa, 0x07, 0x97, 0x13, 0xa0, 0x84, 0x89, 0xe3, 0x4f, 0x98, 0xb8, 0xa2, 0x74, 0x89, 0x83,
		0xf8, 0x0a, 0xb6, 0x3b, 0xca, 0xd6, 0x9b, 0x9f, 0xd4, 0x2b, 0xb8, 0xdd, 0x41, 0xd2, 0x7e, 0xaa,
		0x43, 0xfa, 0x44, 0x2a, 0x5b, 0xd6, 0xe2, 0xfc, 0x20, 0xb9, 0x21, 0xdc, 0xee, 0x05, 0x29, 0xc6,
		0xf9, 0xf9, 0x40, 0xde, 0x8b, 0x04, 0x62, 0x21, 0xdb, 0xcc, 0x6c, 0xaa, 0x24, 0xba, 0x45, 0xa7,
		0x87, 0x87, 0x39, 0x8c, 0xa8, 0x36, 0x6a, 0x37, 0x7f, 0x5b, 0xcc, 0x5e, 0x6c, 0x6f, 0x6b, 0xf8,
		0x66, 0x35, 0x1f, 0xa6, 0xd2, 0xd8, 0x5a, 0x7e, 0x1d, 0xe4, 0x17, 0x59, 0x07, 0xf5, 0x88, 0xed,
		0xf1, 0x61, 0xd9, 0x06, 0xf5, 0xcf, 0x27, 0xf9, 0x6b, 0x1d, 0x92, 0x53, 0xdc, 0x7b, 0x63, 0x59,
		0xe5, 0x49, 0x33, 0xaa, 0xf4, 0xd5, 0x9b, 0xfb, 0x99, 0x57, 0xff, 0x6b, 0xb4, 0xfe, 0xc3, 0x74,
		0xea, 0x9e, 0x29, 0x29, 0xac, 0xaa, 0x8c, 0x9c, 0xec, 0x74, 0xe9, 0x5e, 0x1b, 0xeb, 0xdb, 0xa1,
		0x5b, 0x45, 0xdb, 0x0d, 0xba, 0x43, 0x61, 0x92, 0x98, 0xbb, 0xc4, 0xf1, 0xfc, 0xbc, 0x94, 0x80,
		0x36, 0x4a, 0x9a, 0xa7, 0x65, 0xcd, 0x99, 0x79, 0xea, 0x52, 0xd4, 0xc7, 0x22, 0x58, 0x64, 0x3f,
		0x51, 0x03, 0x6f, 0x7f, 0x5d, 0x50, 0xdb, 0xc0, 0x9b, 0xea, 0x63, 0x1f, 0x1b, 0xaa, 0x3d, 0xe4,
		0xfa, 0x58, 0x8a, 0x50, 0x51, 0x84, 0x8a, 0x22, 0x54, 0xe4, 0x83, 0xa3, 0x08, 0x15, 0x45, 0xa8,
		0x48, 0xc0, 0x28, 0x42, 0x45, 0x11, 0x2a, 0x8a, 0x50, 0x91, 0xf0, 0x52, 0x84, 0x8a, 0x22, 0x54,
		0x14, 0xa1, 0xa2, 0x08, 0x15, 0x45, 0xa8, 0x7a, 0x88, 0x50, 0xad, 0x5c, 0x9d, 0x3d, 0x44, 0xa7,
		0xde, 0x2d, 0x27, 0xa3, 0xc8, 0x14, 0x39, 0x3b, 0x1e, 0x52, 0x64, 0xaa, 0x82, 0x3b, 0x73, 0x77,
		0xfe, 0xb0, 0x70, 0xe6, 0x0f, 0xc7, 0xe2, 0x06, 0x86, 0x1d, 0x3b, 0xda, 0xf9, 0x4f, 0xd5, 0xa5,
		0xcb, 0xdd, 0x7b, 0x37, 0xfb, 0x53, 0xf6, 0x67, 0x3e, 0x7d, 0x1e, 0x75, 0xf8, 0x59, 0xdc, 0x50,
		0xd3, 0x3b, 0x46, 0x4d, 0xef, 0xa8, 0x6c, 0x8e, 0x5c, 0x10, 0x54, 0x36, 0x57, 0x7f, 0xba, 0xa7,
		0xa6, 0x77, 0x2d, 0x14, 0xd4, 0xf4, 0x8e, 0x9a, 0xde, 0x51, 0xd3, 0x3b, 0x02, 0x96, 0x1e, 0xc0,
		0x82, 0x9a, 0xde, 0x3d, 0x6e, 0x0f, 0x19, 0x35, 0xbd, 0xeb, 0x11, 0xbe, 0xa8, 0xe9, 0x1d, 0xe9,
		0x7a, 0x6a, 0x7a, 0xd7, 0xc0, 0xb6, 0xd4, 0xf4, 0xce, 0x8b, 0x8c, 0x5a, 0x66, 0xed, 0x7b, 0x0a,
		0xa3, 0xa6, 0x77, 0x28, 0x91, 0xa6, 0xa6, 0x77, 0x24, 0xc1, 0x24, 0xc1, 0x0f, 0xb4, 0xe9, 0xdd,
		0x5a, 0xb8, 0xd1, 0x3b, 0xe8, 0xd1, 0x6f, 0x13, 0xbc, 0xb5, 0x18, 0x65, 0x1e, 0x18, 0x29, 0xc2,
		0x22, 0x3f, 0x8b, 0x1b, 0xa0, 0x8e, 0x78, 0xe4, 0x81, 0x21, 0xd7, 0xfe, 0x23, 0x72, 0xed, 0x53,
		0x47, 0xbc, 0x56, 0x12, 0xea, 0x88, 0x77, 0x68, 0x7c, 0xeb, 0x25, 0xdf, 0xc6, 0x0b, 0xcb, 0x06,
		0x54, 0x88, 0x4b, 0x85, 0xb8, 0x2d, 0x25, 0xae, 0x28, 0xb6, 0xab, 0x2d, 0xc0, 0x7d, 0xb2, 0xf6,
		0xd2, 0x75, 0x2f, 0x3b, 0x10, 0xe6, 0x6f, 0xfc, 0x06, 0xfe, 0x50, 0x6a, 0x77, 0x91, 0xb7, 0x3f,
		0x60, 0xb0, 0xfe, 0xa7, 0x8d, 0x97, 0x7b, 0x95, 0x9b, 0x31, 0xf9, 0x03, 0x9f, 0xfc, 0xf8, 0x0f,
		0x00, 0x00, 0x00, 0xff, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0xd3, 0xed, 0xee, 0x86, 0x08, 0x70,
		0x01, 0x00,
	}
)


// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
func initΛEnumTypes(){
  ΛEnumTypes = map[string][]reflect.Type{
	"/collision-detection/detection-application/device": []reflect.Type{
		reflect.TypeOf((E_IntelSca_CollisionDetection_DetectionApplication_Device)(0)),
	},
	"/collision-detection/detection-application/precision": []reflect.Type{
		reflect.TypeOf((E_IntelSca_CollisionDetection_DetectionApplication_Precision)(0)),
	},
	"/district/location/coordinate-system": []reflect.Type{
		reflect.TypeOf((E_IntelScaSource_District_Location_CoordinateSystem)(0)),
	},
	"/district/source/location/coordinate-system": []reflect.Type{
		reflect.TypeOf((E_IntelScaSource_District_Location_CoordinateSystem)(0)),
	},
	"/district/source/video/source-type": []reflect.Type{
		reflect.TypeOf((E_IntelScaSource_District_Source_Video_SourceType)(0)),
	},
	"/traffic-classification/classification-application/device": []reflect.Type{
		reflect.TypeOf((E_IntelSca_CollisionDetection_DetectionApplication_Device)(0)),
	},
	"/traffic-classification/classification-application/precision": []reflect.Type{
		reflect.TypeOf((E_IntelSca_CollisionDetection_DetectionApplication_Precision)(0)),
	},
	"/traffic-classification/detection-application/device": []reflect.Type{
		reflect.TypeOf((E_IntelSca_CollisionDetection_DetectionApplication_Device)(0)),
	},
	"/traffic-classification/detection-application/precision": []reflect.Type{
		reflect.TypeOf((E_IntelSca_CollisionDetection_DetectionApplication_Precision)(0)),
	},
	"/traffic-monitoring/person-vehicle-bike-detection-application/device": []reflect.Type{
		reflect.TypeOf((E_IntelSca_CollisionDetection_DetectionApplication_Device)(0)),
	},
	"/traffic-monitoring/person-vehicle-bike-detection-application/precision": []reflect.Type{
		reflect.TypeOf((E_IntelSca_CollisionDetection_DetectionApplication_Precision)(0)),
	},
  }
}

