// Package sra_0_2_x provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-app.roc.rocaas-tools/rocaas-cli version (devel) DO NOT EDIT.
package sra_0_2_x

import (
	"github.com/labstack/echo/v4"
	"github.com/onosproject/aether-roc-api/pkg/middleware/openapi3mw"
)

// SPDX-FileCopyrightText: 2022-present Intel Corporation
//
// SPDX-License-Identifier: LicenseRef-Intel

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// (PATCH /roc-api)
	PatchRocAPI(ctx echo.Context) error
	// GET /spec The OpenAPI specification for this service
	GetSpec(ctx echo.Context) error
	// GET /targets A list of just target names
	GetTargets(ctx echo.Context, typeId string) error
	// GET /retail-area List
	// (GET /sra/v0.2.x/{store-id}/retail-area)
	GetRetailAreaList(ctx echo.Context, storeId StoreId) error
	// DELETE /retail-area
	// (DELETE /sra/v0.2.x/{store-id}/retail-area/{area-id})
	DeleteRetailArea(ctx echo.Context, storeId StoreId, areaId string) error
	// GET /retail-area Container
	// (GET /sra/v0.2.x/{store-id}/retail-area/{area-id})
	GetRetailArea(ctx echo.Context, storeId StoreId, areaId string) error
	// POST /retail-area
	// (POST /sra/v0.2.x/{store-id}/retail-area/{area-id})
	PostRetailArea(ctx echo.Context, storeId StoreId, areaId string) error
	// DELETE /retail-area/{area-id}/location
	// (DELETE /sra/v0.2.x/{store-id}/retail-area/{area-id}/location)
	DeleteRetailAreaLocation(ctx echo.Context, storeId StoreId, areaId string) error
	// GET /retail-area/{area-id}/location Container
	// (GET /sra/v0.2.x/{store-id}/retail-area/{area-id}/location)
	GetRetailAreaLocation(ctx echo.Context, storeId StoreId, areaId string) error
	// POST /retail-area/{area-id}/location
	// (POST /sra/v0.2.x/{store-id}/retail-area/{area-id}/location)
	PostRetailAreaLocation(ctx echo.Context, storeId StoreId, areaId string) error
	// GET /retail-area/{area-id}/source List
	// (GET /sra/v0.2.x/{store-id}/retail-area/{area-id}/source)
	GetRetailAreaSourceList(ctx echo.Context, storeId StoreId, areaId string) error
	// DELETE /retail-area/{area-id}/source
	// (DELETE /sra/v0.2.x/{store-id}/retail-area/{area-id}/source/{source-id})
	DeleteRetailAreaSource(ctx echo.Context, storeId StoreId, areaId string, sourceId string) error
	// GET /retail-area/{area-id}/source Container
	// (GET /sra/v0.2.x/{store-id}/retail-area/{area-id}/source/{source-id})
	GetRetailAreaSource(ctx echo.Context, storeId StoreId, areaId string, sourceId string) error
	// POST /retail-area/{area-id}/source
	// (POST /sra/v0.2.x/{store-id}/retail-area/{area-id}/source/{source-id})
	PostRetailAreaSource(ctx echo.Context, storeId StoreId, areaId string, sourceId string) error
	// DELETE /retail-area/{area-id}/source/{source-id}/location
	// (DELETE /sra/v0.2.x/{store-id}/retail-area/{area-id}/source/{source-id}/location)
	DeleteRetailAreaSourceLocation(ctx echo.Context, storeId StoreId, areaId string, sourceId string) error
	// GET /retail-area/{area-id}/source/{source-id}/location Container
	// (GET /sra/v0.2.x/{store-id}/retail-area/{area-id}/source/{source-id}/location)
	GetRetailAreaSourceLocation(ctx echo.Context, storeId StoreId, areaId string, sourceId string) error
	// POST /retail-area/{area-id}/source/{source-id}/location
	// (POST /sra/v0.2.x/{store-id}/retail-area/{area-id}/source/{source-id}/location)
	PostRetailAreaSourceLocation(ctx echo.Context, storeId StoreId, areaId string, sourceId string) error
	// GET /retail-area/{area-id}/source/{source-id}/state Container
	// (GET /sra/v0.2.x/{store-id}/retail-area/{area-id}/source/{source-id}/state)
	GetRetailAreaSourceState(ctx echo.Context, storeId StoreId, areaId string, sourceId string) error
	// DELETE /retail-area/{area-id}/source/{source-id}/video
	// (DELETE /sra/v0.2.x/{store-id}/retail-area/{area-id}/source/{source-id}/video)
	DeleteRetailAreaSourceVideo(ctx echo.Context, storeId StoreId, areaId string, sourceId string) error
	// GET /retail-area/{area-id}/source/{source-id}/video Container
	// (GET /sra/v0.2.x/{store-id}/retail-area/{area-id}/source/{source-id}/video)
	GetRetailAreaSourceVideo(ctx echo.Context, storeId StoreId, areaId string, sourceId string) error
	// POST /retail-area/{area-id}/source/{source-id}/video
	// (POST /sra/v0.2.x/{store-id}/retail-area/{area-id}/source/{source-id}/video)
	PostRetailAreaSourceVideo(ctx echo.Context, storeId StoreId, areaId string, sourceId string) error
	// DELETE /shelf-monitoring
	// (DELETE /sra/v0.2.x/{store-id}/shelf-monitoring)
	DeleteShelfMonitoring(ctx echo.Context, storeId StoreId) error
	// GET /shelf-monitoring Container
	// (GET /sra/v0.2.x/{store-id}/shelf-monitoring)
	GetShelfMonitoring(ctx echo.Context, storeId StoreId) error
	// POST /shelf-monitoring
	// (POST /sra/v0.2.x/{store-id}/shelf-monitoring)
	PostShelfMonitoring(ctx echo.Context, storeId StoreId) error
	// GET /shelf-monitoring/default/values Leafref
	// (GET /sra/v0.2.x/{store-id}/shelf-monitoring/default/values)
	GetShelfMonitoringDefaultValuesLeafref(ctx echo.Context, storeId StoreId) error
	// DELETE /shelf-monitoring/object-detection-application
	// (DELETE /sra/v0.2.x/{store-id}/shelf-monitoring/object-detection-application)
	DeleteShelfMonitoringObjectDetectionApplication(ctx echo.Context, storeId StoreId) error
	// GET /shelf-monitoring/object-detection-application Container
	// (GET /sra/v0.2.x/{store-id}/shelf-monitoring/object-detection-application)
	GetShelfMonitoringObjectDetectionApplication(ctx echo.Context, storeId StoreId) error
	// POST /shelf-monitoring/object-detection-application
	// (POST /sra/v0.2.x/{store-id}/shelf-monitoring/object-detection-application)
	PostShelfMonitoringObjectDetectionApplication(ctx echo.Context, storeId StoreId) error
	// GET /shelf-monitoring/object-detection-application/model-state Container
	// (GET /sra/v0.2.x/{store-id}/shelf-monitoring/object-detection-application/model-state)
	GetShelfMonitoringObjectDetectionApplicationModelState(ctx echo.Context, storeId StoreId) error
	// GET /shelf-monitoring/retail-area List
	// (GET /sra/v0.2.x/{store-id}/shelf-monitoring/retail-area)
	GetShelfMonitoringRetailAreaList(ctx echo.Context, storeId StoreId) error
	// DELETE /shelf-monitoring/retail-area
	// (DELETE /sra/v0.2.x/{store-id}/shelf-monitoring/retail-area/{area-ref})
	DeleteShelfMonitoringRetailArea(ctx echo.Context, storeId StoreId, areaRef string) error
	// GET /shelf-monitoring/retail-area Container
	// (GET /sra/v0.2.x/{store-id}/shelf-monitoring/retail-area/{area-ref})
	GetShelfMonitoringRetailArea(ctx echo.Context, storeId StoreId, areaRef string) error
	// POST /shelf-monitoring/retail-area
	// (POST /sra/v0.2.x/{store-id}/shelf-monitoring/retail-area/{area-ref})
	PostShelfMonitoringRetailArea(ctx echo.Context, storeId StoreId, areaRef string) error
	// GET /shelf-monitoring/retail-area/{area-ref}/area-ref/values Leafref
	// (GET /sra/v0.2.x/{store-id}/shelf-monitoring/retail-area/{area-ref}/area-ref/values)
	GetShelfMonitoringRetailAreaAreaRefValuesLeafref(ctx echo.Context, storeId StoreId, areaRef string) error
	// DELETE /shopper-monitoring
	// (DELETE /sra/v0.2.x/{store-id}/shopper-monitoring)
	DeleteShopperMonitoring(ctx echo.Context, storeId StoreId) error
	// GET /shopper-monitoring Container
	// (GET /sra/v0.2.x/{store-id}/shopper-monitoring)
	GetShopperMonitoring(ctx echo.Context, storeId StoreId) error
	// POST /shopper-monitoring
	// (POST /sra/v0.2.x/{store-id}/shopper-monitoring)
	PostShopperMonitoring(ctx echo.Context, storeId StoreId) error
	// GET /shopper-monitoring/default/values Leafref
	// (GET /sra/v0.2.x/{store-id}/shopper-monitoring/default/values)
	GetShopperMonitoringDefaultValuesLeafref(ctx echo.Context, storeId StoreId) error
	// DELETE /shopper-monitoring/emotion-recognition-application
	// (DELETE /sra/v0.2.x/{store-id}/shopper-monitoring/emotion-recognition-application)
	DeleteShopperMonitoringEmotionRecognitionApplication(ctx echo.Context, storeId StoreId) error
	// GET /shopper-monitoring/emotion-recognition-application Container
	// (GET /sra/v0.2.x/{store-id}/shopper-monitoring/emotion-recognition-application)
	GetShopperMonitoringEmotionRecognitionApplication(ctx echo.Context, storeId StoreId) error
	// POST /shopper-monitoring/emotion-recognition-application
	// (POST /sra/v0.2.x/{store-id}/shopper-monitoring/emotion-recognition-application)
	PostShopperMonitoringEmotionRecognitionApplication(ctx echo.Context, storeId StoreId) error
	// GET /shopper-monitoring/emotion-recognition-application/model-state Container
	// (GET /sra/v0.2.x/{store-id}/shopper-monitoring/emotion-recognition-application/model-state)
	GetShopperMonitoringEmotionRecognitionApplicationModelState(ctx echo.Context, storeId StoreId) error
	// DELETE /shopper-monitoring/face-detection-application
	// (DELETE /sra/v0.2.x/{store-id}/shopper-monitoring/face-detection-application)
	DeleteShopperMonitoringFaceDetectionApplication(ctx echo.Context, storeId StoreId) error
	// GET /shopper-monitoring/face-detection-application Container
	// (GET /sra/v0.2.x/{store-id}/shopper-monitoring/face-detection-application)
	GetShopperMonitoringFaceDetectionApplication(ctx echo.Context, storeId StoreId) error
	// POST /shopper-monitoring/face-detection-application
	// (POST /sra/v0.2.x/{store-id}/shopper-monitoring/face-detection-application)
	PostShopperMonitoringFaceDetectionApplication(ctx echo.Context, storeId StoreId) error
	// GET /shopper-monitoring/face-detection-application/model-state Container
	// (GET /sra/v0.2.x/{store-id}/shopper-monitoring/face-detection-application/model-state)
	GetShopperMonitoringFaceDetectionApplicationModelState(ctx echo.Context, storeId StoreId) error
	// DELETE /shopper-monitoring/head-pose-detection-application
	// (DELETE /sra/v0.2.x/{store-id}/shopper-monitoring/head-pose-detection-application)
	DeleteShopperMonitoringHeadPoseDetectionApplication(ctx echo.Context, storeId StoreId) error
	// GET /shopper-monitoring/head-pose-detection-application Container
	// (GET /sra/v0.2.x/{store-id}/shopper-monitoring/head-pose-detection-application)
	GetShopperMonitoringHeadPoseDetectionApplication(ctx echo.Context, storeId StoreId) error
	// POST /shopper-monitoring/head-pose-detection-application
	// (POST /sra/v0.2.x/{store-id}/shopper-monitoring/head-pose-detection-application)
	PostShopperMonitoringHeadPoseDetectionApplication(ctx echo.Context, storeId StoreId) error
	// GET /shopper-monitoring/head-pose-detection-application/model-state Container
	// (GET /sra/v0.2.x/{store-id}/shopper-monitoring/head-pose-detection-application/model-state)
	GetShopperMonitoringHeadPoseDetectionApplicationModelState(ctx echo.Context, storeId StoreId) error
	// GET /shopper-monitoring/retail-area List
	// (GET /sra/v0.2.x/{store-id}/shopper-monitoring/retail-area)
	GetShopperMonitoringRetailAreaList(ctx echo.Context, storeId StoreId) error
	// DELETE /shopper-monitoring/retail-area
	// (DELETE /sra/v0.2.x/{store-id}/shopper-monitoring/retail-area/{area-ref})
	DeleteShopperMonitoringRetailArea(ctx echo.Context, storeId StoreId, areaRef string) error
	// GET /shopper-monitoring/retail-area Container
	// (GET /sra/v0.2.x/{store-id}/shopper-monitoring/retail-area/{area-ref})
	GetShopperMonitoringRetailArea(ctx echo.Context, storeId StoreId, areaRef string) error
	// POST /shopper-monitoring/retail-area
	// (POST /sra/v0.2.x/{store-id}/shopper-monitoring/retail-area/{area-ref})
	PostShopperMonitoringRetailArea(ctx echo.Context, storeId StoreId, areaRef string) error
	// GET /shopper-monitoring/retail-area/{area-ref}/area-ref/values Leafref
	// (GET /sra/v0.2.x/{store-id}/shopper-monitoring/retail-area/{area-ref}/area-ref/values)
	GetShopperMonitoringRetailAreaAreaRefValuesLeafref(ctx echo.Context, storeId StoreId, areaRef string) error
	// DELETE /store-traffic-monitoring
	// (DELETE /sra/v0.2.x/{store-id}/store-traffic-monitoring)
	DeleteStoreTrafficMonitoring(ctx echo.Context, storeId StoreId) error
	// GET /store-traffic-monitoring Container
	// (GET /sra/v0.2.x/{store-id}/store-traffic-monitoring)
	GetStoreTrafficMonitoring(ctx echo.Context, storeId StoreId) error
	// POST /store-traffic-monitoring
	// (POST /sra/v0.2.x/{store-id}/store-traffic-monitoring)
	PostStoreTrafficMonitoring(ctx echo.Context, storeId StoreId) error
	// GET /store-traffic-monitoring/default/values Leafref
	// (GET /sra/v0.2.x/{store-id}/store-traffic-monitoring/default/values)
	GetStoreTrafficMonitoringDefaultValuesLeafref(ctx echo.Context, storeId StoreId) error
	// DELETE /store-traffic-monitoring/person-detection-application
	// (DELETE /sra/v0.2.x/{store-id}/store-traffic-monitoring/person-detection-application)
	DeleteStoreTrafficMonitoringPersonDetectionApplication(ctx echo.Context, storeId StoreId) error
	// GET /store-traffic-monitoring/person-detection-application Container
	// (GET /sra/v0.2.x/{store-id}/store-traffic-monitoring/person-detection-application)
	GetStoreTrafficMonitoringPersonDetectionApplication(ctx echo.Context, storeId StoreId) error
	// POST /store-traffic-monitoring/person-detection-application
	// (POST /sra/v0.2.x/{store-id}/store-traffic-monitoring/person-detection-application)
	PostStoreTrafficMonitoringPersonDetectionApplication(ctx echo.Context, storeId StoreId) error
	// GET /store-traffic-monitoring/person-detection-application/model-state Container
	// (GET /sra/v0.2.x/{store-id}/store-traffic-monitoring/person-detection-application/model-state)
	GetStoreTrafficMonitoringPersonDetectionApplicationModelState(ctx echo.Context, storeId StoreId) error
	// GET /store-traffic-monitoring/retail-area List
	// (GET /sra/v0.2.x/{store-id}/store-traffic-monitoring/retail-area)
	GetStoreTrafficMonitoringRetailAreaList(ctx echo.Context, storeId StoreId) error
	// DELETE /store-traffic-monitoring/retail-area
	// (DELETE /sra/v0.2.x/{store-id}/store-traffic-monitoring/retail-area/{area-ref})
	DeleteStoreTrafficMonitoringRetailArea(ctx echo.Context, storeId StoreId, areaRef string) error
	// GET /store-traffic-monitoring/retail-area Container
	// (GET /sra/v0.2.x/{store-id}/store-traffic-monitoring/retail-area/{area-ref})
	GetStoreTrafficMonitoringRetailArea(ctx echo.Context, storeId StoreId, areaRef string) error
	// POST /store-traffic-monitoring/retail-area
	// (POST /sra/v0.2.x/{store-id}/store-traffic-monitoring/retail-area/{area-ref})
	PostStoreTrafficMonitoringRetailArea(ctx echo.Context, storeId StoreId, areaRef string) error
	// GET /store-traffic-monitoring/retail-area/{area-ref}/area-ref/values Leafref
	// (GET /sra/v0.2.x/{store-id}/store-traffic-monitoring/retail-area/{area-ref}/area-ref/values)
	GetStoreTrafficMonitoringRetailAreaAreaRefValuesLeafref(ctx echo.Context, storeId StoreId, areaRef string) error
}

// SPDX-FileCopyrightText: 2022-present Intel Corporation
//
// SPDX-License-Identifier: LicenseRef-Intel

// serverInterfaceWrapper converts echo contexts to parameters.
type serverInterfaceWrapper struct {
	handler ServerInterface
}

// PatchRocAPI converts echo context to params.
func (w *serverInterfaceWrapper) PatchRocAPI(ctx echo.Context) error {

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PatchRocAPI(ctx)
}

// GetSpec - Get the OpenAPI3 specification in YAML format
func (w *serverInterfaceWrapper) GetSpec(ctx echo.Context) error {

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetSpec(ctx)
}

// GetTargets - get the full list of targets (devices)
func (w *serverInterfaceWrapper) GetTargets(ctx echo.Context) error {

	var typeId string
	typeId = string(ctx.QueryParam("type"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetTargets(ctx, typeId)
}

// GetRetailAreaList converts echo context to params.
func (w *serverInterfaceWrapper) GetRetailAreaList(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetRetailAreaList(ctx, storeId)
}

// DeleteRetailArea converts echo context to params.
func (w *serverInterfaceWrapper) DeleteRetailArea(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// ------------- Path parameter "area-id" -------------

	var areaId string
	areaId = ctx.Param("area-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteRetailArea(ctx, storeId, areaId)
}

// GetRetailArea converts echo context to params.
func (w *serverInterfaceWrapper) GetRetailArea(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// ------------- Path parameter "area-id" -------------

	var areaId string
	areaId = ctx.Param("area-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetRetailArea(ctx, storeId, areaId)
}

// PostRetailArea converts echo context to params.
func (w *serverInterfaceWrapper) PostRetailArea(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// ------------- Path parameter "area-id" -------------

	var areaId string
	areaId = ctx.Param("area-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostRetailArea(ctx, storeId, areaId)
}

// DeleteRetailAreaLocation converts echo context to params.
func (w *serverInterfaceWrapper) DeleteRetailAreaLocation(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// ------------- Path parameter "area-id" -------------

	var areaId string
	areaId = ctx.Param("area-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteRetailAreaLocation(ctx, storeId, areaId)
}

// GetRetailAreaLocation converts echo context to params.
func (w *serverInterfaceWrapper) GetRetailAreaLocation(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// ------------- Path parameter "area-id" -------------

	var areaId string
	areaId = ctx.Param("area-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetRetailAreaLocation(ctx, storeId, areaId)
}

// PostRetailAreaLocation converts echo context to params.
func (w *serverInterfaceWrapper) PostRetailAreaLocation(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// ------------- Path parameter "area-id" -------------

	var areaId string
	areaId = ctx.Param("area-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostRetailAreaLocation(ctx, storeId, areaId)
}

// GetRetailAreaSourceList converts echo context to params.
func (w *serverInterfaceWrapper) GetRetailAreaSourceList(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// ------------- Path parameter "area-id" -------------

	var areaId string
	areaId = ctx.Param("area-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetRetailAreaSourceList(ctx, storeId, areaId)
}

// DeleteRetailAreaSource converts echo context to params.
func (w *serverInterfaceWrapper) DeleteRetailAreaSource(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// ------------- Path parameter "area-id" -------------

	var areaId string
	areaId = ctx.Param("area-id")

	// ------------- Path parameter "source-id" -------------

	var sourceId string
	sourceId = ctx.Param("source-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteRetailAreaSource(ctx, storeId, areaId, sourceId)
}

// GetRetailAreaSource converts echo context to params.
func (w *serverInterfaceWrapper) GetRetailAreaSource(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// ------------- Path parameter "area-id" -------------

	var areaId string
	areaId = ctx.Param("area-id")

	// ------------- Path parameter "source-id" -------------

	var sourceId string
	sourceId = ctx.Param("source-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetRetailAreaSource(ctx, storeId, areaId, sourceId)
}

// PostRetailAreaSource converts echo context to params.
func (w *serverInterfaceWrapper) PostRetailAreaSource(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// ------------- Path parameter "area-id" -------------

	var areaId string
	areaId = ctx.Param("area-id")

	// ------------- Path parameter "source-id" -------------

	var sourceId string
	sourceId = ctx.Param("source-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostRetailAreaSource(ctx, storeId, areaId, sourceId)
}

// DeleteRetailAreaSourceLocation converts echo context to params.
func (w *serverInterfaceWrapper) DeleteRetailAreaSourceLocation(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// ------------- Path parameter "area-id" -------------

	var areaId string
	areaId = ctx.Param("area-id")

	// ------------- Path parameter "source-id" -------------

	var sourceId string
	sourceId = ctx.Param("source-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteRetailAreaSourceLocation(ctx, storeId, areaId, sourceId)
}

// GetRetailAreaSourceLocation converts echo context to params.
func (w *serverInterfaceWrapper) GetRetailAreaSourceLocation(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// ------------- Path parameter "area-id" -------------

	var areaId string
	areaId = ctx.Param("area-id")

	// ------------- Path parameter "source-id" -------------

	var sourceId string
	sourceId = ctx.Param("source-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetRetailAreaSourceLocation(ctx, storeId, areaId, sourceId)
}

// PostRetailAreaSourceLocation converts echo context to params.
func (w *serverInterfaceWrapper) PostRetailAreaSourceLocation(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// ------------- Path parameter "area-id" -------------

	var areaId string
	areaId = ctx.Param("area-id")

	// ------------- Path parameter "source-id" -------------

	var sourceId string
	sourceId = ctx.Param("source-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostRetailAreaSourceLocation(ctx, storeId, areaId, sourceId)
}

// GetRetailAreaSourceState converts echo context to params.
func (w *serverInterfaceWrapper) GetRetailAreaSourceState(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// ------------- Path parameter "area-id" -------------

	var areaId string
	areaId = ctx.Param("area-id")

	// ------------- Path parameter "source-id" -------------

	var sourceId string
	sourceId = ctx.Param("source-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetRetailAreaSourceState(ctx, storeId, areaId, sourceId)
}

// DeleteRetailAreaSourceVideo converts echo context to params.
func (w *serverInterfaceWrapper) DeleteRetailAreaSourceVideo(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// ------------- Path parameter "area-id" -------------

	var areaId string
	areaId = ctx.Param("area-id")

	// ------------- Path parameter "source-id" -------------

	var sourceId string
	sourceId = ctx.Param("source-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteRetailAreaSourceVideo(ctx, storeId, areaId, sourceId)
}

// GetRetailAreaSourceVideo converts echo context to params.
func (w *serverInterfaceWrapper) GetRetailAreaSourceVideo(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// ------------- Path parameter "area-id" -------------

	var areaId string
	areaId = ctx.Param("area-id")

	// ------------- Path parameter "source-id" -------------

	var sourceId string
	sourceId = ctx.Param("source-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetRetailAreaSourceVideo(ctx, storeId, areaId, sourceId)
}

// PostRetailAreaSourceVideo converts echo context to params.
func (w *serverInterfaceWrapper) PostRetailAreaSourceVideo(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// ------------- Path parameter "area-id" -------------

	var areaId string
	areaId = ctx.Param("area-id")

	// ------------- Path parameter "source-id" -------------

	var sourceId string
	sourceId = ctx.Param("source-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostRetailAreaSourceVideo(ctx, storeId, areaId, sourceId)
}

// DeleteShelfMonitoring converts echo context to params.
func (w *serverInterfaceWrapper) DeleteShelfMonitoring(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteShelfMonitoring(ctx, storeId)
}

// GetShelfMonitoring converts echo context to params.
func (w *serverInterfaceWrapper) GetShelfMonitoring(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetShelfMonitoring(ctx, storeId)
}

// PostShelfMonitoring converts echo context to params.
func (w *serverInterfaceWrapper) PostShelfMonitoring(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostShelfMonitoring(ctx, storeId)
}

// GetShelfMonitoringDefaultValuesLeafref converts echo context to params.
func (w *serverInterfaceWrapper) GetShelfMonitoringDefaultValuesLeafref(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetShelfMonitoringDefaultValuesLeafref(ctx, storeId)
}

// DeleteShelfMonitoringObjectDetectionApplication converts echo context to params.
func (w *serverInterfaceWrapper) DeleteShelfMonitoringObjectDetectionApplication(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteShelfMonitoringObjectDetectionApplication(ctx, storeId)
}

// GetShelfMonitoringObjectDetectionApplication converts echo context to params.
func (w *serverInterfaceWrapper) GetShelfMonitoringObjectDetectionApplication(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetShelfMonitoringObjectDetectionApplication(ctx, storeId)
}

// PostShelfMonitoringObjectDetectionApplication converts echo context to params.
func (w *serverInterfaceWrapper) PostShelfMonitoringObjectDetectionApplication(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostShelfMonitoringObjectDetectionApplication(ctx, storeId)
}

// GetShelfMonitoringObjectDetectionApplicationModelState converts echo context to params.
func (w *serverInterfaceWrapper) GetShelfMonitoringObjectDetectionApplicationModelState(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetShelfMonitoringObjectDetectionApplicationModelState(ctx, storeId)
}

// GetShelfMonitoringRetailAreaList converts echo context to params.
func (w *serverInterfaceWrapper) GetShelfMonitoringRetailAreaList(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetShelfMonitoringRetailAreaList(ctx, storeId)
}

// DeleteShelfMonitoringRetailArea converts echo context to params.
func (w *serverInterfaceWrapper) DeleteShelfMonitoringRetailArea(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// ------------- Path parameter "area-ref" -------------

	var areaRef string
	areaRef = ctx.Param("area-ref")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteShelfMonitoringRetailArea(ctx, storeId, areaRef)
}

// GetShelfMonitoringRetailArea converts echo context to params.
func (w *serverInterfaceWrapper) GetShelfMonitoringRetailArea(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// ------------- Path parameter "area-ref" -------------

	var areaRef string
	areaRef = ctx.Param("area-ref")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetShelfMonitoringRetailArea(ctx, storeId, areaRef)
}

// PostShelfMonitoringRetailArea converts echo context to params.
func (w *serverInterfaceWrapper) PostShelfMonitoringRetailArea(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// ------------- Path parameter "area-ref" -------------

	var areaRef string
	areaRef = ctx.Param("area-ref")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostShelfMonitoringRetailArea(ctx, storeId, areaRef)
}

// GetShelfMonitoringRetailAreaAreaRefValuesLeafref converts echo context to params.
func (w *serverInterfaceWrapper) GetShelfMonitoringRetailAreaAreaRefValuesLeafref(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// ------------- Path parameter "area-ref" -------------

	var areaRef string
	areaRef = ctx.Param("area-ref")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetShelfMonitoringRetailAreaAreaRefValuesLeafref(ctx, storeId, areaRef)
}

// DeleteShopperMonitoring converts echo context to params.
func (w *serverInterfaceWrapper) DeleteShopperMonitoring(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteShopperMonitoring(ctx, storeId)
}

// GetShopperMonitoring converts echo context to params.
func (w *serverInterfaceWrapper) GetShopperMonitoring(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetShopperMonitoring(ctx, storeId)
}

// PostShopperMonitoring converts echo context to params.
func (w *serverInterfaceWrapper) PostShopperMonitoring(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostShopperMonitoring(ctx, storeId)
}

// GetShopperMonitoringDefaultValuesLeafref converts echo context to params.
func (w *serverInterfaceWrapper) GetShopperMonitoringDefaultValuesLeafref(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetShopperMonitoringDefaultValuesLeafref(ctx, storeId)
}

// DeleteShopperMonitoringEmotionRecognitionApplication converts echo context to params.
func (w *serverInterfaceWrapper) DeleteShopperMonitoringEmotionRecognitionApplication(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteShopperMonitoringEmotionRecognitionApplication(ctx, storeId)
}

// GetShopperMonitoringEmotionRecognitionApplication converts echo context to params.
func (w *serverInterfaceWrapper) GetShopperMonitoringEmotionRecognitionApplication(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetShopperMonitoringEmotionRecognitionApplication(ctx, storeId)
}

// PostShopperMonitoringEmotionRecognitionApplication converts echo context to params.
func (w *serverInterfaceWrapper) PostShopperMonitoringEmotionRecognitionApplication(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostShopperMonitoringEmotionRecognitionApplication(ctx, storeId)
}

// GetShopperMonitoringEmotionRecognitionApplicationModelState converts echo context to params.
func (w *serverInterfaceWrapper) GetShopperMonitoringEmotionRecognitionApplicationModelState(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetShopperMonitoringEmotionRecognitionApplicationModelState(ctx, storeId)
}

// DeleteShopperMonitoringFaceDetectionApplication converts echo context to params.
func (w *serverInterfaceWrapper) DeleteShopperMonitoringFaceDetectionApplication(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteShopperMonitoringFaceDetectionApplication(ctx, storeId)
}

// GetShopperMonitoringFaceDetectionApplication converts echo context to params.
func (w *serverInterfaceWrapper) GetShopperMonitoringFaceDetectionApplication(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetShopperMonitoringFaceDetectionApplication(ctx, storeId)
}

// PostShopperMonitoringFaceDetectionApplication converts echo context to params.
func (w *serverInterfaceWrapper) PostShopperMonitoringFaceDetectionApplication(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostShopperMonitoringFaceDetectionApplication(ctx, storeId)
}

// GetShopperMonitoringFaceDetectionApplicationModelState converts echo context to params.
func (w *serverInterfaceWrapper) GetShopperMonitoringFaceDetectionApplicationModelState(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetShopperMonitoringFaceDetectionApplicationModelState(ctx, storeId)
}

// DeleteShopperMonitoringHeadPoseDetectionApplication converts echo context to params.
func (w *serverInterfaceWrapper) DeleteShopperMonitoringHeadPoseDetectionApplication(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteShopperMonitoringHeadPoseDetectionApplication(ctx, storeId)
}

// GetShopperMonitoringHeadPoseDetectionApplication converts echo context to params.
func (w *serverInterfaceWrapper) GetShopperMonitoringHeadPoseDetectionApplication(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetShopperMonitoringHeadPoseDetectionApplication(ctx, storeId)
}

// PostShopperMonitoringHeadPoseDetectionApplication converts echo context to params.
func (w *serverInterfaceWrapper) PostShopperMonitoringHeadPoseDetectionApplication(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostShopperMonitoringHeadPoseDetectionApplication(ctx, storeId)
}

// GetShopperMonitoringHeadPoseDetectionApplicationModelState converts echo context to params.
func (w *serverInterfaceWrapper) GetShopperMonitoringHeadPoseDetectionApplicationModelState(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetShopperMonitoringHeadPoseDetectionApplicationModelState(ctx, storeId)
}

// GetShopperMonitoringRetailAreaList converts echo context to params.
func (w *serverInterfaceWrapper) GetShopperMonitoringRetailAreaList(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetShopperMonitoringRetailAreaList(ctx, storeId)
}

// DeleteShopperMonitoringRetailArea converts echo context to params.
func (w *serverInterfaceWrapper) DeleteShopperMonitoringRetailArea(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// ------------- Path parameter "area-ref" -------------

	var areaRef string
	areaRef = ctx.Param("area-ref")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteShopperMonitoringRetailArea(ctx, storeId, areaRef)
}

// GetShopperMonitoringRetailArea converts echo context to params.
func (w *serverInterfaceWrapper) GetShopperMonitoringRetailArea(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// ------------- Path parameter "area-ref" -------------

	var areaRef string
	areaRef = ctx.Param("area-ref")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetShopperMonitoringRetailArea(ctx, storeId, areaRef)
}

// PostShopperMonitoringRetailArea converts echo context to params.
func (w *serverInterfaceWrapper) PostShopperMonitoringRetailArea(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// ------------- Path parameter "area-ref" -------------

	var areaRef string
	areaRef = ctx.Param("area-ref")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostShopperMonitoringRetailArea(ctx, storeId, areaRef)
}

// GetShopperMonitoringRetailAreaAreaRefValuesLeafref converts echo context to params.
func (w *serverInterfaceWrapper) GetShopperMonitoringRetailAreaAreaRefValuesLeafref(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// ------------- Path parameter "area-ref" -------------

	var areaRef string
	areaRef = ctx.Param("area-ref")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetShopperMonitoringRetailAreaAreaRefValuesLeafref(ctx, storeId, areaRef)
}

// DeleteStoreTrafficMonitoring converts echo context to params.
func (w *serverInterfaceWrapper) DeleteStoreTrafficMonitoring(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteStoreTrafficMonitoring(ctx, storeId)
}

// GetStoreTrafficMonitoring converts echo context to params.
func (w *serverInterfaceWrapper) GetStoreTrafficMonitoring(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetStoreTrafficMonitoring(ctx, storeId)
}

// PostStoreTrafficMonitoring converts echo context to params.
func (w *serverInterfaceWrapper) PostStoreTrafficMonitoring(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostStoreTrafficMonitoring(ctx, storeId)
}

// GetStoreTrafficMonitoringDefaultValuesLeafref converts echo context to params.
func (w *serverInterfaceWrapper) GetStoreTrafficMonitoringDefaultValuesLeafref(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetStoreTrafficMonitoringDefaultValuesLeafref(ctx, storeId)
}

// DeleteStoreTrafficMonitoringPersonDetectionApplication converts echo context to params.
func (w *serverInterfaceWrapper) DeleteStoreTrafficMonitoringPersonDetectionApplication(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteStoreTrafficMonitoringPersonDetectionApplication(ctx, storeId)
}

// GetStoreTrafficMonitoringPersonDetectionApplication converts echo context to params.
func (w *serverInterfaceWrapper) GetStoreTrafficMonitoringPersonDetectionApplication(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetStoreTrafficMonitoringPersonDetectionApplication(ctx, storeId)
}

// PostStoreTrafficMonitoringPersonDetectionApplication converts echo context to params.
func (w *serverInterfaceWrapper) PostStoreTrafficMonitoringPersonDetectionApplication(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostStoreTrafficMonitoringPersonDetectionApplication(ctx, storeId)
}

// GetStoreTrafficMonitoringPersonDetectionApplicationModelState converts echo context to params.
func (w *serverInterfaceWrapper) GetStoreTrafficMonitoringPersonDetectionApplicationModelState(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetStoreTrafficMonitoringPersonDetectionApplicationModelState(ctx, storeId)
}

// GetStoreTrafficMonitoringRetailAreaList converts echo context to params.
func (w *serverInterfaceWrapper) GetStoreTrafficMonitoringRetailAreaList(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetStoreTrafficMonitoringRetailAreaList(ctx, storeId)
}

// DeleteStoreTrafficMonitoringRetailArea converts echo context to params.
func (w *serverInterfaceWrapper) DeleteStoreTrafficMonitoringRetailArea(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// ------------- Path parameter "area-ref" -------------

	var areaRef string
	areaRef = ctx.Param("area-ref")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteStoreTrafficMonitoringRetailArea(ctx, storeId, areaRef)
}

// GetStoreTrafficMonitoringRetailArea converts echo context to params.
func (w *serverInterfaceWrapper) GetStoreTrafficMonitoringRetailArea(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// ------------- Path parameter "area-ref" -------------

	var areaRef string
	areaRef = ctx.Param("area-ref")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetStoreTrafficMonitoringRetailArea(ctx, storeId, areaRef)
}

// PostStoreTrafficMonitoringRetailArea converts echo context to params.
func (w *serverInterfaceWrapper) PostStoreTrafficMonitoringRetailArea(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// ------------- Path parameter "area-ref" -------------

	var areaRef string
	areaRef = ctx.Param("area-ref")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostStoreTrafficMonitoringRetailArea(ctx, storeId, areaRef)
}

// GetStoreTrafficMonitoringRetailAreaAreaRefValuesLeafref converts echo context to params.
func (w *serverInterfaceWrapper) GetStoreTrafficMonitoringRetailAreaAreaRefValuesLeafref(ctx echo.Context) error {

	// ------------- Path parameter "store-id" -------------

	var storeId StoreId
	storeId = StoreId(ctx.Param("store-id"))

	// ------------- Path parameter "area-ref" -------------

	var areaRef string
	areaRef = ctx.Param("area-ref")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetStoreTrafficMonitoringRetailAreaAreaRefValuesLeafref(ctx, storeId, areaRef)
}

// SPDX-FileCopyrightText: 2022-present Intel Corporation
//
// SPDX-License-Identifier: LicenseRef-Intel

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, validateResponse bool) error {

	openApiDefinition, err := GetSwagger()
	if err != nil {
		return err
	}
	wrapper := serverInterfaceWrapper{
		handler: si,
	}

	router.GET("/sra/v0.2.x/:store-id/retail-area", wrapper.GetRetailAreaList, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/sra/v0.2.x/:store-id/retail-area/:area-id", wrapper.DeleteRetailArea, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sra/v0.2.x/:store-id/retail-area/:area-id", wrapper.GetRetailArea, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/sra/v0.2.x/:store-id/retail-area/:area-id", wrapper.PostRetailArea, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/sra/v0.2.x/:store-id/retail-area/:area-id/location", wrapper.DeleteRetailAreaLocation, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sra/v0.2.x/:store-id/retail-area/:area-id/location", wrapper.GetRetailAreaLocation, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/sra/v0.2.x/:store-id/retail-area/:area-id/location", wrapper.PostRetailAreaLocation, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sra/v0.2.x/:store-id/retail-area/:area-id/source", wrapper.GetRetailAreaSourceList, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/sra/v0.2.x/:store-id/retail-area/:area-id/source/:source-id", wrapper.DeleteRetailAreaSource, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sra/v0.2.x/:store-id/retail-area/:area-id/source/:source-id", wrapper.GetRetailAreaSource, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/sra/v0.2.x/:store-id/retail-area/:area-id/source/:source-id", wrapper.PostRetailAreaSource, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/sra/v0.2.x/:store-id/retail-area/:area-id/source/:source-id/location", wrapper.DeleteRetailAreaSourceLocation, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sra/v0.2.x/:store-id/retail-area/:area-id/source/:source-id/location", wrapper.GetRetailAreaSourceLocation, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/sra/v0.2.x/:store-id/retail-area/:area-id/source/:source-id/location", wrapper.PostRetailAreaSourceLocation, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sra/v0.2.x/:store-id/retail-area/:area-id/source/:source-id/state", wrapper.GetRetailAreaSourceState, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/sra/v0.2.x/:store-id/retail-area/:area-id/source/:source-id/video", wrapper.DeleteRetailAreaSourceVideo, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sra/v0.2.x/:store-id/retail-area/:area-id/source/:source-id/video", wrapper.GetRetailAreaSourceVideo, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/sra/v0.2.x/:store-id/retail-area/:area-id/source/:source-id/video", wrapper.PostRetailAreaSourceVideo, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/sra/v0.2.x/:store-id/shelf-monitoring", wrapper.DeleteShelfMonitoring, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sra/v0.2.x/:store-id/shelf-monitoring", wrapper.GetShelfMonitoring, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/sra/v0.2.x/:store-id/shelf-monitoring", wrapper.PostShelfMonitoring, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sra/v0.2.x/:store-id/shelf-monitoring/default/values", wrapper.GetShelfMonitoringDefaultValuesLeafref, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/sra/v0.2.x/:store-id/shelf-monitoring/object-detection-application", wrapper.DeleteShelfMonitoringObjectDetectionApplication, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sra/v0.2.x/:store-id/shelf-monitoring/object-detection-application", wrapper.GetShelfMonitoringObjectDetectionApplication, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/sra/v0.2.x/:store-id/shelf-monitoring/object-detection-application", wrapper.PostShelfMonitoringObjectDetectionApplication, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sra/v0.2.x/:store-id/shelf-monitoring/object-detection-application/model-state", wrapper.GetShelfMonitoringObjectDetectionApplicationModelState, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sra/v0.2.x/:store-id/shelf-monitoring/retail-area", wrapper.GetShelfMonitoringRetailAreaList, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/sra/v0.2.x/:store-id/shelf-monitoring/retail-area/:area-ref", wrapper.DeleteShelfMonitoringRetailArea, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sra/v0.2.x/:store-id/shelf-monitoring/retail-area/:area-ref", wrapper.GetShelfMonitoringRetailArea, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/sra/v0.2.x/:store-id/shelf-monitoring/retail-area/:area-ref", wrapper.PostShelfMonitoringRetailArea, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sra/v0.2.x/:store-id/shelf-monitoring/retail-area/:area-ref/area-ref/values", wrapper.GetShelfMonitoringRetailAreaAreaRefValuesLeafref, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/sra/v0.2.x/:store-id/shopper-monitoring", wrapper.DeleteShopperMonitoring, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sra/v0.2.x/:store-id/shopper-monitoring", wrapper.GetShopperMonitoring, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/sra/v0.2.x/:store-id/shopper-monitoring", wrapper.PostShopperMonitoring, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sra/v0.2.x/:store-id/shopper-monitoring/default/values", wrapper.GetShopperMonitoringDefaultValuesLeafref, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/sra/v0.2.x/:store-id/shopper-monitoring/emotion-recognition-application", wrapper.DeleteShopperMonitoringEmotionRecognitionApplication, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sra/v0.2.x/:store-id/shopper-monitoring/emotion-recognition-application", wrapper.GetShopperMonitoringEmotionRecognitionApplication, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/sra/v0.2.x/:store-id/shopper-monitoring/emotion-recognition-application", wrapper.PostShopperMonitoringEmotionRecognitionApplication, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sra/v0.2.x/:store-id/shopper-monitoring/emotion-recognition-application/model-state", wrapper.GetShopperMonitoringEmotionRecognitionApplicationModelState, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/sra/v0.2.x/:store-id/shopper-monitoring/face-detection-application", wrapper.DeleteShopperMonitoringFaceDetectionApplication, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sra/v0.2.x/:store-id/shopper-monitoring/face-detection-application", wrapper.GetShopperMonitoringFaceDetectionApplication, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/sra/v0.2.x/:store-id/shopper-monitoring/face-detection-application", wrapper.PostShopperMonitoringFaceDetectionApplication, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sra/v0.2.x/:store-id/shopper-monitoring/face-detection-application/model-state", wrapper.GetShopperMonitoringFaceDetectionApplicationModelState, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/sra/v0.2.x/:store-id/shopper-monitoring/head-pose-detection-application", wrapper.DeleteShopperMonitoringHeadPoseDetectionApplication, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sra/v0.2.x/:store-id/shopper-monitoring/head-pose-detection-application", wrapper.GetShopperMonitoringHeadPoseDetectionApplication, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/sra/v0.2.x/:store-id/shopper-monitoring/head-pose-detection-application", wrapper.PostShopperMonitoringHeadPoseDetectionApplication, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sra/v0.2.x/:store-id/shopper-monitoring/head-pose-detection-application/model-state", wrapper.GetShopperMonitoringHeadPoseDetectionApplicationModelState, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sra/v0.2.x/:store-id/shopper-monitoring/retail-area", wrapper.GetShopperMonitoringRetailAreaList, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/sra/v0.2.x/:store-id/shopper-monitoring/retail-area/:area-ref", wrapper.DeleteShopperMonitoringRetailArea, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sra/v0.2.x/:store-id/shopper-monitoring/retail-area/:area-ref", wrapper.GetShopperMonitoringRetailArea, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/sra/v0.2.x/:store-id/shopper-monitoring/retail-area/:area-ref", wrapper.PostShopperMonitoringRetailArea, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sra/v0.2.x/:store-id/shopper-monitoring/retail-area/:area-ref/area-ref/values", wrapper.GetShopperMonitoringRetailAreaAreaRefValuesLeafref, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/sra/v0.2.x/:store-id/store-traffic-monitoring", wrapper.DeleteStoreTrafficMonitoring, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sra/v0.2.x/:store-id/store-traffic-monitoring", wrapper.GetStoreTrafficMonitoring, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/sra/v0.2.x/:store-id/store-traffic-monitoring", wrapper.PostStoreTrafficMonitoring, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sra/v0.2.x/:store-id/store-traffic-monitoring/default/values", wrapper.GetStoreTrafficMonitoringDefaultValuesLeafref, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/sra/v0.2.x/:store-id/store-traffic-monitoring/person-detection-application", wrapper.DeleteStoreTrafficMonitoringPersonDetectionApplication, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sra/v0.2.x/:store-id/store-traffic-monitoring/person-detection-application", wrapper.GetStoreTrafficMonitoringPersonDetectionApplication, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/sra/v0.2.x/:store-id/store-traffic-monitoring/person-detection-application", wrapper.PostStoreTrafficMonitoringPersonDetectionApplication, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sra/v0.2.x/:store-id/store-traffic-monitoring/person-detection-application/model-state", wrapper.GetStoreTrafficMonitoringPersonDetectionApplicationModelState, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sra/v0.2.x/:store-id/store-traffic-monitoring/retail-area", wrapper.GetStoreTrafficMonitoringRetailAreaList, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/sra/v0.2.x/:store-id/store-traffic-monitoring/retail-area/:area-ref", wrapper.DeleteStoreTrafficMonitoringRetailArea, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sra/v0.2.x/:store-id/store-traffic-monitoring/retail-area/:area-ref", wrapper.GetStoreTrafficMonitoringRetailArea, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/sra/v0.2.x/:store-id/store-traffic-monitoring/retail-area/:area-ref", wrapper.PostStoreTrafficMonitoringRetailArea, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sra/v0.2.x/:store-id/store-traffic-monitoring/retail-area/:area-ref/area-ref/values", wrapper.GetStoreTrafficMonitoringRetailAreaAreaRefValuesLeafref, openapi3mw.ValidateOpenapi3(openApiDefinition))

	router.GET("/openapi.yaml", wrapper.GetSpec)
	router.GET("/targets", wrapper.GetTargets)
	router.PATCH("/roc-api", wrapper.PatchRocAPI)
	return nil
}
