// Package sra_0_2_x provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-app.roc.rocaas-tools/rocaas-cli version (devel) DO NOT EDIT.
package sra_0_2_x

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"bvevAAAA//8aT5Y3A7oAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
