// Package sra_0_2_x provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-app.roc.rocaas-tools/rocaas-cli version (devel) DO NOT EDIT.
package sra_0_2_x

import (
	"fmt"
	"reflect"

	externalRef0 "github.com/intel-innersource/frameworks.edge.one-intel-edge.springboard.reference-implementation.roc-models/models/sra-0.2.x/api"
	"github.com/onosproject/aether-roc-api/pkg/utils"
)

// SPDX-FileCopyrightText: 2022-present Intel Corporation
//
// SPDX-License-Identifier: LicenseRef-Intel

// Not generating constants
// SPDX-FileCopyrightText: 2022-present Intel Corporation
//
// SPDX-License-Identifier: LicenseRef-Intel

// Not generating constants
// SPDX-FileCopyrightText: 2022-present Intel Corporation
//
// SPDX-License-Identifier: LicenseRef-Intel

// ModelPluginDevice - a wrapper for the model plugin
type ModelPluginDevice struct {
	device externalRef0.Device
}

// ToAdditionalPropertiesUnchTarget converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToAdditionalPropertiesUnchTarget(params ...string) (*AdditionalPropertiesUnchTarget, error) {
	resource := new(AdditionalPropertiesUnchTarget)

	reflectAdditionalPropertiesUnchTarget, err := utils.FindModelPluginObject(d.device, "AdditionalPropertiesUnchTarget", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToAdditionalPropertiesUnchTarget(reflectAdditionalPropertiesUnchTarget, params...)
	return resource, err

}

// ToAdditionalPropertiesUnchTarget converts gNMI to OAPI relative to a node in the tree.
func ToAdditionalPropertiesUnchTarget(ygotObjValue *reflect.Value, params ...string) (*AdditionalPropertiesUnchTarget, error) {
	resource := new(AdditionalPropertiesUnchTarget)

	// Property: store-id string
	//encoding gNMI attribute to OAPI
	reflectStoreId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "StoreId")
	if err != nil {
		return nil, err
	}
	if reflectStoreId != nil && isNotNil(reflectStoreId.Interface()) {
		attrStoreId := fmt.Sprintf("%v", reflectStoreId.Interface())
		resource.StoreId = &attrStoreId
	}

	// Property: unchanged string
	//encoding gNMI attribute to OAPI
	reflectUnchanged, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Unchanged")
	if err != nil {
		return nil, err
	}
	if reflectUnchanged != nil && isNotNil(reflectUnchanged.Interface()) {
		attrUnchanged := fmt.Sprintf("%v", reflectUnchanged.Interface())
		resource.Unchanged = &attrUnchanged
	}

	return resource, nil
}

// ToAdditionalPropertyStoreId converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToAdditionalPropertyStoreId(params ...string) (*AdditionalPropertyStoreId, error) {
	resource := new(AdditionalPropertyStoreId)

	reflectAdditionalPropertyStoreId, err := utils.FindModelPluginObject(d.device, "AdditionalPropertyStoreId", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToAdditionalPropertyStoreId(reflectAdditionalPropertyStoreId, params...)
	return resource, err

}

// ToAdditionalPropertyStoreId converts gNMI to OAPI relative to a node in the tree.
func ToAdditionalPropertyStoreId(ygotObjValue *reflect.Value, params ...string) (*AdditionalPropertyStoreId, error) {
	resource := new(AdditionalPropertyStoreId)

	// Property: store-id string
	//encoding gNMI attribute to OAPI
	reflectStoreId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "StoreId")
	if err != nil {
		return nil, err
	}
	if reflectStoreId != nil && isNotNil(reflectStoreId.Interface()) {
		attrStoreId := fmt.Sprintf("%v", reflectStoreId.Interface())
		resource.StoreId = &attrStoreId
	}

	return resource, nil
}

// ToAdditionalPropertyUnchanged converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToAdditionalPropertyUnchanged(params ...string) (*AdditionalPropertyUnchanged, error) {
	resource := new(AdditionalPropertyUnchanged)

	reflectAdditionalPropertyUnchanged, err := utils.FindModelPluginObject(d.device, "AdditionalPropertyUnchanged", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToAdditionalPropertyUnchanged(reflectAdditionalPropertyUnchanged, params...)
	return resource, err

}

// ToAdditionalPropertyUnchanged converts gNMI to OAPI relative to a node in the tree.
func ToAdditionalPropertyUnchanged(ygotObjValue *reflect.Value, params ...string) (*AdditionalPropertyUnchanged, error) {
	resource := new(AdditionalPropertyUnchanged)

	// Property: unchanged string
	//encoding gNMI attribute to OAPI
	reflectUnchanged, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Unchanged")
	if err != nil {
		return nil, err
	}
	if reflectUnchanged != nil && isNotNil(reflectUnchanged.Interface()) {
		attrUnchanged := fmt.Sprintf("%v", reflectUnchanged.Interface())
		resource.Unchanged = &attrUnchanged
	}

	return resource, nil
}

//Ignoring LeafRefOption

//Ignoring LeafRefOptions

// ToRetailArea converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToRetailArea(params ...string) (*RetailArea, error) {
	resource := new(RetailArea)

	reflectRetailArea, err := utils.FindModelPluginObject(d.device, "RetailArea", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToRetailArea(reflectRetailArea, params...)
	return resource, err

}

// ToRetailArea converts gNMI to OAPI relative to a node in the tree.
func ToRetailArea(ygotObjValue *reflect.Value, params ...string) (*RetailArea, error) {
	resource := new(RetailArea)

	// Property: area-id ListKey
	//encoding gNMI attribute to OAPI
	reflectAreaId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "AreaId")
	if err != nil {
		return nil, err
	}
	if reflectAreaId != nil && isNotNil(reflectAreaId.Interface()) {
		attrAreaId := ListKey(reflectAreaId.Interface().(string))
		resource.AreaId = attrAreaId
	} else {
		resource.AreaId = ListKey("")
	}

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil && isNotNil(reflectDescription.Interface()) {
		attrDescription := fmt.Sprintf("%v", reflectDescription.Interface())
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil && isNotNil(reflectDisplayName.Interface()) {
		attrDisplayName := fmt.Sprintf("%v", reflectDisplayName.Interface())
		resource.DisplayName = &attrDisplayName
	}

	// Property: image string
	//encoding gNMI attribute to OAPI
	reflectImage, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Image")
	if err != nil {
		return nil, err
	}
	if reflectImage != nil && isNotNil(reflectImage.Interface()) {
		attrImage := fmt.Sprintf("%v", reflectImage.Interface())
		resource.Image = &attrImage
	}

	// Property: location RetailAreaLocation
	// Handle object
	reflectLocation, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Location")
	if err != nil {
		return nil, err
	}
	if reflectLocation != nil && isNotNil(reflectLocation.Interface()) {
		attrLocation, err := ToRetailAreaLocation(reflectLocation, params...)
		if err != nil {
			return nil, err
		}
		resource.Location = attrLocation
	}

	// Property: source RetailAreaSourceList
	// Handle object
	reflectSource, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Source")
	if err != nil {
		return nil, err
	}
	if reflectSource != nil && isNotNil(reflectSource.Interface()) {
		attrSource, err := ToRetailAreaSourceList(reflectSource, params...)
		if err != nil {
			return nil, err
		}
		resource.Source = attrSource
	}

	return resource, nil
}

// ToRetailAreaList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToRetailAreaList(params ...string) (*RetailAreaList, error) {
	resource := new(RetailAreaList)

	// Array list - Go type RetailArea
	mpObject, err := utils.FindModelPluginObject(d.device, "RetailArea", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToRetailArea(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// ToRetailAreaList converts gNMI to OAPI relative to a node in the tree.
func ToRetailAreaList(ygotObjValue *reflect.Value, params ...string) (*RetailAreaList, error) {
	resource := new(RetailAreaList)

	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToRetailArea(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil
}

// ToRetailAreaLocation converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToRetailAreaLocation(params ...string) (*RetailAreaLocation, error) {
	resource := new(RetailAreaLocation)

	reflectRetailAreaLocation, err := utils.FindModelPluginObject(d.device, "RetailAreaLocation", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToRetailAreaLocation(reflectRetailAreaLocation, params...)
	return resource, err

}

// ToRetailAreaLocation converts gNMI to OAPI relative to a node in the tree.
func ToRetailAreaLocation(ygotObjValue *reflect.Value, params ...string) (*RetailAreaLocation, error) {
	resource := new(RetailAreaLocation)

	// Property: coordinate-system string
	// Enums handling
	reflectCoordinateSystem, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "CoordinateSystem")
	if err != nil {
		return nil, err
	}
	attrCoordinateSystem := reflectCoordinateSystem.Interface()
	_, yangDefCoordinateSystem, err := utils.ExtractGnmiEnumMap(ygotObjValue, "RetailAreaLocationCoordinateSystem", attrCoordinateSystem)
	if err != nil {
		return nil, err
	}
	if yangDefCoordinateSystem != nil {
		resource.CoordinateSystem = (RetailAreaLocationCoordinateSystem)(yangDefCoordinateSystem.Name)
	}

	// Property: orientation-x int64
	//encoding gNMI attribute to OAPI
	reflectOrientationX, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "OrientationX")
	if err != nil {
		return nil, err
	}
	if reflectOrientationX != nil && isNotNil(reflectOrientationX.Interface()) {
		//OpenAPI does not have unsigned numbers.
		if resource.OrientationX, err = utils.ToInt64Ptr(reflectOrientationX); err != nil {
			return nil, err
		}
	}

	// Property: x int64
	//encoding gNMI attribute to OAPI
	reflectX, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "X")
	if err != nil {
		return nil, err
	}
	if reflectX != nil && isNotNil(reflectX.Interface()) {
		//OpenAPI does not have unsigned numbers.
		if resource.X, err = utils.ToInt64(reflectX); err != nil {
			return nil, err
		}
	}

	// Property: y int64
	//encoding gNMI attribute to OAPI
	reflectY, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Y")
	if err != nil {
		return nil, err
	}
	if reflectY != nil && isNotNil(reflectY.Interface()) {
		//OpenAPI does not have unsigned numbers.
		if resource.Y, err = utils.ToInt64(reflectY); err != nil {
			return nil, err
		}
	}

	// Property: z int64
	//encoding gNMI attribute to OAPI
	reflectZ, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Z")
	if err != nil {
		return nil, err
	}
	if reflectZ != nil && isNotNil(reflectZ.Interface()) {
		//OpenAPI does not have unsigned numbers.
		if resource.Z, err = utils.ToInt64Ptr(reflectZ); err != nil {
			return nil, err
		}
	}

	return resource, nil
}

// ToRetailAreaLocationCoordinateSystem converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToRetailAreaLocationCoordinateSystem(params ...string) (*RetailAreaLocationCoordinateSystem, error) {
	resource := new(RetailAreaLocationCoordinateSystem)

	reflectRetailAreaLocationCoordinateSystem, err := utils.FindModelPluginObject(d.device, "RetailAreaLocationCoordinateSystem", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToRetailAreaLocationCoordinateSystem(reflectRetailAreaLocationCoordinateSystem, params...)
	return resource, err

}

// ToRetailAreaLocationCoordinateSystem converts gNMI to OAPI relative to a node in the tree.
func ToRetailAreaLocationCoordinateSystem(ygotObjValue *reflect.Value, params ...string) (*RetailAreaLocationCoordinateSystem, error) {
	resource := new(RetailAreaLocationCoordinateSystem)

	return resource, nil
}

// ToRetailAreaSource converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToRetailAreaSource(params ...string) (*RetailAreaSource, error) {
	resource := new(RetailAreaSource)

	reflectRetailAreaSource, err := utils.FindModelPluginObject(d.device, "RetailAreaSource", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToRetailAreaSource(reflectRetailAreaSource, params...)
	return resource, err

}

// ToRetailAreaSource converts gNMI to OAPI relative to a node in the tree.
func ToRetailAreaSource(ygotObjValue *reflect.Value, params ...string) (*RetailAreaSource, error) {
	resource := new(RetailAreaSource)

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil && isNotNil(reflectDescription.Interface()) {
		attrDescription := fmt.Sprintf("%v", reflectDescription.Interface())
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil && isNotNil(reflectDisplayName.Interface()) {
		attrDisplayName := fmt.Sprintf("%v", reflectDisplayName.Interface())
		resource.DisplayName = &attrDisplayName
	}

	// Property: image string
	//encoding gNMI attribute to OAPI
	reflectImage, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Image")
	if err != nil {
		return nil, err
	}
	if reflectImage != nil && isNotNil(reflectImage.Interface()) {
		attrImage := fmt.Sprintf("%v", reflectImage.Interface())
		resource.Image = &attrImage
	}

	// Property: location RetailAreaSourceLocation
	// Handle object
	reflectLocation, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Location")
	if err != nil {
		return nil, err
	}
	if reflectLocation != nil && isNotNil(reflectLocation.Interface()) {
		attrLocation, err := ToRetailAreaSourceLocation(reflectLocation, params...)
		if err != nil {
			return nil, err
		}
		resource.Location = attrLocation
	}

	// Property: source-id ListKey
	//encoding gNMI attribute to OAPI
	reflectSourceId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "SourceId")
	if err != nil {
		return nil, err
	}
	if reflectSourceId != nil && isNotNil(reflectSourceId.Interface()) {
		attrSourceId := ListKey(reflectSourceId.Interface().(string))
		resource.SourceId = attrSourceId
	} else {
		resource.SourceId = ListKey("")
	}

	// Property: state RetailAreaSourceState
	// Handle object
	reflectState, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "State")
	if err != nil {
		return nil, err
	}
	if reflectState != nil && isNotNil(reflectState.Interface()) {
		attrState, err := ToRetailAreaSourceState(reflectState, params...)
		if err != nil {
			return nil, err
		}
		resource.State = attrState
	}

	// Property: video RetailAreaSourceVideo
	// Handle object
	reflectVideo, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Video")
	if err != nil {
		return nil, err
	}
	if reflectVideo != nil && isNotNil(reflectVideo.Interface()) {
		attrVideo, err := ToRetailAreaSourceVideo(reflectVideo, params...)
		if err != nil {
			return nil, err
		}
		resource.Video = attrVideo
	}

	return resource, nil
}

// ToRetailAreaSourceList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToRetailAreaSourceList(params ...string) (*RetailAreaSourceList, error) {
	resource := new(RetailAreaSourceList)

	// Array list - Go type RetailAreaSource
	mpObject, err := utils.FindModelPluginObject(d.device, "RetailAreaSource", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToRetailAreaSource(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// ToRetailAreaSourceList converts gNMI to OAPI relative to a node in the tree.
func ToRetailAreaSourceList(ygotObjValue *reflect.Value, params ...string) (*RetailAreaSourceList, error) {
	resource := new(RetailAreaSourceList)

	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToRetailAreaSource(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil
}

// ToRetailAreaSourceLocation converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToRetailAreaSourceLocation(params ...string) (*RetailAreaSourceLocation, error) {
	resource := new(RetailAreaSourceLocation)

	reflectRetailAreaSourceLocation, err := utils.FindModelPluginObject(d.device, "RetailAreaSourceLocation", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToRetailAreaSourceLocation(reflectRetailAreaSourceLocation, params...)
	return resource, err

}

// ToRetailAreaSourceLocation converts gNMI to OAPI relative to a node in the tree.
func ToRetailAreaSourceLocation(ygotObjValue *reflect.Value, params ...string) (*RetailAreaSourceLocation, error) {
	resource := new(RetailAreaSourceLocation)

	// Property: coordinate-system string
	// Enums handling
	reflectCoordinateSystem, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "CoordinateSystem")
	if err != nil {
		return nil, err
	}
	attrCoordinateSystem := reflectCoordinateSystem.Interface()
	_, yangDefCoordinateSystem, err := utils.ExtractGnmiEnumMap(ygotObjValue, "RetailAreaSourceLocationCoordinateSystem", attrCoordinateSystem)
	if err != nil {
		return nil, err
	}
	if yangDefCoordinateSystem != nil {
		resource.CoordinateSystem = (RetailAreaSourceLocationCoordinateSystem)(yangDefCoordinateSystem.Name)
	}

	// Property: orientation-x int64
	//encoding gNMI attribute to OAPI
	reflectOrientationX, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "OrientationX")
	if err != nil {
		return nil, err
	}
	if reflectOrientationX != nil && isNotNil(reflectOrientationX.Interface()) {
		//OpenAPI does not have unsigned numbers.
		if resource.OrientationX, err = utils.ToInt64Ptr(reflectOrientationX); err != nil {
			return nil, err
		}
	}

	// Property: x int64
	//encoding gNMI attribute to OAPI
	reflectX, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "X")
	if err != nil {
		return nil, err
	}
	if reflectX != nil && isNotNil(reflectX.Interface()) {
		//OpenAPI does not have unsigned numbers.
		if resource.X, err = utils.ToInt64(reflectX); err != nil {
			return nil, err
		}
	}

	// Property: y int64
	//encoding gNMI attribute to OAPI
	reflectY, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Y")
	if err != nil {
		return nil, err
	}
	if reflectY != nil && isNotNil(reflectY.Interface()) {
		//OpenAPI does not have unsigned numbers.
		if resource.Y, err = utils.ToInt64(reflectY); err != nil {
			return nil, err
		}
	}

	// Property: z int64
	//encoding gNMI attribute to OAPI
	reflectZ, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Z")
	if err != nil {
		return nil, err
	}
	if reflectZ != nil && isNotNil(reflectZ.Interface()) {
		//OpenAPI does not have unsigned numbers.
		if resource.Z, err = utils.ToInt64Ptr(reflectZ); err != nil {
			return nil, err
		}
	}

	return resource, nil
}

// ToRetailAreaSourceLocationCoordinateSystem converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToRetailAreaSourceLocationCoordinateSystem(params ...string) (*RetailAreaSourceLocationCoordinateSystem, error) {
	resource := new(RetailAreaSourceLocationCoordinateSystem)

	reflectRetailAreaSourceLocationCoordinateSystem, err := utils.FindModelPluginObject(d.device, "RetailAreaSourceLocationCoordinateSystem", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToRetailAreaSourceLocationCoordinateSystem(reflectRetailAreaSourceLocationCoordinateSystem, params...)
	return resource, err

}

// ToRetailAreaSourceLocationCoordinateSystem converts gNMI to OAPI relative to a node in the tree.
func ToRetailAreaSourceLocationCoordinateSystem(ygotObjValue *reflect.Value, params ...string) (*RetailAreaSourceLocationCoordinateSystem, error) {
	resource := new(RetailAreaSourceLocationCoordinateSystem)

	return resource, nil
}

// ToRetailAreaSourceState converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToRetailAreaSourceState(params ...string) (*RetailAreaSourceState, error) {
	resource := new(RetailAreaSourceState)

	reflectRetailAreaSourceState, err := utils.FindModelPluginObject(d.device, "RetailAreaSourceState", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToRetailAreaSourceState(reflectRetailAreaSourceState, params...)
	return resource, err

}

// ToRetailAreaSourceState converts gNMI to OAPI relative to a node in the tree.
func ToRetailAreaSourceState(ygotObjValue *reflect.Value, params ...string) (*RetailAreaSourceState, error) {
	resource := new(RetailAreaSourceState)

	// Property: error string
	//encoding gNMI attribute to OAPI
	reflectError, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Error")
	if err != nil {
		return nil, err
	}
	if reflectError != nil && isNotNil(reflectError.Interface()) {
		attrError := fmt.Sprintf("%v", reflectError.Interface())
		resource.Error = &attrError
	}

	// Property: error-since string
	//encoding gNMI attribute to OAPI
	reflectErrorSince, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "ErrorSince")
	if err != nil {
		return nil, err
	}
	if reflectErrorSince != nil && isNotNil(reflectErrorSince.Interface()) {
		attrErrorSince := fmt.Sprintf("%v", reflectErrorSince.Interface())
		resource.ErrorSince = &attrErrorSince
	}

	// Property: status string
	//encoding gNMI attribute to OAPI
	reflectStatus, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Status")
	if err != nil {
		return nil, err
	}
	if reflectStatus != nil && isNotNil(reflectStatus.Interface()) {
		attrStatus := fmt.Sprintf("%v", reflectStatus.Interface())
		resource.Status = &attrStatus
	}

	return resource, nil
}

// ToRetailAreaSourceVideo converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToRetailAreaSourceVideo(params ...string) (*RetailAreaSourceVideo, error) {
	resource := new(RetailAreaSourceVideo)

	reflectRetailAreaSourceVideo, err := utils.FindModelPluginObject(d.device, "RetailAreaSourceVideo", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToRetailAreaSourceVideo(reflectRetailAreaSourceVideo, params...)
	return resource, err

}

// ToRetailAreaSourceVideo converts gNMI to OAPI relative to a node in the tree.
func ToRetailAreaSourceVideo(ygotObjValue *reflect.Value, params ...string) (*RetailAreaSourceVideo, error) {
	resource := new(RetailAreaSourceVideo)

	// Property: path string
	//encoding gNMI attribute to OAPI
	reflectPath, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Path")
	if err != nil {
		return nil, err
	}
	if reflectPath != nil && isNotNil(reflectPath.Interface()) {
		attrPath := fmt.Sprintf("%v", reflectPath.Interface())
		resource.Path = attrPath
	} else {
		resource.Path = ""
	}

	// Property: source-type string
	// Enums handling
	reflectSourceType, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "SourceType")
	if err != nil {
		return nil, err
	}
	attrSourceType := reflectSourceType.Interface()
	_, yangDefSourceType, err := utils.ExtractGnmiEnumMap(ygotObjValue, "RetailAreaSourceVideoSourceType", attrSourceType)
	if err != nil {
		return nil, err
	}
	if yangDefSourceType != nil {
		resource.SourceType = (RetailAreaSourceVideoSourceType)(yangDefSourceType.Name)
	}

	return resource, nil
}

// ToRetailAreaSourceVideoSourceType converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToRetailAreaSourceVideoSourceType(params ...string) (*RetailAreaSourceVideoSourceType, error) {
	resource := new(RetailAreaSourceVideoSourceType)

	reflectRetailAreaSourceVideoSourceType, err := utils.FindModelPluginObject(d.device, "RetailAreaSourceVideoSourceType", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToRetailAreaSourceVideoSourceType(reflectRetailAreaSourceVideoSourceType, params...)
	return resource, err

}

// ToRetailAreaSourceVideoSourceType converts gNMI to OAPI relative to a node in the tree.
func ToRetailAreaSourceVideoSourceType(ygotObjValue *reflect.Value, params ...string) (*RetailAreaSourceVideoSourceType, error) {
	resource := new(RetailAreaSourceVideoSourceType)

	return resource, nil
}

// ToShelfMonitoring converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToShelfMonitoring(params ...string) (*ShelfMonitoring, error) {
	resource := new(ShelfMonitoring)

	reflectShelfMonitoring, err := utils.FindModelPluginObject(d.device, "ShelfMonitoring", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToShelfMonitoring(reflectShelfMonitoring, params...)
	return resource, err

}

// ToShelfMonitoring converts gNMI to OAPI relative to a node in the tree.
func ToShelfMonitoring(ygotObjValue *reflect.Value, params ...string) (*ShelfMonitoring, error) {
	resource := new(ShelfMonitoring)

	// Property: default string
	//encoding gNMI attribute to OAPI
	reflectDefault, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Default")
	if err != nil {
		return nil, err
	}
	if reflectDefault != nil && isNotNil(reflectDefault.Interface()) {
		attrDefault := fmt.Sprintf("%v", reflectDefault.Interface())
		resource.Default = &attrDefault
	}

	// Property: enable bool
	//encoding gNMI attribute to OAPI
	reflectEnable, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Enable")
	if err != nil {
		return nil, err
	}
	if reflectEnable != nil && isNotNil(reflectEnable.Interface()) {
		boolEnable := reflectEnable.Interface().(bool)
		resource.Enable = boolEnable
	} else {
		resource.Enable = false
	}

	// Property: object-detection-application ShelfMonitoringObjectDetectionApplication
	// Handle object
	reflectObjectDetectionApplication, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "ObjectDetectionApplication")
	if err != nil {
		return nil, err
	}
	if reflectObjectDetectionApplication != nil && isNotNil(reflectObjectDetectionApplication.Interface()) {
		attrObjectDetectionApplication, err := ToShelfMonitoringObjectDetectionApplication(reflectObjectDetectionApplication, params...)
		if err != nil {
			return nil, err
		}
		resource.ObjectDetectionApplication = attrObjectDetectionApplication
	}

	// Property: retail-area ShelfMonitoringRetailAreaList
	// Handle object
	reflectRetailArea, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "RetailArea")
	if err != nil {
		return nil, err
	}
	if reflectRetailArea != nil && isNotNil(reflectRetailArea.Interface()) {
		attrRetailArea, err := ToShelfMonitoringRetailAreaList(reflectRetailArea, params...)
		if err != nil {
			return nil, err
		}
		resource.RetailArea = attrRetailArea
	}

	return resource, nil
}

// ToShelfMonitoringObjectDetectionApplication converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToShelfMonitoringObjectDetectionApplication(params ...string) (*ShelfMonitoringObjectDetectionApplication, error) {
	resource := new(ShelfMonitoringObjectDetectionApplication)

	reflectShelfMonitoringObjectDetectionApplication, err := utils.FindModelPluginObject(d.device, "ShelfMonitoringObjectDetectionApplication", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToShelfMonitoringObjectDetectionApplication(reflectShelfMonitoringObjectDetectionApplication, params...)
	return resource, err

}

// ToShelfMonitoringObjectDetectionApplication converts gNMI to OAPI relative to a node in the tree.
func ToShelfMonitoringObjectDetectionApplication(ygotObjValue *reflect.Value, params ...string) (*ShelfMonitoringObjectDetectionApplication, error) {
	resource := new(ShelfMonitoringObjectDetectionApplication)

	// Property: device string
	// Enums handling
	reflectDevice, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Device")
	if err != nil {
		return nil, err
	}
	attrDevice := reflectDevice.Interface()
	_, yangDefDevice, err := utils.ExtractGnmiEnumMap(ygotObjValue, "ShelfMonitoringObjectDetectionApplicationDevice", attrDevice)
	if err != nil {
		return nil, err
	}
	if yangDefDevice != nil {
		resource.Device = (ShelfMonitoringObjectDetectionApplicationDevice)(yangDefDevice.Name)
	}

	// Property: model string
	//encoding gNMI attribute to OAPI
	reflectModel, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Model")
	if err != nil {
		return nil, err
	}
	if reflectModel != nil && isNotNil(reflectModel.Interface()) {
		attrModel := fmt.Sprintf("%v", reflectModel.Interface())
		resource.Model = &attrModel
	}

	// Property: model-state ShelfMonitoringObjectDetectionApplicationModelState
	// Handle object
	reflectModelState, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "ModelState")
	if err != nil {
		return nil, err
	}
	if reflectModelState != nil && isNotNil(reflectModelState.Interface()) {
		attrModelState, err := ToShelfMonitoringObjectDetectionApplicationModelState(reflectModelState, params...)
		if err != nil {
			return nil, err
		}
		resource.ModelState = attrModelState
	}

	// Property: precision string
	// Enums handling
	reflectPrecision, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Precision")
	if err != nil {
		return nil, err
	}
	attrPrecision := reflectPrecision.Interface()
	_, yangDefPrecision, err := utils.ExtractGnmiEnumMap(ygotObjValue, "ShelfMonitoringObjectDetectionApplicationPrecision", attrPrecision)
	if err != nil {
		return nil, err
	}
	if yangDefPrecision != nil {
		resource.Precision = (ShelfMonitoringObjectDetectionApplicationPrecision)(yangDefPrecision.Name)
	}

	return resource, nil
}

// ToShelfMonitoringObjectDetectionApplicationDevice converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToShelfMonitoringObjectDetectionApplicationDevice(params ...string) (*ShelfMonitoringObjectDetectionApplicationDevice, error) {
	resource := new(ShelfMonitoringObjectDetectionApplicationDevice)

	reflectShelfMonitoringObjectDetectionApplicationDevice, err := utils.FindModelPluginObject(d.device, "ShelfMonitoringObjectDetectionApplicationDevice", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToShelfMonitoringObjectDetectionApplicationDevice(reflectShelfMonitoringObjectDetectionApplicationDevice, params...)
	return resource, err

}

// ToShelfMonitoringObjectDetectionApplicationDevice converts gNMI to OAPI relative to a node in the tree.
func ToShelfMonitoringObjectDetectionApplicationDevice(ygotObjValue *reflect.Value, params ...string) (*ShelfMonitoringObjectDetectionApplicationDevice, error) {
	resource := new(ShelfMonitoringObjectDetectionApplicationDevice)

	return resource, nil
}

// ToShelfMonitoringObjectDetectionApplicationPrecision converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToShelfMonitoringObjectDetectionApplicationPrecision(params ...string) (*ShelfMonitoringObjectDetectionApplicationPrecision, error) {
	resource := new(ShelfMonitoringObjectDetectionApplicationPrecision)

	reflectShelfMonitoringObjectDetectionApplicationPrecision, err := utils.FindModelPluginObject(d.device, "ShelfMonitoringObjectDetectionApplicationPrecision", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToShelfMonitoringObjectDetectionApplicationPrecision(reflectShelfMonitoringObjectDetectionApplicationPrecision, params...)
	return resource, err

}

// ToShelfMonitoringObjectDetectionApplicationPrecision converts gNMI to OAPI relative to a node in the tree.
func ToShelfMonitoringObjectDetectionApplicationPrecision(ygotObjValue *reflect.Value, params ...string) (*ShelfMonitoringObjectDetectionApplicationPrecision, error) {
	resource := new(ShelfMonitoringObjectDetectionApplicationPrecision)

	return resource, nil
}

// ToShelfMonitoringObjectDetectionApplicationModelState converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToShelfMonitoringObjectDetectionApplicationModelState(params ...string) (*ShelfMonitoringObjectDetectionApplicationModelState, error) {
	resource := new(ShelfMonitoringObjectDetectionApplicationModelState)

	reflectShelfMonitoringObjectDetectionApplicationModelState, err := utils.FindModelPluginObject(d.device, "ShelfMonitoringObjectDetectionApplicationModelState", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToShelfMonitoringObjectDetectionApplicationModelState(reflectShelfMonitoringObjectDetectionApplicationModelState, params...)
	return resource, err

}

// ToShelfMonitoringObjectDetectionApplicationModelState converts gNMI to OAPI relative to a node in the tree.
func ToShelfMonitoringObjectDetectionApplicationModelState(ygotObjValue *reflect.Value, params ...string) (*ShelfMonitoringObjectDetectionApplicationModelState, error) {
	resource := new(ShelfMonitoringObjectDetectionApplicationModelState)

	// Property: active-model-file string
	//encoding gNMI attribute to OAPI
	reflectActiveModelFile, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "ActiveModelFile")
	if err != nil {
		return nil, err
	}
	if reflectActiveModelFile != nil && isNotNil(reflectActiveModelFile.Interface()) {
		attrActiveModelFile := fmt.Sprintf("%v", reflectActiveModelFile.Interface())
		resource.ActiveModelFile = &attrActiveModelFile
	}

	// Property: active-model-name string
	//encoding gNMI attribute to OAPI
	reflectActiveModelName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "ActiveModelName")
	if err != nil {
		return nil, err
	}
	if reflectActiveModelName != nil && isNotNil(reflectActiveModelName.Interface()) {
		attrActiveModelName := fmt.Sprintf("%v", reflectActiveModelName.Interface())
		resource.ActiveModelName = &attrActiveModelName
	}

	return resource, nil
}

// ToShelfMonitoringRetailArea converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToShelfMonitoringRetailArea(params ...string) (*ShelfMonitoringRetailArea, error) {
	resource := new(ShelfMonitoringRetailArea)

	reflectShelfMonitoringRetailArea, err := utils.FindModelPluginObject(d.device, "ShelfMonitoringRetailArea", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToShelfMonitoringRetailArea(reflectShelfMonitoringRetailArea, params...)
	return resource, err

}

// ToShelfMonitoringRetailArea converts gNMI to OAPI relative to a node in the tree.
func ToShelfMonitoringRetailArea(ygotObjValue *reflect.Value, params ...string) (*ShelfMonitoringRetailArea, error) {
	resource := new(ShelfMonitoringRetailArea)

	// Property: area-ref ListKey
	//encoding gNMI attribute to OAPI
	reflectAreaRef, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "AreaRef")
	if err != nil {
		return nil, err
	}
	if reflectAreaRef != nil && isNotNil(reflectAreaRef.Interface()) {
		attrAreaRef := ListKey(reflectAreaRef.Interface().(string))
		resource.AreaRef = attrAreaRef
	} else {
		resource.AreaRef = ListKey("")
	}

	// Property: enabled bool
	//encoding gNMI attribute to OAPI
	reflectEnabled, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Enabled")
	if err != nil {
		return nil, err
	}
	if reflectEnabled != nil && isNotNil(reflectEnabled.Interface()) {
		boolEnabled := reflectEnabled.Interface().(bool)
		resource.Enabled = boolEnabled
	} else {
		resource.Enabled = false
	}

	// Property: stream-count int
	//encoding gNMI attribute to OAPI
	reflectStreamCount, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "StreamCount")
	if err != nil {
		return nil, err
	}
	if reflectStreamCount != nil && isNotNil(reflectStreamCount.Interface()) {
		//OpenAPI does not have unsigned numbers.
		if resource.StreamCount, err = utils.ToIntPtr(reflectStreamCount); err != nil {
			return nil, err
		}
	}

	return resource, nil
}

// ToShelfMonitoringRetailAreaList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToShelfMonitoringRetailAreaList(params ...string) (*ShelfMonitoringRetailAreaList, error) {
	resource := new(ShelfMonitoringRetailAreaList)

	// Array list - Go type ShelfMonitoringRetailArea
	mpObject, err := utils.FindModelPluginObject(d.device, "ShelfMonitoringRetailArea", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToShelfMonitoringRetailArea(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// ToShelfMonitoringRetailAreaList converts gNMI to OAPI relative to a node in the tree.
func ToShelfMonitoringRetailAreaList(ygotObjValue *reflect.Value, params ...string) (*ShelfMonitoringRetailAreaList, error) {
	resource := new(ShelfMonitoringRetailAreaList)

	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToShelfMonitoringRetailArea(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil
}

// ToShopperMonitoring converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToShopperMonitoring(params ...string) (*ShopperMonitoring, error) {
	resource := new(ShopperMonitoring)

	reflectShopperMonitoring, err := utils.FindModelPluginObject(d.device, "ShopperMonitoring", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToShopperMonitoring(reflectShopperMonitoring, params...)
	return resource, err

}

// ToShopperMonitoring converts gNMI to OAPI relative to a node in the tree.
func ToShopperMonitoring(ygotObjValue *reflect.Value, params ...string) (*ShopperMonitoring, error) {
	resource := new(ShopperMonitoring)

	// Property: default string
	//encoding gNMI attribute to OAPI
	reflectDefault, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Default")
	if err != nil {
		return nil, err
	}
	if reflectDefault != nil && isNotNil(reflectDefault.Interface()) {
		attrDefault := fmt.Sprintf("%v", reflectDefault.Interface())
		resource.Default = &attrDefault
	}

	// Property: emotion-recognition-application ShopperMonitoringEmotionRecognitionApplication
	// Handle object
	reflectEmotionRecognitionApplication, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "EmotionRecognitionApplication")
	if err != nil {
		return nil, err
	}
	if reflectEmotionRecognitionApplication != nil && isNotNil(reflectEmotionRecognitionApplication.Interface()) {
		attrEmotionRecognitionApplication, err := ToShopperMonitoringEmotionRecognitionApplication(reflectEmotionRecognitionApplication, params...)
		if err != nil {
			return nil, err
		}
		resource.EmotionRecognitionApplication = attrEmotionRecognitionApplication
	}

	// Property: enable bool
	//encoding gNMI attribute to OAPI
	reflectEnable, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Enable")
	if err != nil {
		return nil, err
	}
	if reflectEnable != nil && isNotNil(reflectEnable.Interface()) {
		boolEnable := reflectEnable.Interface().(bool)
		resource.Enable = boolEnable
	} else {
		resource.Enable = false
	}

	// Property: face-detection-application ShopperMonitoringFaceDetectionApplication
	// Handle object
	reflectFaceDetectionApplication, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "FaceDetectionApplication")
	if err != nil {
		return nil, err
	}
	if reflectFaceDetectionApplication != nil && isNotNil(reflectFaceDetectionApplication.Interface()) {
		attrFaceDetectionApplication, err := ToShopperMonitoringFaceDetectionApplication(reflectFaceDetectionApplication, params...)
		if err != nil {
			return nil, err
		}
		resource.FaceDetectionApplication = attrFaceDetectionApplication
	}

	// Property: head-pose-detection-application ShopperMonitoringHeadPoseDetectionApplication
	// Handle object
	reflectHeadPoseDetectionApplication, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "HeadPoseDetectionApplication")
	if err != nil {
		return nil, err
	}
	if reflectHeadPoseDetectionApplication != nil && isNotNil(reflectHeadPoseDetectionApplication.Interface()) {
		attrHeadPoseDetectionApplication, err := ToShopperMonitoringHeadPoseDetectionApplication(reflectHeadPoseDetectionApplication, params...)
		if err != nil {
			return nil, err
		}
		resource.HeadPoseDetectionApplication = attrHeadPoseDetectionApplication
	}

	// Property: retail-area ShopperMonitoringRetailAreaList
	// Handle object
	reflectRetailArea, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "RetailArea")
	if err != nil {
		return nil, err
	}
	if reflectRetailArea != nil && isNotNil(reflectRetailArea.Interface()) {
		attrRetailArea, err := ToShopperMonitoringRetailAreaList(reflectRetailArea, params...)
		if err != nil {
			return nil, err
		}
		resource.RetailArea = attrRetailArea
	}

	return resource, nil
}

// ToShopperMonitoringEmotionRecognitionApplication converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToShopperMonitoringEmotionRecognitionApplication(params ...string) (*ShopperMonitoringEmotionRecognitionApplication, error) {
	resource := new(ShopperMonitoringEmotionRecognitionApplication)

	reflectShopperMonitoringEmotionRecognitionApplication, err := utils.FindModelPluginObject(d.device, "ShopperMonitoringEmotionRecognitionApplication", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToShopperMonitoringEmotionRecognitionApplication(reflectShopperMonitoringEmotionRecognitionApplication, params...)
	return resource, err

}

// ToShopperMonitoringEmotionRecognitionApplication converts gNMI to OAPI relative to a node in the tree.
func ToShopperMonitoringEmotionRecognitionApplication(ygotObjValue *reflect.Value, params ...string) (*ShopperMonitoringEmotionRecognitionApplication, error) {
	resource := new(ShopperMonitoringEmotionRecognitionApplication)

	// Property: device string
	// Enums handling
	reflectDevice, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Device")
	if err != nil {
		return nil, err
	}
	attrDevice := reflectDevice.Interface()
	_, yangDefDevice, err := utils.ExtractGnmiEnumMap(ygotObjValue, "ShopperMonitoringEmotionRecognitionApplicationDevice", attrDevice)
	if err != nil {
		return nil, err
	}
	if yangDefDevice != nil {
		resource.Device = (ShopperMonitoringEmotionRecognitionApplicationDevice)(yangDefDevice.Name)
	}

	// Property: model string
	//encoding gNMI attribute to OAPI
	reflectModel, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Model")
	if err != nil {
		return nil, err
	}
	if reflectModel != nil && isNotNil(reflectModel.Interface()) {
		attrModel := fmt.Sprintf("%v", reflectModel.Interface())
		resource.Model = &attrModel
	}

	// Property: model-state ShopperMonitoringEmotionRecognitionApplicationModelState
	// Handle object
	reflectModelState, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "ModelState")
	if err != nil {
		return nil, err
	}
	if reflectModelState != nil && isNotNil(reflectModelState.Interface()) {
		attrModelState, err := ToShopperMonitoringEmotionRecognitionApplicationModelState(reflectModelState, params...)
		if err != nil {
			return nil, err
		}
		resource.ModelState = attrModelState
	}

	// Property: precision string
	// Enums handling
	reflectPrecision, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Precision")
	if err != nil {
		return nil, err
	}
	attrPrecision := reflectPrecision.Interface()
	_, yangDefPrecision, err := utils.ExtractGnmiEnumMap(ygotObjValue, "ShopperMonitoringEmotionRecognitionApplicationPrecision", attrPrecision)
	if err != nil {
		return nil, err
	}
	if yangDefPrecision != nil {
		resource.Precision = (ShopperMonitoringEmotionRecognitionApplicationPrecision)(yangDefPrecision.Name)
	}

	return resource, nil
}

// ToShopperMonitoringEmotionRecognitionApplicationDevice converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToShopperMonitoringEmotionRecognitionApplicationDevice(params ...string) (*ShopperMonitoringEmotionRecognitionApplicationDevice, error) {
	resource := new(ShopperMonitoringEmotionRecognitionApplicationDevice)

	reflectShopperMonitoringEmotionRecognitionApplicationDevice, err := utils.FindModelPluginObject(d.device, "ShopperMonitoringEmotionRecognitionApplicationDevice", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToShopperMonitoringEmotionRecognitionApplicationDevice(reflectShopperMonitoringEmotionRecognitionApplicationDevice, params...)
	return resource, err

}

// ToShopperMonitoringEmotionRecognitionApplicationDevice converts gNMI to OAPI relative to a node in the tree.
func ToShopperMonitoringEmotionRecognitionApplicationDevice(ygotObjValue *reflect.Value, params ...string) (*ShopperMonitoringEmotionRecognitionApplicationDevice, error) {
	resource := new(ShopperMonitoringEmotionRecognitionApplicationDevice)

	return resource, nil
}

// ToShopperMonitoringEmotionRecognitionApplicationPrecision converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToShopperMonitoringEmotionRecognitionApplicationPrecision(params ...string) (*ShopperMonitoringEmotionRecognitionApplicationPrecision, error) {
	resource := new(ShopperMonitoringEmotionRecognitionApplicationPrecision)

	reflectShopperMonitoringEmotionRecognitionApplicationPrecision, err := utils.FindModelPluginObject(d.device, "ShopperMonitoringEmotionRecognitionApplicationPrecision", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToShopperMonitoringEmotionRecognitionApplicationPrecision(reflectShopperMonitoringEmotionRecognitionApplicationPrecision, params...)
	return resource, err

}

// ToShopperMonitoringEmotionRecognitionApplicationPrecision converts gNMI to OAPI relative to a node in the tree.
func ToShopperMonitoringEmotionRecognitionApplicationPrecision(ygotObjValue *reflect.Value, params ...string) (*ShopperMonitoringEmotionRecognitionApplicationPrecision, error) {
	resource := new(ShopperMonitoringEmotionRecognitionApplicationPrecision)

	return resource, nil
}

// ToShopperMonitoringEmotionRecognitionApplicationModelState converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToShopperMonitoringEmotionRecognitionApplicationModelState(params ...string) (*ShopperMonitoringEmotionRecognitionApplicationModelState, error) {
	resource := new(ShopperMonitoringEmotionRecognitionApplicationModelState)

	reflectShopperMonitoringEmotionRecognitionApplicationModelState, err := utils.FindModelPluginObject(d.device, "ShopperMonitoringEmotionRecognitionApplicationModelState", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToShopperMonitoringEmotionRecognitionApplicationModelState(reflectShopperMonitoringEmotionRecognitionApplicationModelState, params...)
	return resource, err

}

// ToShopperMonitoringEmotionRecognitionApplicationModelState converts gNMI to OAPI relative to a node in the tree.
func ToShopperMonitoringEmotionRecognitionApplicationModelState(ygotObjValue *reflect.Value, params ...string) (*ShopperMonitoringEmotionRecognitionApplicationModelState, error) {
	resource := new(ShopperMonitoringEmotionRecognitionApplicationModelState)

	// Property: active-model-file string
	//encoding gNMI attribute to OAPI
	reflectActiveModelFile, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "ActiveModelFile")
	if err != nil {
		return nil, err
	}
	if reflectActiveModelFile != nil && isNotNil(reflectActiveModelFile.Interface()) {
		attrActiveModelFile := fmt.Sprintf("%v", reflectActiveModelFile.Interface())
		resource.ActiveModelFile = &attrActiveModelFile
	}

	// Property: active-model-name string
	//encoding gNMI attribute to OAPI
	reflectActiveModelName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "ActiveModelName")
	if err != nil {
		return nil, err
	}
	if reflectActiveModelName != nil && isNotNil(reflectActiveModelName.Interface()) {
		attrActiveModelName := fmt.Sprintf("%v", reflectActiveModelName.Interface())
		resource.ActiveModelName = &attrActiveModelName
	}

	return resource, nil
}

// ToShopperMonitoringFaceDetectionApplication converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToShopperMonitoringFaceDetectionApplication(params ...string) (*ShopperMonitoringFaceDetectionApplication, error) {
	resource := new(ShopperMonitoringFaceDetectionApplication)

	reflectShopperMonitoringFaceDetectionApplication, err := utils.FindModelPluginObject(d.device, "ShopperMonitoringFaceDetectionApplication", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToShopperMonitoringFaceDetectionApplication(reflectShopperMonitoringFaceDetectionApplication, params...)
	return resource, err

}

// ToShopperMonitoringFaceDetectionApplication converts gNMI to OAPI relative to a node in the tree.
func ToShopperMonitoringFaceDetectionApplication(ygotObjValue *reflect.Value, params ...string) (*ShopperMonitoringFaceDetectionApplication, error) {
	resource := new(ShopperMonitoringFaceDetectionApplication)

	// Property: device string
	// Enums handling
	reflectDevice, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Device")
	if err != nil {
		return nil, err
	}
	attrDevice := reflectDevice.Interface()
	_, yangDefDevice, err := utils.ExtractGnmiEnumMap(ygotObjValue, "ShopperMonitoringFaceDetectionApplicationDevice", attrDevice)
	if err != nil {
		return nil, err
	}
	if yangDefDevice != nil {
		resource.Device = (ShopperMonitoringFaceDetectionApplicationDevice)(yangDefDevice.Name)
	}

	// Property: model string
	//encoding gNMI attribute to OAPI
	reflectModel, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Model")
	if err != nil {
		return nil, err
	}
	if reflectModel != nil && isNotNil(reflectModel.Interface()) {
		attrModel := fmt.Sprintf("%v", reflectModel.Interface())
		resource.Model = &attrModel
	}

	// Property: model-state ShopperMonitoringFaceDetectionApplicationModelState
	// Handle object
	reflectModelState, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "ModelState")
	if err != nil {
		return nil, err
	}
	if reflectModelState != nil && isNotNil(reflectModelState.Interface()) {
		attrModelState, err := ToShopperMonitoringFaceDetectionApplicationModelState(reflectModelState, params...)
		if err != nil {
			return nil, err
		}
		resource.ModelState = attrModelState
	}

	// Property: precision string
	// Enums handling
	reflectPrecision, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Precision")
	if err != nil {
		return nil, err
	}
	attrPrecision := reflectPrecision.Interface()
	_, yangDefPrecision, err := utils.ExtractGnmiEnumMap(ygotObjValue, "ShopperMonitoringFaceDetectionApplicationPrecision", attrPrecision)
	if err != nil {
		return nil, err
	}
	if yangDefPrecision != nil {
		resource.Precision = (ShopperMonitoringFaceDetectionApplicationPrecision)(yangDefPrecision.Name)
	}

	return resource, nil
}

// ToShopperMonitoringFaceDetectionApplicationDevice converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToShopperMonitoringFaceDetectionApplicationDevice(params ...string) (*ShopperMonitoringFaceDetectionApplicationDevice, error) {
	resource := new(ShopperMonitoringFaceDetectionApplicationDevice)

	reflectShopperMonitoringFaceDetectionApplicationDevice, err := utils.FindModelPluginObject(d.device, "ShopperMonitoringFaceDetectionApplicationDevice", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToShopperMonitoringFaceDetectionApplicationDevice(reflectShopperMonitoringFaceDetectionApplicationDevice, params...)
	return resource, err

}

// ToShopperMonitoringFaceDetectionApplicationDevice converts gNMI to OAPI relative to a node in the tree.
func ToShopperMonitoringFaceDetectionApplicationDevice(ygotObjValue *reflect.Value, params ...string) (*ShopperMonitoringFaceDetectionApplicationDevice, error) {
	resource := new(ShopperMonitoringFaceDetectionApplicationDevice)

	return resource, nil
}

// ToShopperMonitoringFaceDetectionApplicationPrecision converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToShopperMonitoringFaceDetectionApplicationPrecision(params ...string) (*ShopperMonitoringFaceDetectionApplicationPrecision, error) {
	resource := new(ShopperMonitoringFaceDetectionApplicationPrecision)

	reflectShopperMonitoringFaceDetectionApplicationPrecision, err := utils.FindModelPluginObject(d.device, "ShopperMonitoringFaceDetectionApplicationPrecision", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToShopperMonitoringFaceDetectionApplicationPrecision(reflectShopperMonitoringFaceDetectionApplicationPrecision, params...)
	return resource, err

}

// ToShopperMonitoringFaceDetectionApplicationPrecision converts gNMI to OAPI relative to a node in the tree.
func ToShopperMonitoringFaceDetectionApplicationPrecision(ygotObjValue *reflect.Value, params ...string) (*ShopperMonitoringFaceDetectionApplicationPrecision, error) {
	resource := new(ShopperMonitoringFaceDetectionApplicationPrecision)

	return resource, nil
}

// ToShopperMonitoringFaceDetectionApplicationModelState converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToShopperMonitoringFaceDetectionApplicationModelState(params ...string) (*ShopperMonitoringFaceDetectionApplicationModelState, error) {
	resource := new(ShopperMonitoringFaceDetectionApplicationModelState)

	reflectShopperMonitoringFaceDetectionApplicationModelState, err := utils.FindModelPluginObject(d.device, "ShopperMonitoringFaceDetectionApplicationModelState", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToShopperMonitoringFaceDetectionApplicationModelState(reflectShopperMonitoringFaceDetectionApplicationModelState, params...)
	return resource, err

}

// ToShopperMonitoringFaceDetectionApplicationModelState converts gNMI to OAPI relative to a node in the tree.
func ToShopperMonitoringFaceDetectionApplicationModelState(ygotObjValue *reflect.Value, params ...string) (*ShopperMonitoringFaceDetectionApplicationModelState, error) {
	resource := new(ShopperMonitoringFaceDetectionApplicationModelState)

	// Property: active-model-file string
	//encoding gNMI attribute to OAPI
	reflectActiveModelFile, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "ActiveModelFile")
	if err != nil {
		return nil, err
	}
	if reflectActiveModelFile != nil && isNotNil(reflectActiveModelFile.Interface()) {
		attrActiveModelFile := fmt.Sprintf("%v", reflectActiveModelFile.Interface())
		resource.ActiveModelFile = &attrActiveModelFile
	}

	// Property: active-model-name string
	//encoding gNMI attribute to OAPI
	reflectActiveModelName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "ActiveModelName")
	if err != nil {
		return nil, err
	}
	if reflectActiveModelName != nil && isNotNil(reflectActiveModelName.Interface()) {
		attrActiveModelName := fmt.Sprintf("%v", reflectActiveModelName.Interface())
		resource.ActiveModelName = &attrActiveModelName
	}

	return resource, nil
}

// ToShopperMonitoringHeadPoseDetectionApplication converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToShopperMonitoringHeadPoseDetectionApplication(params ...string) (*ShopperMonitoringHeadPoseDetectionApplication, error) {
	resource := new(ShopperMonitoringHeadPoseDetectionApplication)

	reflectShopperMonitoringHeadPoseDetectionApplication, err := utils.FindModelPluginObject(d.device, "ShopperMonitoringHeadPoseDetectionApplication", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToShopperMonitoringHeadPoseDetectionApplication(reflectShopperMonitoringHeadPoseDetectionApplication, params...)
	return resource, err

}

// ToShopperMonitoringHeadPoseDetectionApplication converts gNMI to OAPI relative to a node in the tree.
func ToShopperMonitoringHeadPoseDetectionApplication(ygotObjValue *reflect.Value, params ...string) (*ShopperMonitoringHeadPoseDetectionApplication, error) {
	resource := new(ShopperMonitoringHeadPoseDetectionApplication)

	// Property: device string
	// Enums handling
	reflectDevice, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Device")
	if err != nil {
		return nil, err
	}
	attrDevice := reflectDevice.Interface()
	_, yangDefDevice, err := utils.ExtractGnmiEnumMap(ygotObjValue, "ShopperMonitoringHeadPoseDetectionApplicationDevice", attrDevice)
	if err != nil {
		return nil, err
	}
	if yangDefDevice != nil {
		resource.Device = (ShopperMonitoringHeadPoseDetectionApplicationDevice)(yangDefDevice.Name)
	}

	// Property: model string
	//encoding gNMI attribute to OAPI
	reflectModel, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Model")
	if err != nil {
		return nil, err
	}
	if reflectModel != nil && isNotNil(reflectModel.Interface()) {
		attrModel := fmt.Sprintf("%v", reflectModel.Interface())
		resource.Model = &attrModel
	}

	// Property: model-state ShopperMonitoringHeadPoseDetectionApplicationModelState
	// Handle object
	reflectModelState, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "ModelState")
	if err != nil {
		return nil, err
	}
	if reflectModelState != nil && isNotNil(reflectModelState.Interface()) {
		attrModelState, err := ToShopperMonitoringHeadPoseDetectionApplicationModelState(reflectModelState, params...)
		if err != nil {
			return nil, err
		}
		resource.ModelState = attrModelState
	}

	// Property: precision string
	// Enums handling
	reflectPrecision, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Precision")
	if err != nil {
		return nil, err
	}
	attrPrecision := reflectPrecision.Interface()
	_, yangDefPrecision, err := utils.ExtractGnmiEnumMap(ygotObjValue, "ShopperMonitoringHeadPoseDetectionApplicationPrecision", attrPrecision)
	if err != nil {
		return nil, err
	}
	if yangDefPrecision != nil {
		resource.Precision = (ShopperMonitoringHeadPoseDetectionApplicationPrecision)(yangDefPrecision.Name)
	}

	return resource, nil
}

// ToShopperMonitoringHeadPoseDetectionApplicationDevice converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToShopperMonitoringHeadPoseDetectionApplicationDevice(params ...string) (*ShopperMonitoringHeadPoseDetectionApplicationDevice, error) {
	resource := new(ShopperMonitoringHeadPoseDetectionApplicationDevice)

	reflectShopperMonitoringHeadPoseDetectionApplicationDevice, err := utils.FindModelPluginObject(d.device, "ShopperMonitoringHeadPoseDetectionApplicationDevice", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToShopperMonitoringHeadPoseDetectionApplicationDevice(reflectShopperMonitoringHeadPoseDetectionApplicationDevice, params...)
	return resource, err

}

// ToShopperMonitoringHeadPoseDetectionApplicationDevice converts gNMI to OAPI relative to a node in the tree.
func ToShopperMonitoringHeadPoseDetectionApplicationDevice(ygotObjValue *reflect.Value, params ...string) (*ShopperMonitoringHeadPoseDetectionApplicationDevice, error) {
	resource := new(ShopperMonitoringHeadPoseDetectionApplicationDevice)

	return resource, nil
}

// ToShopperMonitoringHeadPoseDetectionApplicationPrecision converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToShopperMonitoringHeadPoseDetectionApplicationPrecision(params ...string) (*ShopperMonitoringHeadPoseDetectionApplicationPrecision, error) {
	resource := new(ShopperMonitoringHeadPoseDetectionApplicationPrecision)

	reflectShopperMonitoringHeadPoseDetectionApplicationPrecision, err := utils.FindModelPluginObject(d.device, "ShopperMonitoringHeadPoseDetectionApplicationPrecision", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToShopperMonitoringHeadPoseDetectionApplicationPrecision(reflectShopperMonitoringHeadPoseDetectionApplicationPrecision, params...)
	return resource, err

}

// ToShopperMonitoringHeadPoseDetectionApplicationPrecision converts gNMI to OAPI relative to a node in the tree.
func ToShopperMonitoringHeadPoseDetectionApplicationPrecision(ygotObjValue *reflect.Value, params ...string) (*ShopperMonitoringHeadPoseDetectionApplicationPrecision, error) {
	resource := new(ShopperMonitoringHeadPoseDetectionApplicationPrecision)

	return resource, nil
}

// ToShopperMonitoringHeadPoseDetectionApplicationModelState converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToShopperMonitoringHeadPoseDetectionApplicationModelState(params ...string) (*ShopperMonitoringHeadPoseDetectionApplicationModelState, error) {
	resource := new(ShopperMonitoringHeadPoseDetectionApplicationModelState)

	reflectShopperMonitoringHeadPoseDetectionApplicationModelState, err := utils.FindModelPluginObject(d.device, "ShopperMonitoringHeadPoseDetectionApplicationModelState", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToShopperMonitoringHeadPoseDetectionApplicationModelState(reflectShopperMonitoringHeadPoseDetectionApplicationModelState, params...)
	return resource, err

}

// ToShopperMonitoringHeadPoseDetectionApplicationModelState converts gNMI to OAPI relative to a node in the tree.
func ToShopperMonitoringHeadPoseDetectionApplicationModelState(ygotObjValue *reflect.Value, params ...string) (*ShopperMonitoringHeadPoseDetectionApplicationModelState, error) {
	resource := new(ShopperMonitoringHeadPoseDetectionApplicationModelState)

	// Property: active-model-file string
	//encoding gNMI attribute to OAPI
	reflectActiveModelFile, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "ActiveModelFile")
	if err != nil {
		return nil, err
	}
	if reflectActiveModelFile != nil && isNotNil(reflectActiveModelFile.Interface()) {
		attrActiveModelFile := fmt.Sprintf("%v", reflectActiveModelFile.Interface())
		resource.ActiveModelFile = &attrActiveModelFile
	}

	// Property: active-model-name string
	//encoding gNMI attribute to OAPI
	reflectActiveModelName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "ActiveModelName")
	if err != nil {
		return nil, err
	}
	if reflectActiveModelName != nil && isNotNil(reflectActiveModelName.Interface()) {
		attrActiveModelName := fmt.Sprintf("%v", reflectActiveModelName.Interface())
		resource.ActiveModelName = &attrActiveModelName
	}

	return resource, nil
}

// ToShopperMonitoringRetailArea converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToShopperMonitoringRetailArea(params ...string) (*ShopperMonitoringRetailArea, error) {
	resource := new(ShopperMonitoringRetailArea)

	reflectShopperMonitoringRetailArea, err := utils.FindModelPluginObject(d.device, "ShopperMonitoringRetailArea", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToShopperMonitoringRetailArea(reflectShopperMonitoringRetailArea, params...)
	return resource, err

}

// ToShopperMonitoringRetailArea converts gNMI to OAPI relative to a node in the tree.
func ToShopperMonitoringRetailArea(ygotObjValue *reflect.Value, params ...string) (*ShopperMonitoringRetailArea, error) {
	resource := new(ShopperMonitoringRetailArea)

	// Property: area-ref ListKey
	//encoding gNMI attribute to OAPI
	reflectAreaRef, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "AreaRef")
	if err != nil {
		return nil, err
	}
	if reflectAreaRef != nil && isNotNil(reflectAreaRef.Interface()) {
		attrAreaRef := ListKey(reflectAreaRef.Interface().(string))
		resource.AreaRef = attrAreaRef
	} else {
		resource.AreaRef = ListKey("")
	}

	// Property: enabled bool
	//encoding gNMI attribute to OAPI
	reflectEnabled, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Enabled")
	if err != nil {
		return nil, err
	}
	if reflectEnabled != nil && isNotNil(reflectEnabled.Interface()) {
		boolEnabled := reflectEnabled.Interface().(bool)
		resource.Enabled = boolEnabled
	} else {
		resource.Enabled = false
	}

	// Property: stream-count int
	//encoding gNMI attribute to OAPI
	reflectStreamCount, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "StreamCount")
	if err != nil {
		return nil, err
	}
	if reflectStreamCount != nil && isNotNil(reflectStreamCount.Interface()) {
		//OpenAPI does not have unsigned numbers.
		if resource.StreamCount, err = utils.ToIntPtr(reflectStreamCount); err != nil {
			return nil, err
		}
	}

	return resource, nil
}

// ToShopperMonitoringRetailAreaList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToShopperMonitoringRetailAreaList(params ...string) (*ShopperMonitoringRetailAreaList, error) {
	resource := new(ShopperMonitoringRetailAreaList)

	// Array list - Go type ShopperMonitoringRetailArea
	mpObject, err := utils.FindModelPluginObject(d.device, "ShopperMonitoringRetailArea", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToShopperMonitoringRetailArea(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// ToShopperMonitoringRetailAreaList converts gNMI to OAPI relative to a node in the tree.
func ToShopperMonitoringRetailAreaList(ygotObjValue *reflect.Value, params ...string) (*ShopperMonitoringRetailAreaList, error) {
	resource := new(ShopperMonitoringRetailAreaList)

	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToShopperMonitoringRetailArea(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil
}

// ToStoreTrafficMonitoring converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToStoreTrafficMonitoring(params ...string) (*StoreTrafficMonitoring, error) {
	resource := new(StoreTrafficMonitoring)

	reflectStoreTrafficMonitoring, err := utils.FindModelPluginObject(d.device, "StoreTrafficMonitoring", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToStoreTrafficMonitoring(reflectStoreTrafficMonitoring, params...)
	return resource, err

}

// ToStoreTrafficMonitoring converts gNMI to OAPI relative to a node in the tree.
func ToStoreTrafficMonitoring(ygotObjValue *reflect.Value, params ...string) (*StoreTrafficMonitoring, error) {
	resource := new(StoreTrafficMonitoring)

	// Property: default string
	//encoding gNMI attribute to OAPI
	reflectDefault, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Default")
	if err != nil {
		return nil, err
	}
	if reflectDefault != nil && isNotNil(reflectDefault.Interface()) {
		attrDefault := fmt.Sprintf("%v", reflectDefault.Interface())
		resource.Default = &attrDefault
	}

	// Property: enable bool
	//encoding gNMI attribute to OAPI
	reflectEnable, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Enable")
	if err != nil {
		return nil, err
	}
	if reflectEnable != nil && isNotNil(reflectEnable.Interface()) {
		boolEnable := reflectEnable.Interface().(bool)
		resource.Enable = boolEnable
	} else {
		resource.Enable = false
	}

	// Property: person-detection-application StoreTrafficMonitoringPersonDetectionApplication
	// Handle object
	reflectPersonDetectionApplication, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "PersonDetectionApplication")
	if err != nil {
		return nil, err
	}
	if reflectPersonDetectionApplication != nil && isNotNil(reflectPersonDetectionApplication.Interface()) {
		attrPersonDetectionApplication, err := ToStoreTrafficMonitoringPersonDetectionApplication(reflectPersonDetectionApplication, params...)
		if err != nil {
			return nil, err
		}
		resource.PersonDetectionApplication = attrPersonDetectionApplication
	}

	// Property: retail-area StoreTrafficMonitoringRetailAreaList
	// Handle object
	reflectRetailArea, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "RetailArea")
	if err != nil {
		return nil, err
	}
	if reflectRetailArea != nil && isNotNil(reflectRetailArea.Interface()) {
		attrRetailArea, err := ToStoreTrafficMonitoringRetailAreaList(reflectRetailArea, params...)
		if err != nil {
			return nil, err
		}
		resource.RetailArea = attrRetailArea
	}

	return resource, nil
}

// ToStoreTrafficMonitoringPersonDetectionApplication converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToStoreTrafficMonitoringPersonDetectionApplication(params ...string) (*StoreTrafficMonitoringPersonDetectionApplication, error) {
	resource := new(StoreTrafficMonitoringPersonDetectionApplication)

	reflectStoreTrafficMonitoringPersonDetectionApplication, err := utils.FindModelPluginObject(d.device, "StoreTrafficMonitoringPersonDetectionApplication", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToStoreTrafficMonitoringPersonDetectionApplication(reflectStoreTrafficMonitoringPersonDetectionApplication, params...)
	return resource, err

}

// ToStoreTrafficMonitoringPersonDetectionApplication converts gNMI to OAPI relative to a node in the tree.
func ToStoreTrafficMonitoringPersonDetectionApplication(ygotObjValue *reflect.Value, params ...string) (*StoreTrafficMonitoringPersonDetectionApplication, error) {
	resource := new(StoreTrafficMonitoringPersonDetectionApplication)

	// Property: device string
	// Enums handling
	reflectDevice, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Device")
	if err != nil {
		return nil, err
	}
	attrDevice := reflectDevice.Interface()
	_, yangDefDevice, err := utils.ExtractGnmiEnumMap(ygotObjValue, "StoreTrafficMonitoringPersonDetectionApplicationDevice", attrDevice)
	if err != nil {
		return nil, err
	}
	if yangDefDevice != nil {
		resource.Device = (StoreTrafficMonitoringPersonDetectionApplicationDevice)(yangDefDevice.Name)
	}

	// Property: model string
	//encoding gNMI attribute to OAPI
	reflectModel, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Model")
	if err != nil {
		return nil, err
	}
	if reflectModel != nil && isNotNil(reflectModel.Interface()) {
		attrModel := fmt.Sprintf("%v", reflectModel.Interface())
		resource.Model = &attrModel
	}

	// Property: model-state StoreTrafficMonitoringPersonDetectionApplicationModelState
	// Handle object
	reflectModelState, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "ModelState")
	if err != nil {
		return nil, err
	}
	if reflectModelState != nil && isNotNil(reflectModelState.Interface()) {
		attrModelState, err := ToStoreTrafficMonitoringPersonDetectionApplicationModelState(reflectModelState, params...)
		if err != nil {
			return nil, err
		}
		resource.ModelState = attrModelState
	}

	// Property: precision string
	// Enums handling
	reflectPrecision, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Precision")
	if err != nil {
		return nil, err
	}
	attrPrecision := reflectPrecision.Interface()
	_, yangDefPrecision, err := utils.ExtractGnmiEnumMap(ygotObjValue, "StoreTrafficMonitoringPersonDetectionApplicationPrecision", attrPrecision)
	if err != nil {
		return nil, err
	}
	if yangDefPrecision != nil {
		resource.Precision = (StoreTrafficMonitoringPersonDetectionApplicationPrecision)(yangDefPrecision.Name)
	}

	return resource, nil
}

// ToStoreTrafficMonitoringPersonDetectionApplicationDevice converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToStoreTrafficMonitoringPersonDetectionApplicationDevice(params ...string) (*StoreTrafficMonitoringPersonDetectionApplicationDevice, error) {
	resource := new(StoreTrafficMonitoringPersonDetectionApplicationDevice)

	reflectStoreTrafficMonitoringPersonDetectionApplicationDevice, err := utils.FindModelPluginObject(d.device, "StoreTrafficMonitoringPersonDetectionApplicationDevice", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToStoreTrafficMonitoringPersonDetectionApplicationDevice(reflectStoreTrafficMonitoringPersonDetectionApplicationDevice, params...)
	return resource, err

}

// ToStoreTrafficMonitoringPersonDetectionApplicationDevice converts gNMI to OAPI relative to a node in the tree.
func ToStoreTrafficMonitoringPersonDetectionApplicationDevice(ygotObjValue *reflect.Value, params ...string) (*StoreTrafficMonitoringPersonDetectionApplicationDevice, error) {
	resource := new(StoreTrafficMonitoringPersonDetectionApplicationDevice)

	return resource, nil
}

// ToStoreTrafficMonitoringPersonDetectionApplicationPrecision converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToStoreTrafficMonitoringPersonDetectionApplicationPrecision(params ...string) (*StoreTrafficMonitoringPersonDetectionApplicationPrecision, error) {
	resource := new(StoreTrafficMonitoringPersonDetectionApplicationPrecision)

	reflectStoreTrafficMonitoringPersonDetectionApplicationPrecision, err := utils.FindModelPluginObject(d.device, "StoreTrafficMonitoringPersonDetectionApplicationPrecision", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToStoreTrafficMonitoringPersonDetectionApplicationPrecision(reflectStoreTrafficMonitoringPersonDetectionApplicationPrecision, params...)
	return resource, err

}

// ToStoreTrafficMonitoringPersonDetectionApplicationPrecision converts gNMI to OAPI relative to a node in the tree.
func ToStoreTrafficMonitoringPersonDetectionApplicationPrecision(ygotObjValue *reflect.Value, params ...string) (*StoreTrafficMonitoringPersonDetectionApplicationPrecision, error) {
	resource := new(StoreTrafficMonitoringPersonDetectionApplicationPrecision)

	return resource, nil
}

// ToStoreTrafficMonitoringPersonDetectionApplicationModelState converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToStoreTrafficMonitoringPersonDetectionApplicationModelState(params ...string) (*StoreTrafficMonitoringPersonDetectionApplicationModelState, error) {
	resource := new(StoreTrafficMonitoringPersonDetectionApplicationModelState)

	reflectStoreTrafficMonitoringPersonDetectionApplicationModelState, err := utils.FindModelPluginObject(d.device, "StoreTrafficMonitoringPersonDetectionApplicationModelState", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToStoreTrafficMonitoringPersonDetectionApplicationModelState(reflectStoreTrafficMonitoringPersonDetectionApplicationModelState, params...)
	return resource, err

}

// ToStoreTrafficMonitoringPersonDetectionApplicationModelState converts gNMI to OAPI relative to a node in the tree.
func ToStoreTrafficMonitoringPersonDetectionApplicationModelState(ygotObjValue *reflect.Value, params ...string) (*StoreTrafficMonitoringPersonDetectionApplicationModelState, error) {
	resource := new(StoreTrafficMonitoringPersonDetectionApplicationModelState)

	// Property: active-model-file string
	//encoding gNMI attribute to OAPI
	reflectActiveModelFile, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "ActiveModelFile")
	if err != nil {
		return nil, err
	}
	if reflectActiveModelFile != nil && isNotNil(reflectActiveModelFile.Interface()) {
		attrActiveModelFile := fmt.Sprintf("%v", reflectActiveModelFile.Interface())
		resource.ActiveModelFile = &attrActiveModelFile
	}

	// Property: active-model-name string
	//encoding gNMI attribute to OAPI
	reflectActiveModelName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "ActiveModelName")
	if err != nil {
		return nil, err
	}
	if reflectActiveModelName != nil && isNotNil(reflectActiveModelName.Interface()) {
		attrActiveModelName := fmt.Sprintf("%v", reflectActiveModelName.Interface())
		resource.ActiveModelName = &attrActiveModelName
	}

	return resource, nil
}

// ToStoreTrafficMonitoringRetailArea converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToStoreTrafficMonitoringRetailArea(params ...string) (*StoreTrafficMonitoringRetailArea, error) {
	resource := new(StoreTrafficMonitoringRetailArea)

	reflectStoreTrafficMonitoringRetailArea, err := utils.FindModelPluginObject(d.device, "StoreTrafficMonitoringRetailArea", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToStoreTrafficMonitoringRetailArea(reflectStoreTrafficMonitoringRetailArea, params...)
	return resource, err

}

// ToStoreTrafficMonitoringRetailArea converts gNMI to OAPI relative to a node in the tree.
func ToStoreTrafficMonitoringRetailArea(ygotObjValue *reflect.Value, params ...string) (*StoreTrafficMonitoringRetailArea, error) {
	resource := new(StoreTrafficMonitoringRetailArea)

	// Property: area-ref ListKey
	//encoding gNMI attribute to OAPI
	reflectAreaRef, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "AreaRef")
	if err != nil {
		return nil, err
	}
	if reflectAreaRef != nil && isNotNil(reflectAreaRef.Interface()) {
		attrAreaRef := ListKey(reflectAreaRef.Interface().(string))
		resource.AreaRef = attrAreaRef
	} else {
		resource.AreaRef = ListKey("")
	}

	// Property: enabled bool
	//encoding gNMI attribute to OAPI
	reflectEnabled, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Enabled")
	if err != nil {
		return nil, err
	}
	if reflectEnabled != nil && isNotNil(reflectEnabled.Interface()) {
		boolEnabled := reflectEnabled.Interface().(bool)
		resource.Enabled = boolEnabled
	} else {
		resource.Enabled = false
	}

	// Property: stream-count int
	//encoding gNMI attribute to OAPI
	reflectStreamCount, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "StreamCount")
	if err != nil {
		return nil, err
	}
	if reflectStreamCount != nil && isNotNil(reflectStreamCount.Interface()) {
		//OpenAPI does not have unsigned numbers.
		if resource.StreamCount, err = utils.ToIntPtr(reflectStreamCount); err != nil {
			return nil, err
		}
	}

	return resource, nil
}

// ToStoreTrafficMonitoringRetailAreaList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToStoreTrafficMonitoringRetailAreaList(params ...string) (*StoreTrafficMonitoringRetailAreaList, error) {
	resource := new(StoreTrafficMonitoringRetailAreaList)

	// Array list - Go type StoreTrafficMonitoringRetailArea
	mpObject, err := utils.FindModelPluginObject(d.device, "StoreTrafficMonitoringRetailArea", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToStoreTrafficMonitoringRetailArea(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// ToStoreTrafficMonitoringRetailAreaList converts gNMI to OAPI relative to a node in the tree.
func ToStoreTrafficMonitoringRetailAreaList(ygotObjValue *reflect.Value, params ...string) (*StoreTrafficMonitoringRetailAreaList, error) {
	resource := new(StoreTrafficMonitoringRetailAreaList)

	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToStoreTrafficMonitoringRetailArea(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil
}

// ToStoreId converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToStoreId(params ...string) (*StoreId, error) {
	resource := new(StoreId)

	reflectStoreId, err := utils.FindModelPluginObject(d.device, "StoreId", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToStoreId(reflectStoreId, params...)
	return resource, err

}

// ToStoreId converts gNMI to OAPI relative to a node in the tree.
func ToStoreId(ygotObjValue *reflect.Value, params ...string) (*StoreId, error) {
	resource := new(StoreId)

	return resource, nil
}

//Ignoring RequestBodyRetailArea

//Ignoring RequestBodyRetailAreaLocation

//Ignoring RequestBodyRetailAreaSource

//Ignoring RequestBodyRetailAreaSourceLocation

//Ignoring RequestBodyRetailAreaSourceVideo

//Ignoring RequestBodyShelfMonitoring

//Ignoring RequestBodyShelfMonitoringObjectDetectionApplication

//Ignoring RequestBodyShelfMonitoringRetailArea

//Ignoring RequestBodyShopperMonitoring

//Ignoring RequestBodyShopperMonitoringEmotionRecognitionApplication

//Ignoring RequestBodyShopperMonitoringFaceDetectionApplication

//Ignoring RequestBodyShopperMonitoringHeadPoseDetectionApplication

//Ignoring RequestBodyShopperMonitoringRetailArea

//Ignoring RequestBodyStoreTrafficMonitoring

//Ignoring RequestBodyStoreTrafficMonitoringPersonDetectionApplication

//Ignoring RequestBodyStoreTrafficMonitoringRetailArea

func isNotNil(i interface{}) bool {
	if i == nil {
		return false
	}
	switch reflect.TypeOf(i).Kind() {
	case reflect.Ptr, reflect.Map, reflect.Array, reflect.Chan, reflect.Slice:
		return !reflect.ValueOf(i).IsNil()
	}
	return true
} // SPDX-FileCopyrightText: 2022-present Intel Corporation
//
// SPDX-License-Identifier: LicenseRef-Intel

// Not generating param-types

// SPDX-FileCopyrightText: 2022-present Intel Corporation
//
// SPDX-License-Identifier: LicenseRef-Intel

// Not generating request-bodies

// SPDX-FileCopyrightText: 2022-present Intel Corporation
//
// SPDX-License-Identifier: LicenseRef-Intel

// Not generating additional-properties
// SPDX-FileCopyrightText: 2022-present Intel Corporation
//
// SPDX-License-Identifier: LicenseRef-Intel

// Not generating additional-properties
